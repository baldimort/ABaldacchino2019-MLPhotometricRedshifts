(18:51 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(18:51 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(18:51 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(18:51 INFO) [40;37;1m - 21/02/19 18:51:21 - starting ANNZ[0m
(18:51 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:51 INFO)    [34msplitTypeTrain[0m[31m=[0m'[32mANNz_data10a.csv[0m' , [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34msplitTypeTest[0m[31m=[0m'[32mANNz_data10b.csv[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:ref_id;F:zb;F:pz_width;F:odds;F:qz;F:production_id;F:paudm_id;F:ra;F:dec;F:zspec;F:conf;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:band0_flux;F:band1_flux;F:band2_flux;F:band3_flux;F:band4_flux;F:band5_flux;F:band6_flux;F:band7_flux;F:band8_flux;F:band9_flux;F:band10_flux;F:band11_flux;F:band12_flux;F:band13_flux;F:band14_flux;F:band15_flux;F:band16_flux;F:band17_flux;F:band18_flux;F:band19_flux;F:band20_flux;F:band21_flux;F:band22_flux;F:band23_flux;F:band24_flux;F:band25_flux;F:band26_flux;F:band27_flux;F:band28_flux;F:band29_flux;F:band30_flux;F:band31_flux;F:band32_flux;F:band33_flux;F:band34_flux;F:band35_flux;F:band36_flux;F:band37_flux;F:band38_flux;F:band39_flux;F:band0_flux_error;F:band1_flux_error;F:band2_flux_error;F:band3_flux_error;F:band4_flux_error;F:band5_flux_error;F:band6_flux_error;F:band7_flux_error;F:band8_flux_error;F:band9_flux_error;F:band10_flux_error;F:band11_flux_error;F:band12_flux_error;F:band13_flux_error;F:band14_flux_error;F:band15_flux_error;F:band16_flux_error;F:band17_flux_error;F:band18_flux_error;F:band19_flux_error;F:band20_flux_error;F:band21_flux_error;F:band22_flux_error;F:band23_flux_error;F:band24_flux_error;F:band25_flux_error;F:band26_flux_error;F:band27_flux_error;F:band28_flux_error;F:band29_flux_error;F:band30_flux_error;F:band31_flux_error;F:band32_flux_error;F:band33_flux_error;F:band34_flux_error;F:band35_flux_error;F:band36_flux_error;F:band37_flux_error;F:band38_flux_error;F:band39_flux_error[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mTrue[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:51 INFO) 
[18:51:21    INFO]  -----------------------------------------------------
[18:51:21    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:51:21    INFO]  -----------------------------------------------------------------------------------------------------------
[18:51:25    INFO]  - starting inputToSplitTree() ... 
[18:51:25    INFO]  - Found 8926 lines in file PAUS/ANNz_data10a.csv -> total so far = 8926 ... 
[18:51:25    INFO]  - Found 2232 lines in file PAUS/ANNz_data10b.csv -> total so far = 2232 ... 
[18:51:25    INFO]  - Now reading-in PAUS/ANNz_data10a.csv ... 
[18:51:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:51:27    INFO]  -- ANNZ_tree .......................................... 0  index
[18:51:27    INFO]  -- ANNZ_tree ....................................... 8926  nLine
[18:51:27    INFO]  -- ANNZ_tree ....................................... 8926  nLineFile
[18:51:27    INFO]  -- ANNZ_tree ....................................... 8926  nObj
[18:51:27    INFO]  -- ANNZ_tree .......................................... 0  nTest
[18:51:27    INFO]  -- ANNZ_tree ....................................... 8926  nTrain
[18:51:27    INFO]  -----------------------------------------------------------------------------------------------------------
[18:51:27    INFO]  - Now reading-in PAUS/ANNz_data10b.csv ... 
[18:51:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:51:27    INFO]  -- ANNZ_tree .......................................... 0  index
[18:51:27    INFO]  -- ANNZ_tree ...................................... 11158  nLine
[18:51:27    INFO]  -- ANNZ_tree ....................................... 2232  nLineFile
[18:51:27    INFO]  -- ANNZ_tree ....................................... 2232  nObj
[18:51:27    INFO]  -- ANNZ_tree ....................................... 2232  nTest
[18:51:27    INFO]  -- ANNZ_tree ....................................... 8926  nTrain
[18:51:27    INFO]  -----------------------------------------------------------------------------------------------------------
[18:51:28    INFO]  - Writing to plotting directory output/SPEC_advanced4/rootIn/plots/
[18:51:29    INFO]  - Writing to plotting directory output/SPEC_advanced4/rootIn/plots/

(18:51 INFO) [40;37;1m - 21/02/19 18:51:32 - finished running ANNZ ![0m
(18:52 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(18:52 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(18:52 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(18:52 INFO) [40;37;1m - 21/02/19 18:52:07 - starting ANNZ[0m
(18:52 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:52 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+1:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=98260:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:52 INFO) 
[18:52:07    INFO]  -----------------------------------------------------
[18:52:07    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:52:07    INFO]  -----------------------------------------------------------------------------------------------------------
[18:52:09    INFO]  - starting ANNZ::Init()  ... 
[18:52:10    INFO]  - Saving run information in ./output/SPEC_advanced4/regres/train/ANNZ_0/saveOpt.txt ...
[18:52:28    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:52:28    INFO] ----------------------------------------------------------------------------------------------------
[18:52:28    INFO]  - will book (ANNZ_0) method(ANN) with options: :HiddenLayers=N+1,N+1:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=98260:VarTransform=N,P
[18:52:28    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:52:28    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[18:52:28    INFO]      cuts (train):        ,
[18:52:28    INFO]      cuts (valid):       
[18:52:28    INFO]    - weights:            1
[18:52:28    INFO] ----------------------------------------------------------------------------------------------------
[18:52:28    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:39:53    INFO]  - Saving MLM information in ./output/SPEC_advanced4/regres/train/ANNZ_0/ANNZ_0_weights/saveTrainOpt_ANNZ_0.txt ...
[19:39:55    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[19:39:55    INFO]  - Will gen. input-parameter errors ...
[19:39:57    INFO]  - starting ANNZ::loadReaders() ... 
[19:39:57    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[19:40:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:40:31    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:40:31    INFO]  -----------------------------------------------------------------------------------------------------------
[19:40:31    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[19:40:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:40:40    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:40:40    INFO]  -----------------------------------------------------------------------------------------------------------
[19:40:40    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:40:41    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:40:41    INFO]  - will try to derive a bias correction ... 
[19:40:41    INFO]  - will validate that training produced an XML file for later ... 
[19:40:41    INFO]  - starting ANNZ::loadReaders() ... 
[19:40:41    INFO]  - will validate that the training was not a complete failure ... 
[19:40:41    INFO]  - training seems to have been successful! will move on ...
[19:40:41    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[19:40:44    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:40:45    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:40:45    INFO] ----------------------------------------------------------------------------------------------------
[19:40:45    INFO]  - will book (ANNZ_0_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[19:40:45    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:40:45    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[19:40:45    INFO]    - weights:            1
[19:40:45    INFO] ----------------------------------------------------------------------------------------------------
[19:40:46    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:40:50    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[19:40:50    INFO]  - Will gen. input-parameter errors ...
[19:40:52    INFO]  - starting ANNZ::loadReaders() ... 
[19:40:53    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[19:42:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:42:01    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:42:01    INFO]  -----------------------------------------------------------------------------------------------------------
[19:42:01    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[19:42:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:42:22    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:42:22    INFO]  -----------------------------------------------------------------------------------------------------------
[19:42:22    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:42:24    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:42:24    INFO]  - will validate that the bias-correction actually improved the result ...
[19:42:24    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:42:24    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
[19:42:28    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_0/plots/
[19:42:36        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_0/plots output/SPEC_advanced4/regres/train/ANNZ_0/plots_biasCor_before
[19:42:36    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:42:36    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
[19:42:39    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_0/plots/
[19:42:47        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_0/plots output/SPEC_advanced4/regres/train/ANNZ_0/plots_biasCor_after
[19:42:47    INFO]  - Got original [KS-test,N_poiss]: [0.0638527 , 6.59373] , after the bias-correction: [0.0512596 , 5.8703] --> will KEEP the correction !

(19:42 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(19:42 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=520:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(19:42 INFO) 
[19:42:51    INFO]  -----------------------------------------------------
[19:42:51    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[19:42:51    INFO]  -----------------------------------------------------------------------------------------------------------
[19:42:53    INFO]  - starting ANNZ::Init()  ... 
[19:42:55    INFO]  - Saving run information in ./output/SPEC_advanced4/regres/train/ANNZ_1/saveOpt.txt ...
[19:43:14    INFO]  - starting ANNZ::Train_singleReg() ... 
[19:43:15    INFO] ----------------------------------------------------------------------------------------------------
[19:43:15    INFO]  - will book (ANNZ_1) method(BDT) with options: :NTrees=520:BoostType=Bagging:VarTransform=N,P
[19:43:15    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:43:15    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[19:43:15    INFO]      cuts (train):        ,
[19:43:15    INFO]      cuts (valid):       
[19:43:15    INFO]    - weights:            1
[19:43:15    INFO] ----------------------------------------------------------------------------------------------------
[19:43:15    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:44:02    INFO]  - Saving MLM information in ./output/SPEC_advanced4/regres/train/ANNZ_1/ANNZ_1_weights/saveTrainOpt_ANNZ_1.txt ...
[19:44:09    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[19:44:09    INFO]  - Will gen. input-parameter errors ...
[19:44:12    INFO]  - starting ANNZ::loadReaders() ... 
[19:44:30    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[19:50:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:50:39    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[19:50:39    INFO]  -----------------------------------------------------------------------------------------------------------
[19:50:39    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[19:52:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:52:46    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[19:52:46    INFO]  -----------------------------------------------------------------------------------------------------------
[19:52:46    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:52:49    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:52:49    INFO]  - will try to derive a bias correction ... 
[19:52:49    INFO]  - will validate that training produced an XML file for later ... 
[19:52:49    INFO]  - starting ANNZ::loadReaders() ... 
[19:52:55    INFO]  - will validate that the training was not a complete failure ... 
[19:52:55    INFO]  - training seems to have been successful! will move on ...
[19:52:55    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[19:53:01    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:53:02    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:53:03    INFO] ----------------------------------------------------------------------------------------------------
[19:53:03    INFO]  - will book (ANNZ_1_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[19:53:03    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:53:03    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[19:53:03    INFO]    - weights:            1
[19:53:03    INFO] ----------------------------------------------------------------------------------------------------
[19:53:03    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:53:15    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[19:53:15    INFO]  - Will gen. input-parameter errors ...
[19:53:19    INFO]  - starting ANNZ::loadReaders() ... 
[19:53:43    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[20:01:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:01:40    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[20:01:40    INFO]  -----------------------------------------------------------------------------------------------------------
[20:01:40    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[20:03:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:03:34    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[20:03:34    INFO]  -----------------------------------------------------------------------------------------------------------
[20:03:35    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:03:38    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:03:38    INFO]  - will validate that the bias-correction actually improved the result ...
[20:03:38    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:03:38    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
[20:03:44    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_1/plots/
[20:03:55        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_1/plots output/SPEC_advanced4/regres/train/ANNZ_1/plots_biasCor_before
[20:03:55    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:03:55    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
[20:04:00    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_1/plots/
[20:04:10        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_1/plots output/SPEC_advanced4/regres/train/ANNZ_1/plots_biasCor_after
[20:04:10    INFO]  - Got original [KS-test,N_poiss]: [0.0948914 , 6.87467] , after the bias-correction: [0.0476137 , 5.88963] --> will KEEP the correction !

(20:04 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:04 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:04 INFO) 
[20:04:15    INFO]  -----------------------------------------------------
[20:04:15    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:04:15    INFO]  -----------------------------------------------------------------------------------------------------------
[20:04:17    INFO]  - starting ANNZ::Init()  ... 
[20:04:19    INFO]  - Saving run information in ./output/SPEC_advanced4/regres/train/ANNZ_2/saveOpt.txt ...
[20:04:40    INFO]  - starting ANNZ::Train_singleReg() ... 
[20:04:40    INFO] ----------------------------------------------------------------------------------------------------
[20:04:40    INFO]  - will book (ANNZ_2) method(BDT) with options: :NTrees=430:BoostType=Bagging:VarTransform=N
[20:04:40    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:04:40    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[20:04:40    INFO]      cuts (train):        ,
[20:04:40    INFO]      cuts (valid):       
[20:04:40    INFO]    - weights:            1
[20:04:40    INFO] ----------------------------------------------------------------------------------------------------
[20:04:41    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:05:26    INFO]  - Saving MLM information in ./output/SPEC_advanced4/regres/train/ANNZ_2/ANNZ_2_weights/saveTrainOpt_ANNZ_2.txt ...
[20:05:32    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[20:05:32    INFO]  - Will gen. input-parameter errors ...
[20:05:36    INFO]  - starting ANNZ::loadReaders() ... 
[20:05:55    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[20:09:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:09:05    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[20:09:05    INFO]  -----------------------------------------------------------------------------------------------------------
[20:09:05    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[20:09:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:09:48    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[20:09:48    INFO]  -----------------------------------------------------------------------------------------------------------
[20:09:48    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:09:51    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:09:51    INFO]  - will try to derive a bias correction ... 
[20:09:51    INFO]  - will validate that training produced an XML file for later ... 
[20:09:51    INFO]  - starting ANNZ::loadReaders() ... 
[20:09:56    INFO]  - will validate that the training was not a complete failure ... 
[20:09:56    INFO]  - training seems to have been successful! will move on ...
[20:09:56    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[20:10:02    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:10:03    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:10:04    INFO] ----------------------------------------------------------------------------------------------------
[20:10:04    INFO]  - will book (ANNZ_2_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[20:10:04    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:10:04    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[20:10:04    INFO]    - weights:            1
[20:10:04    INFO] ----------------------------------------------------------------------------------------------------
[20:10:04    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:10:14    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[20:10:14    INFO]  - Will gen. input-parameter errors ...
[20:10:17    INFO]  - starting ANNZ::loadReaders() ... 
[20:10:33    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[20:13:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:13:17    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[20:13:17    INFO]  -----------------------------------------------------------------------------------------------------------
[20:13:17    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[20:13:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:13:55    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[20:13:55    INFO]  -----------------------------------------------------------------------------------------------------------
[20:13:55    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:13:57    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:13:57    INFO]  - will validate that the bias-correction actually improved the result ...
[20:13:57    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:13:57    INFO]  - Will use (1) MLMs from the input chain: ANNZ_2,
[20:14:02    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_2/plots/
[20:14:15        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_2/plots output/SPEC_advanced4/regres/train/ANNZ_2/plots_biasCor_before
[20:14:15    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:14:15    INFO]  - Will use (1) MLMs from the input chain: ANNZ_2,
[20:14:20    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_2/plots/
[20:14:35        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_2/plots output/SPEC_advanced4/regres/train/ANNZ_2/plots_biasCor_after
[20:14:35    INFO]  - Got original [KS-test,N_poiss]: [0.0820076 , 6.86831] , after the bias-correction: [0.0479499 , 5.96151] --> will KEEP the correction !

(20:14 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:14 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+9:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=87317:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:14 INFO) 
[20:14:41    INFO]  -----------------------------------------------------
[20:14:41    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:14:41    INFO]  -----------------------------------------------------------------------------------------------------------
[20:14:43    INFO]  - starting ANNZ::Init()  ... 
[20:14:45    INFO]  - Saving run information in ./output/SPEC_advanced4/regres/train/ANNZ_3/saveOpt.txt ...
[20:15:06    INFO]  - starting ANNZ::Train_singleReg() ... 
[20:15:07    INFO] ----------------------------------------------------------------------------------------------------
[20:15:07    INFO]  - will book (ANNZ_3) method(ANN) with options: :HiddenLayers=N+3,N+9:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=87317:VarTransform=N,P
[20:15:07    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:15:07    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[20:15:07    INFO]      cuts (train):        ,
[20:15:07    INFO]      cuts (valid):       
[20:15:07    INFO]    - weights:            1
[20:15:07    INFO] ----------------------------------------------------------------------------------------------------
[20:15:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 1 diag elements < tolerance of 2.2204e-16
(08:31 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(08:31 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(08:31 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(08:31 INFO) [40;37;1m - 22/02/19 08:31:31 - starting ANNZ[0m
(08:31 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:31 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1050:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:31 INFO) 
[08:31:31    INFO]  -----------------------------------------------------
[08:31:31    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:31:31    INFO]  -----------------------------------------------------------------------------------------------------------
[08:31:33    INFO]  - starting ANNZ::Init()  ... 
[08:31:33    INFO]  - found trained "ANNZ_0" (./output/SPEC_advanced4/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[08:31:33    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:31 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:31 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+9:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=19078:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:31 INFO) 
[08:31:33    INFO]  -----------------------------------------------------
[08:31:33    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:31:33    INFO]  -----------------------------------------------------------------------------------------------------------
[08:31:35    INFO]  - starting ANNZ::Init()  ... 
[08:31:36    INFO]  - found trained "ANNZ_1" (./output/SPEC_advanced4/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[08:31:36    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:31 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:31 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:31 INFO) 
[08:31:36    INFO]  -----------------------------------------------------
[08:31:36    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:31:36    INFO]  -----------------------------------------------------------------------------------------------------------
[08:31:38    INFO]  - starting ANNZ::Init()  ... 
[08:31:39    INFO]  - found trained "ANNZ_2" (./output/SPEC_advanced4/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[08:31:39    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:31 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:31 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=58714:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:31 INFO) 
[08:31:39    INFO]  -----------------------------------------------------
[08:31:39    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:31:39    INFO]  -----------------------------------------------------------------------------------------------------------
[08:31:41    INFO]  - starting ANNZ::Init()  ... 
[08:31:44    INFO]  - Saving run information in ./output/SPEC_advanced4/regres/train/ANNZ_3/saveOpt.txt ...
[08:32:06    INFO]  - starting ANNZ::Train_singleReg() ... 
[08:32:06    INFO] ----------------------------------------------------------------------------------------------------
[08:32:06    INFO]  - will book (ANNZ_3) method(ANN) with options: :HiddenLayers=N+3,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=58714:VarTransform=N,P
[08:32:06    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[08:32:06    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[08:32:06    INFO]      cuts (train):        ,
[08:32:06    INFO]      cuts (valid):       
[08:32:06    INFO]    - weights:            1
[08:32:06    INFO] ----------------------------------------------------------------------------------------------------
[08:32:06    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 25 diag elements < tolerance of 2.2204e-16
(08:36 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(08:36 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(08:36 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(08:36 INFO) [40;37;1m - 22/02/19 08:36:05 - starting ANNZ[0m
(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+9:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=56835[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:05    INFO]  -----------------------------------------------------
[08:36:05    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:05    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:07    INFO]  - starting ANNZ::Init()  ... 
[08:36:07    INFO]  - found trained "ANNZ_0" (./output/SPEC_advanced4/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[08:36:07    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=270:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:07    INFO]  -----------------------------------------------------
[08:36:07    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:07    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:09    INFO]  - starting ANNZ::Init()  ... 
[08:36:10    INFO]  - found trained "ANNZ_1" (./output/SPEC_advanced4/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[08:36:10    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=280:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:10    INFO]  -----------------------------------------------------
[08:36:10    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:10    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:12    INFO]  - starting ANNZ::Init()  ... 
[08:36:13    INFO]  - found trained "ANNZ_2" (./output/SPEC_advanced4/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[08:36:13    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=290:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:13    INFO]  -----------------------------------------------------
[08:36:13    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:13    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:15    INFO]  - starting ANNZ::Init()  ... 
[08:36:17    INFO]  - Saving run information in ./output/SPEC_advanced4/regres/train/ANNZ_3/saveOpt.txt ...
[08:36:45    INFO]  - starting ANNZ::Train_singleReg() ... 
[08:36:46    INFO] ----------------------------------------------------------------------------------------------------
[08:36:46    INFO]  - will book (ANNZ_3) method(BDT) with options: :NTrees=290:BoostType=AdaBoost:VarTransform=N,P
[08:36:46    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[08:36:46    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[08:36:46    INFO]      cuts (train):        ,
[08:36:46    INFO]      cuts (valid):       
[08:36:46    INFO]    - weights:            1
[08:36:46    INFO] ----------------------------------------------------------------------------------------------------
[08:36:46    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[08:37:08    INFO]  - Saving MLM information in ./output/SPEC_advanced4/regres/train/ANNZ_3/ANNZ_3_weights/saveTrainOpt_ANNZ_3.txt ...
[08:37:11    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[08:37:11    INFO]  - Will gen. input-parameter errors ...
[08:37:13    INFO]  - starting ANNZ::loadReaders() ... 
[08:37:18    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[08:38:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:38:54    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[08:38:54    INFO]  -----------------------------------------------------------------------------------------------------------
[08:38:54    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[08:39:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:39:20    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[08:39:20    INFO]  -----------------------------------------------------------------------------------------------------------
[08:39:21    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[08:39:22    INFO]  - ending makeTreeRegClsOneMLM() ... 
[08:39:22    INFO]  - will try to derive a bias correction ... 
[08:39:22    INFO]  - will validate that training produced an XML file for later ... 
[08:39:22    INFO]  - starting ANNZ::loadReaders() ... 
[08:39:24    INFO]  - will validate that the training was not a complete failure ... 
[08:39:24    INFO]  - training seems to have been successful! will move on ...
[08:39:24    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[08:39:29    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[08:39:30    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[08:39:30    INFO] ----------------------------------------------------------------------------------------------------
[08:39:30    INFO]  - will book (ANNZ_3_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[08:39:30    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[08:39:30    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[08:39:30    INFO]    - weights:            1
[08:39:30    INFO] ----------------------------------------------------------------------------------------------------
[08:39:30    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[08:39:38    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[08:39:38    INFO]  - Will gen. input-parameter errors ...
[08:39:41    INFO]  - starting ANNZ::loadReaders() ... 
[08:39:47    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[08:41:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:41:15    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[08:41:15    INFO]  -----------------------------------------------------------------------------------------------------------
[08:41:15    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[08:41:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:41:38    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[08:41:38    INFO]  -----------------------------------------------------------------------------------------------------------
[08:41:39    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[08:41:40    INFO]  - ending makeTreeRegClsOneMLM() ... 
[08:41:40    INFO]  - will validate that the bias-correction actually improved the result ...
[08:41:40    INFO]  - starting ANNZ::doMetricPlots() ... 
[08:41:40    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
Warning in <Fit>: Fit data is empty 
[08:41:45    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_3/plots/
[08:41:53        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_3/plots output/SPEC_advanced4/regres/train/ANNZ_3/plots_biasCor_before
[08:41:53    INFO]  - starting ANNZ::doMetricPlots() ... 
[08:41:53    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
[08:41:57    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_3/plots/
[08:42:05        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_3/plots output/SPEC_advanced4/regres/train/ANNZ_3/plots_biasCor_after
[08:42:05    INFO]  - Got original [KS-test,N_poiss]: [0.086713 , 6.37023] , after the bias-correction: [0.0448129 , 5.69304] --> will KEEP the correction !

(08:42 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:42 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=520:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:42 INFO) 
[08:42:10    INFO]  -----------------------------------------------------
[08:42:10    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:42:10    INFO]  -----------------------------------------------------------------------------------------------------------
[08:42:12    INFO]  - starting ANNZ::Init()  ... 
[08:42:14    INFO]  - Saving run information in ./output/SPEC_advanced4/regres/train/ANNZ_4/saveOpt.txt ...
[08:42:36    INFO]  - starting ANNZ::Train_singleReg() ... 
[08:42:37    INFO] ----------------------------------------------------------------------------------------------------
[08:42:37    INFO]  - will book (ANNZ_4) method(BDT) with options: :NTrees=520:BoostType=AdaBoostR2:VarTransform=N
[08:42:37    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[08:42:37    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[08:42:37    INFO]      cuts (train):        ,
[08:42:37    INFO]      cuts (valid):       
[08:42:37    INFO]    - weights:            1
[08:42:37    INFO] ----------------------------------------------------------------------------------------------------
[08:42:37    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[08:43:31    INFO]  - Saving MLM information in ./output/SPEC_advanced4/regres/train/ANNZ_4/ANNZ_4_weights/saveTrainOpt_ANNZ_4.txt ...
[08:43:36    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[08:43:36    INFO]  - Will gen. input-parameter errors ...
[08:43:39    INFO]  - starting ANNZ::loadReaders() ... 
[08:44:02    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[09:01:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:01:24    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:01:24    INFO]  -----------------------------------------------------------------------------------------------------------
[09:01:24    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[09:05:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:05:19    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:05:19    INFO]  -----------------------------------------------------------------------------------------------------------
[09:05:20    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:05:22    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:05:22    INFO]  - will try to derive a bias correction ... 
[09:05:22    INFO]  - will validate that training produced an XML file for later ... 
[09:05:22    INFO]  - starting ANNZ::loadReaders() ... 
[09:05:26    INFO]  - will validate that the training was not a complete failure ... 
[09:05:26    INFO]  - training seems to have been successful! will move on ...
[09:05:26    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[09:05:32    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:05:33    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:05:33    INFO] ----------------------------------------------------------------------------------------------------
[09:05:33    INFO]  - will book (ANNZ_4_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[09:05:33    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:05:33    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[09:05:33    INFO]    - weights:            1
[09:05:33    INFO] ----------------------------------------------------------------------------------------------------
[09:05:34    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:05:44    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[09:05:44    INFO]  - Will gen. input-parameter errors ...
[09:05:47    INFO]  - starting ANNZ::loadReaders() ... 
[09:06:08    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[09:19:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:19:02    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:19:02    INFO]  -----------------------------------------------------------------------------------------------------------
[09:19:02    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[09:22:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:22:21    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:22:21    INFO]  -----------------------------------------------------------------------------------------------------------
[09:22:21    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:22:23    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:22:23    INFO]  - will validate that the bias-correction actually improved the result ...
[09:22:23    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:22:23    INFO]  - Will use (1) MLMs from the input chain: ANNZ_4,
[09:22:27    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_4/plots/
[09:22:37        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_4/plots output/SPEC_advanced4/regres/train/ANNZ_4/plots_biasCor_before
[09:22:37    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:22:37    INFO]  - Will use (1) MLMs from the input chain: ANNZ_4,
Warning in <Fit>: Fit data is empty 
[09:22:41    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_4/plots/
[09:22:50        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_4/plots output/SPEC_advanced4/regres/train/ANNZ_4/plots_biasCor_after
[09:22:50    INFO]  - Got original [KS-test,N_poiss]: [0.0657629 , 6.94063] , after the bias-correction: [0.0388752 , 5.65008] --> will KEEP the correction !

(09:22 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:22 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=AdaBoostR2[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:22 INFO) 
[09:22:56    INFO]  -----------------------------------------------------
[09:22:56    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:22:56    INFO]  -----------------------------------------------------------------------------------------------------------
[09:22:58    INFO]  - starting ANNZ::Init()  ... 
[09:23:00    INFO]  - Saving run information in ./output/SPEC_advanced4/regres/train/ANNZ_5/saveOpt.txt ...
[09:23:20    INFO]  - starting ANNZ::Train_singleReg() ... 
[09:23:21    INFO] ----------------------------------------------------------------------------------------------------
[09:23:21    INFO]  - will book (ANNZ_5) method(BDT) with options: :NTrees=500:BoostType=AdaBoostR2:VarTransform=N
[09:23:21    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:23:21    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[09:23:21    INFO]      cuts (train):        ,
[09:23:21    INFO]      cuts (valid):       
[09:23:21    INFO]    - weights:            1
[09:23:21    INFO] ----------------------------------------------------------------------------------------------------
[09:23:21    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:24:11    INFO]  - Saving MLM information in ./output/SPEC_advanced4/regres/train/ANNZ_5/ANNZ_5_weights/saveTrainOpt_ANNZ_5.txt ...
[09:24:14    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[09:24:14    INFO]  - Will gen. input-parameter errors ...
[09:24:16    INFO]  - starting ANNZ::loadReaders() ... 
[09:24:30    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[09:37:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:37:19    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:37:19    INFO]  -----------------------------------------------------------------------------------------------------------
[09:37:19    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[09:39:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:39:57    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:39:57    INFO]  -----------------------------------------------------------------------------------------------------------
[09:39:57    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:39:59    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:39:59    INFO]  - will try to derive a bias correction ... 
[09:39:59    INFO]  - will validate that training produced an XML file for later ... 
[09:39:59    INFO]  - starting ANNZ::loadReaders() ... 
[09:40:02    INFO]  - will validate that the training was not a complete failure ... 
[09:40:02    INFO]  - training seems to have been successful! will move on ...
[09:40:02    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[09:40:07    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:40:08    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:40:08    INFO] ----------------------------------------------------------------------------------------------------
[09:40:08    INFO]  - will book (ANNZ_5_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[09:40:08    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:40:08    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[09:40:08    INFO]    - weights:            1
[09:40:08    INFO] ----------------------------------------------------------------------------------------------------
[09:40:08    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:40:15    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[09:40:15    INFO]  - Will gen. input-parameter errors ...
[09:40:17    INFO]  - starting ANNZ::loadReaders() ... 
[09:40:27    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[09:50:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:50:04    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:50:04    INFO]  -----------------------------------------------------------------------------------------------------------
[09:50:04    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[09:52:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:52:26    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:52:26    INFO]  -----------------------------------------------------------------------------------------------------------
[09:52:29    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:52:31    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:52:31    INFO]  - will validate that the bias-correction actually improved the result ...
[09:52:31    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:52:31    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
[09:52:35    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_5/plots/
[09:52:43        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_5/plots output/SPEC_advanced4/regres/train/ANNZ_5/plots_biasCor_before
[09:52:43    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:52:43    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
Warning in <Fit>: Fit data is empty 
[09:52:46    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_5/plots/
[09:52:54        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_5/plots output/SPEC_advanced4/regres/train/ANNZ_5/plots_biasCor_after
[09:52:54    INFO]  - Got original [KS-test,N_poiss]: [0.0653148 , 6.90488] , after the bias-correction: [0.0379789 , 5.80986] --> will KEEP the correction !

(09:52 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:52 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=550:BoostType=AdaBoost:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:52 INFO) 
[09:52:59    INFO]  -----------------------------------------------------
[09:52:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[09:52:59    INFO]  -----------------------------------------------------------------------------------------------------------
[09:53:00    INFO]  - starting ANNZ::Init()  ... 
[09:53:02    INFO]  - Saving run information in ./output/SPEC_advanced4/regres/train/ANNZ_6/saveOpt.txt ...
[09:53:19    INFO]  - starting ANNZ::Train_singleReg() ... 
[09:53:19    INFO] ----------------------------------------------------------------------------------------------------
[09:53:19    INFO]  - will book (ANNZ_6) method(BDT) with options: :NTrees=550:BoostType=AdaBoost:VarTransform=P
[09:53:19    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:53:19    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[09:53:19    INFO]      cuts (train):        ,
[09:53:19    INFO]      cuts (valid):       
[09:53:19    INFO]    - weights:            1
[09:53:19    INFO] ----------------------------------------------------------------------------------------------------
[09:53:20    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:53:48    INFO]  - Saving MLM information in ./output/SPEC_advanced4/regres/train/ANNZ_6/ANNZ_6_weights/saveTrainOpt_ANNZ_6.txt ...
[09:53:51    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[09:53:51    INFO]  - Will gen. input-parameter errors ...
[09:53:53    INFO]  - starting ANNZ::loadReaders() ... 
[09:53:57    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[09:56:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:56:13    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:56:13    INFO]  -----------------------------------------------------------------------------------------------------------
[09:56:13    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[09:56:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:56:47    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:56:47    INFO]  -----------------------------------------------------------------------------------------------------------
[09:56:47    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:56:48    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:56:48    INFO]  - will try to derive a bias correction ... 
[09:56:48    INFO]  - will validate that training produced an XML file for later ... 
[09:56:48    INFO]  - starting ANNZ::loadReaders() ... 
[09:56:50    INFO]  - will validate that the training was not a complete failure ... 
[09:56:50    INFO]  - training seems to have been successful! will move on ...
[09:56:50    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[09:56:55    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:56:55    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[09:56:56    INFO] ----------------------------------------------------------------------------------------------------
[09:56:56    INFO]  - will book (ANNZ_6_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[09:56:56    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[09:56:56    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[09:56:56    INFO]    - weights:            1
[09:56:56    INFO] ----------------------------------------------------------------------------------------------------
[09:56:56    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[09:57:01    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[09:57:01    INFO]  - Will gen. input-parameter errors ...
[09:57:03    INFO]  - starting ANNZ::loadReaders() ... 
[09:57:08    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[09:58:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:58:59    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[09:58:59    INFO]  -----------------------------------------------------------------------------------------------------------
[09:58:59    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[09:59:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[09:59:30    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[09:59:30    INFO]  -----------------------------------------------------------------------------------------------------------
[09:59:30    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[09:59:32    INFO]  - ending makeTreeRegClsOneMLM() ... 
[09:59:32    INFO]  - will validate that the bias-correction actually improved the result ...
[09:59:32    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:59:32    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
[09:59:36    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_6/plots/
[09:59:44        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_6/plots output/SPEC_advanced4/regres/train/ANNZ_6/plots_biasCor_before
[09:59:44    INFO]  - starting ANNZ::doMetricPlots() ... 
[09:59:44    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
[09:59:48    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_6/plots/
[09:59:55        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_6/plots output/SPEC_advanced4/regres/train/ANNZ_6/plots_biasCor_after
[09:59:55    INFO]  - Got original [KS-test,N_poiss]: [0.0870491 , 6.39317] , after the bias-correction: [0.0387632 , 5.73396] --> will KEEP the correction !

(09:59 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(09:59 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+9:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=41605:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(09:59 INFO) 
[10:00:00    INFO]  -----------------------------------------------------
[10:00:00    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:00:00    INFO]  -----------------------------------------------------------------------------------------------------------
[10:00:01    INFO]  - starting ANNZ::Init()  ... 
[10:00:03    INFO]  - Saving run information in ./output/SPEC_advanced4/regres/train/ANNZ_7/saveOpt.txt ...
[10:00:20    INFO]  - starting ANNZ::Train_singleReg() ... 
[10:00:20    INFO] ----------------------------------------------------------------------------------------------------
[10:00:20    INFO]  - will book (ANNZ_7) method(ANN) with options: :HiddenLayers=N+3,N+9:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=41605:VarTransform=N
[10:00:20    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:00:20    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[10:00:20    INFO]      cuts (train):        ,
[10:00:20    INFO]      cuts (valid):       
[10:00:20    INFO]    - weights:            1
[10:00:20    INFO] ----------------------------------------------------------------------------------------------------
[10:00:20    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:14:44    INFO]  - Saving MLM information in ./output/SPEC_advanced4/regres/train/ANNZ_7/ANNZ_7_weights/saveTrainOpt_ANNZ_7.txt ...
[10:14:46    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[10:14:46    INFO]  - Will gen. input-parameter errors ...
[10:14:48    INFO]  - starting ANNZ::loadReaders() ... 
[10:14:49    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[10:15:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:15:16    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[10:15:16    INFO]  -----------------------------------------------------------------------------------------------------------
[10:15:16    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[10:15:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:15:23    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[10:15:23    INFO]  -----------------------------------------------------------------------------------------------------------
[10:15:23    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:15:24    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:15:24    INFO]  - will try to derive a bias correction ... 
[10:15:24    INFO]  - will validate that training produced an XML file for later ... 
[10:15:24    INFO]  - starting ANNZ::loadReaders() ... 
[10:15:24    INFO]  - will validate that the training was not a complete failure ... 
[10:15:24    INFO]  - training seems to have been successful! will move on ...
[10:15:24    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[10:15:28    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:15:29    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[10:15:29    INFO] ----------------------------------------------------------------------------------------------------
[10:15:29    INFO]  - will book (ANNZ_7_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[10:15:29    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:15:29    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[10:15:29    INFO]    - weights:            1
[10:15:29    INFO] ----------------------------------------------------------------------------------------------------
[10:15:29    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[10:15:34    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[10:15:34    INFO]  - Will gen. input-parameter errors ...
[10:15:36    INFO]  - starting ANNZ::loadReaders() ... 
[10:15:37    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[10:16:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:16:37    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[10:16:37    INFO]  -----------------------------------------------------------------------------------------------------------
[10:16:37    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[10:16:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:16:52    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[10:16:52    INFO]  -----------------------------------------------------------------------------------------------------------
[10:16:52    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[10:16:53    INFO]  - ending makeTreeRegClsOneMLM() ... 
[10:16:53    INFO]  - will validate that the bias-correction actually improved the result ...
[10:16:53    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:16:53    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
[10:16:58    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_7/plots/
[10:17:07        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_7/plots output/SPEC_advanced4/regres/train/ANNZ_7/plots_biasCor_before
[10:17:07    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:17:07    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
[10:17:10    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_7/plots/
[10:17:18        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_7/plots output/SPEC_advanced4/regres/train/ANNZ_7/plots_biasCor_after
[10:17:18    INFO]  - Got original [KS-test,N_poiss]: [0.085879 , 7.56037] , after the bias-correction: [0.0565503 , 6.15965] --> will KEEP the correction !

(10:17 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(10:17 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+8:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=73836:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(10:17 INFO) 
[10:17:22    INFO]  -----------------------------------------------------
[10:17:22    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[10:17:22    INFO]  -----------------------------------------------------------------------------------------------------------
[10:17:24    INFO]  - starting ANNZ::Init()  ... 
[10:17:25    INFO]  - Saving run information in ./output/SPEC_advanced4/regres/train/ANNZ_8/saveOpt.txt ...
[10:17:41    INFO]  - starting ANNZ::Train_singleReg() ... 
[10:17:42    INFO] ----------------------------------------------------------------------------------------------------
[10:17:42    INFO]  - will book (ANNZ_8) method(ANN) with options: :HiddenLayers=N+1,N+8:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=73836:VarTransform=N,P
[10:17:42    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[10:17:42    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[10:17:42    INFO]      cuts (train):        ,
[10:17:42    INFO]      cuts (valid):       
[10:17:42    INFO]    - weights:            1
[10:17:42    INFO] ----------------------------------------------------------------------------------------------------
[10:17:42    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:15:19    INFO]  - Saving MLM information in ./output/SPEC_advanced4/regres/train/ANNZ_8/ANNZ_8_weights/saveTrainOpt_ANNZ_8.txt ...
[11:15:20    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[11:15:20    INFO]  - Will gen. input-parameter errors ...
[11:15:22    INFO]  - starting ANNZ::loadReaders() ... 
[11:15:23    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[11:16:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:16:04    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:16:04    INFO]  -----------------------------------------------------------------------------------------------------------
[11:16:04    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[11:16:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:16:14    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:16:14    INFO]  -----------------------------------------------------------------------------------------------------------
[11:16:14    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:16:15    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:16:15    INFO]  - will try to derive a bias correction ... 
[11:16:15    INFO]  - will validate that training produced an XML file for later ... 
[11:16:15    INFO]  - starting ANNZ::loadReaders() ... 
[11:16:15    INFO]  - will validate that the training was not a complete failure ... 
[11:16:15    INFO]  - training seems to have been successful! will move on ...
[11:16:15    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:16:19    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:16:20    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:16:20    INFO] ----------------------------------------------------------------------------------------------------
[11:16:20    INFO]  - will book (ANNZ_8_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[11:16:20    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:16:20    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[11:16:20    INFO]    - weights:            1
[11:16:20    INFO] ----------------------------------------------------------------------------------------------------
[11:16:21    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:16:25    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[11:16:25    INFO]  - Will gen. input-parameter errors ...
[11:16:27    INFO]  - starting ANNZ::loadReaders() ... 
[11:16:29    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[11:17:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:17:46    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[11:17:46    INFO]  -----------------------------------------------------------------------------------------------------------
[11:17:46    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[11:18:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:18:06    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[11:18:06    INFO]  -----------------------------------------------------------------------------------------------------------
[11:18:06    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:18:07    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:18:07    INFO]  - will validate that the bias-correction actually improved the result ...
[11:18:07    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:18:07    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
[11:18:11    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_8/plots/
[11:18:21        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_8/plots output/SPEC_advanced4/regres/train/ANNZ_8/plots_biasCor_before
[11:18:21    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:18:21    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
[11:18:24    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_8/plots/
[11:18:31        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_8/plots output/SPEC_advanced4/regres/train/ANNZ_8/plots_biasCor_after
[11:18:31    INFO]  - Got original [KS-test,N_poiss]: [0.0898331 , 7.51279] , after the bias-correction: [0.0589867 , 6.32442] --> will KEEP the correction !

(11:18 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:18 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+7:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=92360:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:18 INFO) 
[11:18:34    INFO]  -----------------------------------------------------
[11:18:34    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:18:34    INFO]  -----------------------------------------------------------------------------------------------------------
[11:18:35    INFO]  - starting ANNZ::Init()  ... 
[11:18:37    INFO]  - Saving run information in ./output/SPEC_advanced4/regres/train/ANNZ_9/saveOpt.txt ...
[11:18:52    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:18:53    INFO] ----------------------------------------------------------------------------------------------------
[11:18:53    INFO]  - will book (ANNZ_9) method(ANN) with options: :HiddenLayers=N+3,N+7:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=92360:VarTransform=N
[11:18:53    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:18:53    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[11:18:53    INFO]      cuts (train):        ,
[11:18:53    INFO]      cuts (valid):       
[11:18:53    INFO]    - weights:            1
[11:18:53    INFO] ----------------------------------------------------------------------------------------------------
[11:18:53    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:56:22    INFO]  - Saving MLM information in ./output/SPEC_advanced4/regres/train/ANNZ_9/ANNZ_9_weights/saveTrainOpt_ANNZ_9.txt ...
[12:56:25    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[12:56:25    INFO]  - Will gen. input-parameter errors ...
[12:56:27    INFO]  - starting ANNZ::loadReaders() ... 
[12:56:27    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[12:56:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:56:52    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:56:52    INFO]  -----------------------------------------------------------------------------------------------------------
[12:56:52    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[12:56:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:56:59    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:56:59    INFO]  -----------------------------------------------------------------------------------------------------------
[12:56:59    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:57:00    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:57:00    INFO]  - will try to derive a bias correction ... 
[12:57:00    INFO]  - will validate that training produced an XML file for later ... 
[12:57:00    INFO]  - starting ANNZ::loadReaders() ... 
[12:57:00    INFO]  - will validate that the training was not a complete failure ... 
[12:57:00    INFO]  - training seems to have been successful! will move on ...
[12:57:00    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:57:03    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:57:04    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:57:04    INFO] ----------------------------------------------------------------------------------------------------
[12:57:04    INFO]  - will book (ANNZ_9_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:57:04    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:57:04    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[12:57:04    INFO]    - weights:            1
[12:57:04    INFO] ----------------------------------------------------------------------------------------------------
[12:57:05    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:57:09    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[12:57:09    INFO]  - Will gen. input-parameter errors ...
[12:57:10    INFO]  - starting ANNZ::loadReaders() ... 
[12:57:11    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[12:58:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:58:09    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[12:58:09    INFO]  -----------------------------------------------------------------------------------------------------------
[12:58:09    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[12:58:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:58:23    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[12:58:23    INFO]  -----------------------------------------------------------------------------------------------------------
[12:58:23    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:58:24    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:58:24    INFO]  - will validate that the bias-correction actually improved the result ...
[12:58:24    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:58:24    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
[12:58:28    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_9/plots/
[12:58:36        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_9/plots output/SPEC_advanced4/regres/train/ANNZ_9/plots_biasCor_before
[12:58:36    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:58:36    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
[12:58:39    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_9/plots/
[12:58:48        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_9/plots output/SPEC_advanced4/regres/train/ANNZ_9/plots_biasCor_after
[12:58:48    INFO]  - Got original [KS-test,N_poiss]: [0.0511561 , 6.50778] , after the bias-correction: [0.0411867 , 5.88863] --> will KEEP the correction !

(12:58 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:58 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=360:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:58 INFO) 
[12:58:51    INFO]  -----------------------------------------------------
[12:58:51    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:58:51    INFO]  -----------------------------------------------------------------------------------------------------------
[12:58:53    INFO]  - starting ANNZ::Init()  ... 
[12:58:54    INFO]  - Saving run information in ./output/SPEC_advanced4/regres/train/ANNZ_10/saveOpt.txt ...
[12:59:12    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:59:13    INFO] ----------------------------------------------------------------------------------------------------
[12:59:13    INFO]  - will book (ANNZ_10) method(BDT) with options: :NTrees=360:BoostType=Bagging:VarTransform=N,P
[12:59:13    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:59:13    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[12:59:13    INFO]      cuts (train):        ,
[12:59:13    INFO]      cuts (valid):       
[12:59:13    INFO]    - weights:            1
[12:59:13    INFO] ----------------------------------------------------------------------------------------------------
[12:59:13    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:59:47    INFO]  - Saving MLM information in ./output/SPEC_advanced4/regres/train/ANNZ_10/ANNZ_10_weights/saveTrainOpt_ANNZ_10.txt ...
[12:59:51    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[12:59:51    INFO]  - Will gen. input-parameter errors ...
[12:59:54    INFO]  - starting ANNZ::loadReaders() ... 
[13:00:04    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[13:02:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:02:44    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:02:44    INFO]  -----------------------------------------------------------------------------------------------------------
[13:02:44    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[13:03:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:03:24    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:03:24    INFO]  -----------------------------------------------------------------------------------------------------------
[13:03:25    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:03:27    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:03:27    INFO]  - will try to derive a bias correction ... 
[13:03:27    INFO]  - will validate that training produced an XML file for later ... 
[13:03:27    INFO]  - starting ANNZ::loadReaders() ... 
[13:03:31    INFO]  - will validate that the training was not a complete failure ... 
[13:03:31    INFO]  - training seems to have been successful! will move on ...
[13:03:31    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:03:36    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:03:37    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:03:37    INFO] ----------------------------------------------------------------------------------------------------
[13:03:37    INFO]  - will book (ANNZ_10_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:03:37    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:03:37    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:03:37    INFO]    - weights:            1
[13:03:37    INFO] ----------------------------------------------------------------------------------------------------
[13:03:37    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:03:46    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[13:03:46    INFO]  - Will gen. input-parameter errors ...
[13:03:48    INFO]  - starting ANNZ::loadReaders() ... 
[13:03:57    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[13:06:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:06:07    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:06:07    INFO]  -----------------------------------------------------------------------------------------------------------
[13:06:07    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[13:06:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:06:44    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:06:44    INFO]  -----------------------------------------------------------------------------------------------------------
[13:06:44    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:06:46    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:06:46    INFO]  - will validate that the bias-correction actually improved the result ...
[13:06:47    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:06:47    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
[13:06:51    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_10/plots/
[13:06:59        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_10/plots output/SPEC_advanced4/regres/train/ANNZ_10/plots_biasCor_before
[13:06:59    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:06:59    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
[13:07:03    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_10/plots/
[13:07:11        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_10/plots output/SPEC_advanced4/regres/train/ANNZ_10/plots_biasCor_after
[13:07:11    INFO]  - Got original [KS-test,N_poiss]: [0.0945553 , 6.91068] , after the bias-correction: [0.0468295 , 5.67815] --> will KEEP the correction !

(13:07 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:07 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:07 INFO) 
[13:07:15    INFO]  -----------------------------------------------------
[13:07:15    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:07:15    INFO]  -----------------------------------------------------------------------------------------------------------
[13:07:17    INFO]  - starting ANNZ::Init()  ... 
[13:07:18    INFO]  - Saving run information in ./output/SPEC_advanced4/regres/train/ANNZ_11/saveOpt.txt ...
[13:07:37    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:07:37    INFO] ----------------------------------------------------------------------------------------------------
[13:07:37    INFO]  - will book (ANNZ_11) method(BDT) with options: :NTrees=420:BoostType=AdaBoost:VarTransform=N,P
[13:07:37    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:07:37    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:07:37    INFO]      cuts (train):        ,
[13:07:37    INFO]      cuts (valid):       
[13:07:37    INFO]    - weights:            1
[13:07:37    INFO] ----------------------------------------------------------------------------------------------------
[13:07:38    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:07:56    INFO]  - Saving MLM information in ./output/SPEC_advanced4/regres/train/ANNZ_11/ANNZ_11_weights/saveTrainOpt_ANNZ_11.txt ...
[13:07:58    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[13:07:58    INFO]  - Will gen. input-parameter errors ...
[13:08:00    INFO]  - starting ANNZ::loadReaders() ... 
[13:08:03    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[13:09:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:09:34    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:09:34    INFO]  -----------------------------------------------------------------------------------------------------------
[13:09:35    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[13:09:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:09:58    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:09:58    INFO]  -----------------------------------------------------------------------------------------------------------
[13:09:58    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:09:59    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:09:59    INFO]  - will try to derive a bias correction ... 
[13:09:59    INFO]  - will validate that training produced an XML file for later ... 
[13:09:59    INFO]  - starting ANNZ::loadReaders() ... 
[13:10:01    INFO]  - will validate that the training was not a complete failure ... 
[13:10:01    INFO]  - training seems to have been successful! will move on ...
[13:10:01    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:10:05    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:10:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:10:06    INFO] ----------------------------------------------------------------------------------------------------
[13:10:06    INFO]  - will book (ANNZ_11_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:10:06    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:10:06    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:10:06    INFO]    - weights:            1
[13:10:06    INFO] ----------------------------------------------------------------------------------------------------
[13:10:06    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:10:12    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[13:10:12    INFO]  - Will gen. input-parameter errors ...
[13:10:14    INFO]  - starting ANNZ::loadReaders() ... 
[13:10:20    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[13:11:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:11:53    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:11:53    INFO]  -----------------------------------------------------------------------------------------------------------
[13:11:53    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[13:12:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:12:19    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:12:19    INFO]  -----------------------------------------------------------------------------------------------------------
[13:12:19    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:12:21    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:12:21    INFO]  - will validate that the bias-correction actually improved the result ...
[13:12:21    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:12:21    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
[13:12:24    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_11/plots/
[13:12:32        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_11/plots output/SPEC_advanced4/regres/train/ANNZ_11/plots_biasCor_before
[13:12:32    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:12:32    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
[13:12:35    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_11/plots/
[13:12:44        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_11/plots output/SPEC_advanced4/regres/train/ANNZ_11/plots_biasCor_after
[13:12:44    INFO]  - Got original [KS-test,N_poiss]: [0.086713 , 6.36422] , after the bias-correction: [0.0454851 , 5.83069] --> will KEEP the correction !

(13:12 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:12 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:12 INFO) 
[13:12:48    INFO]  -----------------------------------------------------
[13:12:48    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:12:48    INFO]  -----------------------------------------------------------------------------------------------------------
[13:12:49    INFO]  - starting ANNZ::Init()  ... 
[13:12:51    INFO]  - Saving run information in ./output/SPEC_advanced4/regres/train/ANNZ_12/saveOpt.txt ...
[13:13:10    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:13:10    INFO] ----------------------------------------------------------------------------------------------------
[13:13:10    INFO]  - will book (ANNZ_12) method(BDT) with options: :NTrees=500:BoostType=AdaBoost:VarTransform=N
[13:13:10    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:13:10    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:13:10    INFO]      cuts (train):        ,
[13:13:10    INFO]      cuts (valid):       
[13:13:10    INFO]    - weights:            1
[13:13:10    INFO] ----------------------------------------------------------------------------------------------------
[13:13:10    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:13:37    INFO]  - Saving MLM information in ./output/SPEC_advanced4/regres/train/ANNZ_12/ANNZ_12_weights/saveTrainOpt_ANNZ_12.txt ...
[13:13:40    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[13:13:40    INFO]  - Will gen. input-parameter errors ...
[13:13:42    INFO]  - starting ANNZ::loadReaders() ... 
[13:13:51    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[13:15:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:15:20    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:15:20    INFO]  -----------------------------------------------------------------------------------------------------------
[13:15:20    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[13:15:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:15:45    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:15:45    INFO]  -----------------------------------------------------------------------------------------------------------
[13:15:45    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:15:47    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:15:47    INFO]  - will try to derive a bias correction ... 
[13:15:47    INFO]  - will validate that training produced an XML file for later ... 
[13:15:47    INFO]  - starting ANNZ::loadReaders() ... 
[13:15:49    INFO]  - will validate that the training was not a complete failure ... 
[13:15:50    INFO]  - training seems to have been successful! will move on ...
[13:15:50    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:15:54    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:15:55    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:15:55    INFO] ----------------------------------------------------------------------------------------------------
[13:15:55    INFO]  - will book (ANNZ_12_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:15:55    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:15:55    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:15:55    INFO]    - weights:            1
[13:15:55    INFO] ----------------------------------------------------------------------------------------------------
[13:15:55    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:16:02    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[13:16:02    INFO]  - Will gen. input-parameter errors ...
[13:16:04    INFO]  - starting ANNZ::loadReaders() ... 
[13:16:10    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[13:17:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:17:40    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:17:40    INFO]  -----------------------------------------------------------------------------------------------------------
[13:17:40    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[13:18:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:18:00    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:18:00    INFO]  -----------------------------------------------------------------------------------------------------------
[13:18:00    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:18:02    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:18:02    INFO]  - will validate that the bias-correction actually improved the result ...
[13:18:02    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:18:02    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
Warning in <Fit>: Fit data is empty 
[13:18:05    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_12/plots/
[13:18:12        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_12/plots output/SPEC_advanced4/regres/train/ANNZ_12/plots_biasCor_before
[13:18:12    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:18:12    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
Warning in <Fit>: Fit data is empty 
[13:18:15    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_12/plots/
[13:18:22        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_12/plots output/SPEC_advanced4/regres/train/ANNZ_12/plots_biasCor_after
[13:18:22    INFO]  - Got original [KS-test,N_poiss]: [0.0829039 , 6.33868] , after the bias-correction: [0.0490701 , 5.86221] --> will KEEP the correction !

(13:18 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:18 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+3:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=45320:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:18 INFO) 
[13:18:25    INFO]  -----------------------------------------------------
[13:18:25    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:18:25    INFO]  -----------------------------------------------------------------------------------------------------------
[13:18:26    INFO]  - starting ANNZ::Init()  ... 
[13:18:27    INFO]  - Saving run information in ./output/SPEC_advanced4/regres/train/ANNZ_13/saveOpt.txt ...
[13:18:44    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:18:44    INFO] ----------------------------------------------------------------------------------------------------
[13:18:44    INFO]  - will book (ANNZ_13) method(ANN) with options: :HiddenLayers=N,N+3:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=45320:VarTransform=N,P
[13:18:44    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:18:44    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:18:44    INFO]      cuts (train):        ,
[13:18:44    INFO]      cuts (valid):       
[13:18:44    INFO]    - weights:            1
[13:18:44    INFO] ----------------------------------------------------------------------------------------------------
[13:18:44    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:42:29    INFO]  - Saving MLM information in ./output/SPEC_advanced4/regres/train/ANNZ_13/ANNZ_13_weights/saveTrainOpt_ANNZ_13.txt ...
[13:42:34    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[13:42:34    INFO]  - Will gen. input-parameter errors ...
[13:42:35    INFO]  - starting ANNZ::loadReaders() ... 
[13:42:36    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[13:43:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:43:08    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:43:08    INFO]  -----------------------------------------------------------------------------------------------------------
[13:43:08    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[13:43:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:43:15    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:43:15    INFO]  -----------------------------------------------------------------------------------------------------------
[13:43:15    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:43:16    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:43:16    INFO]  - will try to derive a bias correction ... 
[13:43:16    INFO]  - will validate that training produced an XML file for later ... 
[13:43:16    INFO]  - starting ANNZ::loadReaders() ... 
[13:43:16    INFO]  - will validate that the training was not a complete failure ... 
[13:43:16    INFO]  - training seems to have been successful! will move on ...
[13:43:16    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:43:20    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:43:20    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:43:21    INFO] ----------------------------------------------------------------------------------------------------
[13:43:21    INFO]  - will book (ANNZ_13_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:43:21    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:43:21    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[13:43:21    INFO]    - weights:            1
[13:43:21    INFO] ----------------------------------------------------------------------------------------------------
[13:43:21    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:43:25    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[13:43:25    INFO]  - Will gen. input-parameter errors ...
[13:43:27    INFO]  - starting ANNZ::loadReaders() ... 
[13:43:28    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[13:44:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:44:27    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[13:44:27    INFO]  -----------------------------------------------------------------------------------------------------------
[13:44:27    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[13:44:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:44:43    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[13:44:43    INFO]  -----------------------------------------------------------------------------------------------------------
[13:44:43    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:44:44    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:44:44    INFO]  - will validate that the bias-correction actually improved the result ...
[13:44:44    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:44:44    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
[13:44:48    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_13/plots/
[13:44:55        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_13/plots output/SPEC_advanced4/regres/train/ANNZ_13/plots_biasCor_before
[13:44:55    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:44:55    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
[13:44:58    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_13/plots/
[13:45:07        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_13/plots output/SPEC_advanced4/regres/train/ANNZ_13/plots_biasCor_after
[13:45:07    INFO]  - Got original [KS-test,N_poiss]: [0.0710869 , 7.61866] , after the bias-correction: [0.0450945 , 6.11725] --> will KEEP the correction !

(13:45 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:45 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+7:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=74325:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:45 INFO) 
[13:45:10    INFO]  -----------------------------------------------------
[13:45:10    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:45:10    INFO]  -----------------------------------------------------------------------------------------------------------
[13:45:12    INFO]  - starting ANNZ::Init()  ... 
[13:45:14    INFO]  - Saving run information in ./output/SPEC_advanced4/regres/train/ANNZ_14/saveOpt.txt ...
[13:45:32    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:45:32    INFO] ----------------------------------------------------------------------------------------------------
[13:45:32    INFO]  - will book (ANNZ_14) method(ANN) with options: :HiddenLayers=N+4,N+7:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=74325:VarTransform=N
[13:45:32    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:45:32    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[13:45:32    INFO]      cuts (train):        ,
[13:45:32    INFO]      cuts (valid):       
[13:45:32    INFO]    - weights:            1
[13:45:32    INFO] ----------------------------------------------------------------------------------------------------
[13:45:32    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::DecomposeLUCrout>: matrix is singular
Error in <TDecompLU::InvertLU>: matrix is singular, 158 diag elements < tolerance of 2.2204e-16
(16:25 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(16:25 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(16:25 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(16:25 INFO) [40;37;1m - 22/02/19 16:25:52 - starting ANNZ[0m
(16:25 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:25 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=400:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:25 INFO) 
[16:25:52    INFO]  -----------------------------------------------------
[16:25:52    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:25:52    INFO]  -----------------------------------------------------------------------------------------------------------
[16:25:54    INFO]  - starting ANNZ::Init()  ... 
[16:25:54    INFO]  - found trained "ANNZ_0" (./output/SPEC_advanced4/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[16:25:54    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:25 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:25 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+3,N+2:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=35826:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:25 INFO) 
[16:25:54    INFO]  -----------------------------------------------------
[16:25:54    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:25:54    INFO]  -----------------------------------------------------------------------------------------------------------
[16:25:56    INFO]  - starting ANNZ::Init()  ... 
[16:25:57    INFO]  - found trained "ANNZ_1" (./output/SPEC_advanced4/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[16:25:57    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:25 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:25 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=730:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:25 INFO) 
[16:25:57    INFO]  -----------------------------------------------------
[16:25:57    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:25:57    INFO]  -----------------------------------------------------------------------------------------------------------
[16:25:58    INFO]  - starting ANNZ::Init()  ... 
[16:25:59    INFO]  - found trained "ANNZ_2" (./output/SPEC_advanced4/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[16:25:59    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:25 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:25 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=610:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:25 INFO) 
[16:25:59    INFO]  -----------------------------------------------------
[16:25:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:25:59    INFO]  -----------------------------------------------------------------------------------------------------------
[16:26:01    INFO]  - starting ANNZ::Init()  ... 
[16:26:01    INFO]  - found trained "ANNZ_3" (./output/SPEC_advanced4/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[16:26:01    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:26 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:26 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=22211:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:26 INFO) 
[16:26:02    INFO]  -----------------------------------------------------
[16:26:02    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:26:02    INFO]  -----------------------------------------------------------------------------------------------------------
[16:26:03    INFO]  - starting ANNZ::Init()  ... 
[16:26:04    INFO]  - found trained "ANNZ_4" (./output/SPEC_advanced4/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[16:26:04    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:26 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:26 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=350:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:26 INFO) 
[16:26:04    INFO]  -----------------------------------------------------
[16:26:04    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:26:04    INFO]  -----------------------------------------------------------------------------------------------------------
[16:26:06    INFO]  - starting ANNZ::Init()  ... 
[16:26:06    INFO]  - found trained "ANNZ_5" (./output/SPEC_advanced4/regres/train/ANNZ_5/ANNZ_5_weights/randomReg_ANNZ_5.weights.xml)
[16:26:06    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:26 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:26 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+9:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=53748:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:26 INFO) 
[16:26:06    INFO]  -----------------------------------------------------
[16:26:06    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:26:06    INFO]  -----------------------------------------------------------------------------------------------------------
[16:26:08    INFO]  - starting ANNZ::Init()  ... 
[16:26:09    INFO]  - found trained "ANNZ_6" (./output/SPEC_advanced4/regres/train/ANNZ_6/ANNZ_6_weights/randomReg_ANNZ_6.weights.xml)
[16:26:09    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:26 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:26 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+8:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=4619:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:26 INFO) 
[16:26:09    INFO]  -----------------------------------------------------
[16:26:09    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:26:09    INFO]  -----------------------------------------------------------------------------------------------------------
[16:26:11    INFO]  - starting ANNZ::Init()  ... 
[16:26:11    INFO]  - found trained "ANNZ_7" (./output/SPEC_advanced4/regres/train/ANNZ_7/ANNZ_7_weights/randomReg_ANNZ_7.weights.xml)
[16:26:11    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:26 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:26 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=790:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:26 INFO) 
[16:26:11    INFO]  -----------------------------------------------------
[16:26:11    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:26:11    INFO]  -----------------------------------------------------------------------------------------------------------
[16:26:12    INFO]  - starting ANNZ::Init()  ... 
[16:26:12    INFO]  - found trained "ANNZ_8" (./output/SPEC_advanced4/regres/train/ANNZ_8/ANNZ_8_weights/randomReg_ANNZ_8.weights.xml)
[16:26:12    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:26 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:26 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:26 INFO) 
[16:26:13    INFO]  -----------------------------------------------------
[16:26:13    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:26:13    INFO]  -----------------------------------------------------------------------------------------------------------
[16:26:14    INFO]  - starting ANNZ::Init()  ... 
[16:26:14    INFO]  - found trained "ANNZ_9" (./output/SPEC_advanced4/regres/train/ANNZ_9/ANNZ_9_weights/randomReg_ANNZ_9.weights.xml)
[16:26:14    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:26 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:26 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=360:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:26 INFO) 
[16:26:15    INFO]  -----------------------------------------------------
[16:26:15    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:26:15    INFO]  -----------------------------------------------------------------------------------------------------------
[16:26:16    INFO]  - starting ANNZ::Init()  ... 
[16:26:17    INFO]  - found trained "ANNZ_10" (./output/SPEC_advanced4/regres/train/ANNZ_10/ANNZ_10_weights/randomReg_ANNZ_10.weights.xml)
[16:26:17    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:26 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:26 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=320:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:26 INFO) 
[16:26:17    INFO]  -----------------------------------------------------
[16:26:17    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:26:17    INFO]  -----------------------------------------------------------------------------------------------------------
[16:26:19    INFO]  - starting ANNZ::Init()  ... 
[16:26:19    INFO]  - found trained "ANNZ_11" (./output/SPEC_advanced4/regres/train/ANNZ_11/ANNZ_11_weights/randomReg_ANNZ_11.weights.xml)
[16:26:19    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:26 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:26 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=260:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:26 INFO) 
[16:26:19    INFO]  -----------------------------------------------------
[16:26:19    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:26:19    INFO]  -----------------------------------------------------------------------------------------------------------
[16:26:21    INFO]  - starting ANNZ::Init()  ... 
[16:26:21    INFO]  - found trained "ANNZ_12" (./output/SPEC_advanced4/regres/train/ANNZ_12/ANNZ_12_weights/randomReg_ANNZ_12.weights.xml)
[16:26:21    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:26 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:26 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+7:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=76088:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:26 INFO) 
[16:26:22    INFO]  -----------------------------------------------------
[16:26:22    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:26:22    INFO]  -----------------------------------------------------------------------------------------------------------
[16:26:23    INFO]  - starting ANNZ::Init()  ... 
[16:26:23    INFO]  - found trained "ANNZ_13" (./output/SPEC_advanced4/regres/train/ANNZ_13/ANNZ_13_weights/randomReg_ANNZ_13.weights.xml)
[16:26:23    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(16:26 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:26 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=350:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:26 INFO) 
[16:26:24    INFO]  -----------------------------------------------------
[16:26:24    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:26:24    INFO]  -----------------------------------------------------------------------------------------------------------
[16:26:25    INFO]  - starting ANNZ::Init()  ... 
[16:26:27    INFO]  - Saving run information in ./output/SPEC_advanced4/regres/train/ANNZ_14/saveOpt.txt ...
[16:26:48    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:26:49    INFO] ----------------------------------------------------------------------------------------------------
[16:26:49    INFO]  - will book (ANNZ_14) method(BDT) with options: :NTrees=350:BoostType=Bagging:VarTransform=N
[16:26:49    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:26:49    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[16:26:49    INFO]      cuts (train):        ,
[16:26:49    INFO]      cuts (valid):       
[16:26:49    INFO]    - weights:            1
[16:26:49    INFO] ----------------------------------------------------------------------------------------------------
[16:26:49    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:27:22    INFO]  - Saving MLM information in ./output/SPEC_advanced4/regres/train/ANNZ_14/ANNZ_14_weights/saveTrainOpt_ANNZ_14.txt ...
[16:27:27    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[16:27:27    INFO]  - Will gen. input-parameter errors ...
[16:27:29    INFO]  - starting ANNZ::loadReaders() ... 
[16:27:36    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[16:29:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:29:21    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:29:21    INFO]  -----------------------------------------------------------------------------------------------------------
[16:29:21    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[16:29:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:29:48    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:29:48    INFO]  -----------------------------------------------------------------------------------------------------------
[16:29:48    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:29:50    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:29:50    INFO]  - will try to derive a bias correction ... 
[16:29:50    INFO]  - will validate that training produced an XML file for later ... 
[16:29:50    INFO]  - starting ANNZ::loadReaders() ... 
[16:29:55    INFO]  - will validate that the training was not a complete failure ... 
[16:29:55    INFO]  - training seems to have been successful! will move on ...
[16:29:55    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:30:00    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:30:01    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:30:01    INFO] ----------------------------------------------------------------------------------------------------
[16:30:01    INFO]  - will book (ANNZ_14_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:30:01    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:30:01    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[16:30:01    INFO]    - weights:            1
[16:30:01    INFO] ----------------------------------------------------------------------------------------------------
[16:30:01    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:30:09    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[16:30:09    INFO]  - Will gen. input-parameter errors ...
[16:30:12    INFO]  - starting ANNZ::loadReaders() ... 
[16:30:20    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[16:31:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:31:52    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:31:52    INFO]  -----------------------------------------------------------------------------------------------------------
[16:31:52    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[16:32:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:32:16    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:32:16    INFO]  -----------------------------------------------------------------------------------------------------------
[16:32:17    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:32:19    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:32:19    INFO]  - will validate that the bias-correction actually improved the result ...
[16:32:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:32:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
[16:32:22    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_14/plots/
[16:32:31        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_14/plots output/SPEC_advanced4/regres/train/ANNZ_14/plots_biasCor_before
[16:32:31    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:32:31    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
[16:32:34    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_14/plots/
[16:32:42        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_14/plots output/SPEC_advanced4/regres/train/ANNZ_14/plots_biasCor_after
[16:32:42    INFO]  - Got original [KS-test,N_poiss]: [0.0812234 , 6.8243] , after the bias-correction: [0.0443648 , 5.52688] --> will KEEP the correction !

(16:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=300:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:32 INFO) 
[16:32:46    INFO]  -----------------------------------------------------
[16:32:46    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:32:46    INFO]  -----------------------------------------------------------------------------------------------------------
[16:32:48    INFO]  - starting ANNZ::Init()  ... 
[16:32:50    INFO]  - Saving run information in ./output/SPEC_advanced4/regres/train/ANNZ_15/saveOpt.txt ...
[16:33:10    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:33:10    INFO] ----------------------------------------------------------------------------------------------------
[16:33:10    INFO]  - will book (ANNZ_15) method(BDT) with options: :NTrees=300:BoostType=AdaBoostR2:VarTransform=N
[16:33:10    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:33:10    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[16:33:10    INFO]      cuts (train):        ,
[16:33:10    INFO]      cuts (valid):       
[16:33:10    INFO]    - weights:            1
[16:33:10    INFO] ----------------------------------------------------------------------------------------------------
[16:33:11    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:33:33    INFO]  - Saving MLM information in ./output/SPEC_advanced4/regres/train/ANNZ_15/ANNZ_15_weights/saveTrainOpt_ANNZ_15.txt ...
[16:33:36    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[16:33:36    INFO]  - Will gen. input-parameter errors ...
[16:33:38    INFO]  - starting ANNZ::loadReaders() ... 
[16:33:45    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[16:37:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:37:24    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:37:24    INFO]  -----------------------------------------------------------------------------------------------------------
[16:37:24    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[16:38:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:38:15    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:38:15    INFO]  -----------------------------------------------------------------------------------------------------------
[16:38:15    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:38:17    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:38:17    INFO]  - will try to derive a bias correction ... 
[16:38:17    INFO]  - will validate that training produced an XML file for later ... 
[16:38:17    INFO]  - starting ANNZ::loadReaders() ... 
[16:38:19    INFO]  - will validate that the training was not a complete failure ... 
[16:38:19    INFO]  - training seems to have been successful! will move on ...
[16:38:19    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:38:23    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:38:24    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:38:25    INFO] ----------------------------------------------------------------------------------------------------
[16:38:25    INFO]  - will book (ANNZ_15_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:38:25    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:38:25    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[16:38:25    INFO]    - weights:            1
[16:38:25    INFO] ----------------------------------------------------------------------------------------------------
[16:38:25    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:38:31    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[16:38:31    INFO]  - Will gen. input-parameter errors ...
[16:38:33    INFO]  - starting ANNZ::loadReaders() ... 
[16:38:42    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[16:42:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:42:23    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:42:23    INFO]  -----------------------------------------------------------------------------------------------------------
[16:42:23    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[16:43:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:43:21    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:43:21    INFO]  -----------------------------------------------------------------------------------------------------------
[16:43:22    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:43:23    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:43:23    INFO]  - will validate that the bias-correction actually improved the result ...
[16:43:23    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:43:23    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
Warning in <Fit>: Fit data is empty 
[16:43:27    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_15/plots/
[16:43:34        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_15/plots output/SPEC_advanced4/regres/train/ANNZ_15/plots_biasCor_before
[16:43:34    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:43:34    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
[16:43:37    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_15/plots/
[16:43:45        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_15/plots output/SPEC_advanced4/regres/train/ANNZ_15/plots_biasCor_after
[16:43:45    INFO]  - Got original [KS-test,N_poiss]: [0.0654268 , 6.94903] , after the bias-correction: [0.0359624 , 5.72545] --> will KEEP the correction !

(16:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+8:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=45411:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:43 INFO) 
[16:43:49    INFO]  -----------------------------------------------------
[16:43:49    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:43:49    INFO]  -----------------------------------------------------------------------------------------------------------
[16:43:51    INFO]  - starting ANNZ::Init()  ... 
[16:43:52    INFO]  - Saving run information in ./output/SPEC_advanced4/regres/train/ANNZ_16/saveOpt.txt ...
[16:44:10    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:44:11    INFO] ----------------------------------------------------------------------------------------------------
[16:44:11    INFO]  - will book (ANNZ_16) method(ANN) with options: :HiddenLayers=N+1,N+8:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=45411:VarTransform=N
[16:44:11    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:44:11    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[16:44:11    INFO]      cuts (train):        ,
[16:44:11    INFO]      cuts (valid):       
[16:44:11    INFO]    - weights:            1
[16:44:11    INFO] ----------------------------------------------------------------------------------------------------
[16:44:11    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:54:45    INFO]  - Saving MLM information in ./output/SPEC_advanced4/regres/train/ANNZ_16/ANNZ_16_weights/saveTrainOpt_ANNZ_16.txt ...
[16:54:46    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[16:54:46    INFO]  - Will gen. input-parameter errors ...
[16:54:48    INFO]  - starting ANNZ::loadReaders() ... 
[16:54:48    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[16:55:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:55:12    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:55:12    INFO]  -----------------------------------------------------------------------------------------------------------
[16:55:12    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[16:55:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:55:18    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:55:18    INFO]  -----------------------------------------------------------------------------------------------------------
[16:55:18    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:55:19    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:55:19    INFO]  - will try to derive a bias correction ... 
[16:55:19    INFO]  - will validate that training produced an XML file for later ... 
[16:55:19    INFO]  - starting ANNZ::loadReaders() ... 
[16:55:19    INFO]  - will validate that the training was not a complete failure ... 
[16:55:19    INFO]  - training seems to have been successful! will move on ...
[16:55:19    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:55:22    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:55:23    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:55:23    INFO] ----------------------------------------------------------------------------------------------------
[16:55:23    INFO]  - will book (ANNZ_16_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:55:23    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:55:23    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[16:55:23    INFO]    - weights:            1
[16:55:23    INFO] ----------------------------------------------------------------------------------------------------
[16:55:24    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:55:27    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[16:55:27    INFO]  - Will gen. input-parameter errors ...
[16:55:29    INFO]  - starting ANNZ::loadReaders() ... 
[16:55:30    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[16:56:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:56:23    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[16:56:23    INFO]  -----------------------------------------------------------------------------------------------------------
[16:56:23    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[16:56:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:56:37    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[16:56:37    INFO]  -----------------------------------------------------------------------------------------------------------
[16:56:37    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:56:38    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:56:38    INFO]  - will validate that the bias-correction actually improved the result ...
[16:56:38    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:56:38    INFO]  - Will use (1) MLMs from the input chain: ANNZ_16,
[16:56:41    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_16/plots/
[16:56:49        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_16/plots output/SPEC_advanced4/regres/train/ANNZ_16/plots_biasCor_before
[16:56:49    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:56:49    INFO]  - Will use (1) MLMs from the input chain: ANNZ_16,
[16:56:52    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_16/plots/
[16:56:59        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_16/plots output/SPEC_advanced4/regres/train/ANNZ_16/plots_biasCor_after
[16:56:59    INFO]  - Got original [KS-test,N_poiss]: [0.139953 , 7.81911] , after the bias-correction: [0.0781294 , 6.67638] --> will KEEP the correction !

(16:57 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:57 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+6,N+3:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=55266:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:57 INFO) 
[16:57:02    INFO]  -----------------------------------------------------
[16:57:02    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:57:02    INFO]  -----------------------------------------------------------------------------------------------------------
[16:57:03    INFO]  - starting ANNZ::Init()  ... 
[16:57:05    INFO]  - Saving run information in ./output/SPEC_advanced4/regres/train/ANNZ_17/saveOpt.txt ...
[16:57:22    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:57:22    INFO] ----------------------------------------------------------------------------------------------------
[16:57:22    INFO]  - will book (ANNZ_17) method(ANN) with options: :HiddenLayers=N,N+6,N+3:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=55266:VarTransform=N
[16:57:22    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:57:22    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[16:57:22    INFO]      cuts (train):        ,
[16:57:22    INFO]      cuts (valid):       
[16:57:22    INFO]    - weights:            1
[16:57:22    INFO] ----------------------------------------------------------------------------------------------------
[16:57:22    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:19:16    INFO]  - Saving MLM information in ./output/SPEC_advanced4/regres/train/ANNZ_17/ANNZ_17_weights/saveTrainOpt_ANNZ_17.txt ...
[17:19:21    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[17:19:21    INFO]  - Will gen. input-parameter errors ...
[17:19:23    INFO]  - starting ANNZ::loadReaders() ... 
[17:19:23    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[17:19:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:19:49    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:19:49    INFO]  -----------------------------------------------------------------------------------------------------------
[17:19:49    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[17:19:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:19:56    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:19:56    INFO]  -----------------------------------------------------------------------------------------------------------
[17:19:56    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:19:57    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:19:57    INFO]  - will try to derive a bias correction ... 
[17:19:57    INFO]  - will validate that training produced an XML file for later ... 
[17:19:57    INFO]  - starting ANNZ::loadReaders() ... 
[17:19:57    INFO]  - will validate that the training was not a complete failure ... 
[17:19:57    INFO]  - training seems to have been successful! will move on ...
[17:19:57    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[17:20:00    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:20:01    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:20:01    INFO] ----------------------------------------------------------------------------------------------------
[17:20:01    INFO]  - will book (ANNZ_17_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[17:20:01    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:20:01    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[17:20:01    INFO]    - weights:            1
[17:20:01    INFO] ----------------------------------------------------------------------------------------------------
[17:20:01    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:20:06    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[17:20:06    INFO]  - Will gen. input-parameter errors ...
[17:20:08    INFO]  - starting ANNZ::loadReaders() ... 
[17:20:09    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[17:21:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:21:11    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:21:11    INFO]  -----------------------------------------------------------------------------------------------------------
[17:21:11    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[17:21:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:21:27    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:21:27    INFO]  -----------------------------------------------------------------------------------------------------------
[17:21:27    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:21:28    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:21:28    INFO]  - will validate that the bias-correction actually improved the result ...
[17:21:28    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:21:28    INFO]  - Will use (1) MLMs from the input chain: ANNZ_17,
[17:21:32    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_17/plots/
[17:21:40        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_17/plots output/SPEC_advanced4/regres/train/ANNZ_17/plots_biasCor_before
[17:21:40    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:21:40    INFO]  - Will use (1) MLMs from the input chain: ANNZ_17,
[17:21:44    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_17/plots/
[17:21:53        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_17/plots output/SPEC_advanced4/regres/train/ANNZ_17/plots_biasCor_after
[17:21:53    INFO]  - Got original [KS-test,N_poiss]: [0.0436846 , 6.32612] , after the bias-correction: [0.0411076 , 5.66071] --> will KEEP the correction !

(17:21 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(17:21 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m18[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=AdaBoostR2[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(17:21 INFO) 
[17:21:57    INFO]  -----------------------------------------------------
[17:21:57    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[17:21:57    INFO]  -----------------------------------------------------------------------------------------------------------
[17:21:59    INFO]  - starting ANNZ::Init()  ... 
[17:22:01    INFO]  - Saving run information in ./output/SPEC_advanced4/regres/train/ANNZ_18/saveOpt.txt ...
[17:22:21    INFO]  - starting ANNZ::Train_singleReg() ... 
[17:22:21    INFO] ----------------------------------------------------------------------------------------------------
[17:22:21    INFO]  - will book (ANNZ_18) method(BDT) with options: :NTrees=380:BoostType=AdaBoostR2:VarTransform=N
[17:22:21    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:22:21    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[17:22:21    INFO]      cuts (train):        ,
[17:22:21    INFO]      cuts (valid):       
[17:22:21    INFO]    - weights:            1
[17:22:21    INFO] ----------------------------------------------------------------------------------------------------
[17:22:22    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:22:57    INFO]  - Saving MLM information in ./output/SPEC_advanced4/regres/train/ANNZ_18/ANNZ_18_weights/saveTrainOpt_ANNZ_18.txt ...
[17:23:01    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[17:23:01    INFO]  - Will gen. input-parameter errors ...
[17:23:04    INFO]  - starting ANNZ::loadReaders() ... 
[17:23:18    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[17:29:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:29:48    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:29:48    INFO]  -----------------------------------------------------------------------------------------------------------
[17:29:48    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[17:31:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:31:35    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:31:35    INFO]  -----------------------------------------------------------------------------------------------------------
[17:31:38    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:31:40    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:31:40    INFO]  - will try to derive a bias correction ... 
[17:31:40    INFO]  - will validate that training produced an XML file for later ... 
[17:31:40    INFO]  - starting ANNZ::loadReaders() ... 
[17:31:43    INFO]  - will validate that the training was not a complete failure ... 
[17:31:43    INFO]  - training seems to have been successful! will move on ...
[17:31:43    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[17:31:49    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:31:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:31:50    INFO] ----------------------------------------------------------------------------------------------------
[17:31:50    INFO]  - will book (ANNZ_18_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[17:31:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:31:50    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[17:31:50    INFO]    - weights:            1
[17:31:50    INFO] ----------------------------------------------------------------------------------------------------
[17:31:50    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:31:58    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[17:31:58    INFO]  - Will gen. input-parameter errors ...
[17:32:01    INFO]  - starting ANNZ::loadReaders() ... 
[17:32:15    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[17:38:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:38:30    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:38:30    INFO]  -----------------------------------------------------------------------------------------------------------
[17:38:30    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[17:40:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:40:03    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:40:03    INFO]  -----------------------------------------------------------------------------------------------------------
[17:40:06    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:40:08    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:40:08    INFO]  - will validate that the bias-correction actually improved the result ...
[17:40:08    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:40:08    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
[17:40:13    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_18/plots/
[17:40:21        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_18/plots output/SPEC_advanced4/regres/train/ANNZ_18/plots_biasCor_before
[17:40:21    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:40:21    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
[17:40:24    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_18/plots/
[17:40:35        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_18/plots output/SPEC_advanced4/regres/train/ANNZ_18/plots_biasCor_after
[17:40:35    INFO]  - Got original [KS-test,N_poiss]: [0.0662111 , 7.00232] , after the bias-correction: [0.0368586 , 5.74795] --> will KEEP the correction !

(17:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(17:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m19[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=350:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(17:40 INFO) 
[17:40:40    INFO]  -----------------------------------------------------
[17:40:40    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[17:40:40    INFO]  -----------------------------------------------------------------------------------------------------------
[17:40:41    INFO]  - starting ANNZ::Init()  ... 
[17:40:43    INFO]  - Saving run information in ./output/SPEC_advanced4/regres/train/ANNZ_19/saveOpt.txt ...
[17:41:04    INFO]  - starting ANNZ::Train_singleReg() ... 
[17:41:04    INFO] ----------------------------------------------------------------------------------------------------
[17:41:04    INFO]  - will book (ANNZ_19) method(BDT) with options: :NTrees=350:BoostType=AdaBoostR2:VarTransform=N
[17:41:04    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:41:04    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[17:41:04    INFO]      cuts (train):        ,
[17:41:04    INFO]      cuts (valid):       
[17:41:04    INFO]    - weights:            1
[17:41:04    INFO] ----------------------------------------------------------------------------------------------------
[17:41:05    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:41:36    INFO]  - Saving MLM information in ./output/SPEC_advanced4/regres/train/ANNZ_19/ANNZ_19_weights/saveTrainOpt_ANNZ_19.txt ...
[17:41:39    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[17:41:39    INFO]  - Will gen. input-parameter errors ...
[17:41:41    INFO]  - starting ANNZ::loadReaders() ... 
[17:41:47    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[17:47:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:47:13    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:47:13    INFO]  -----------------------------------------------------------------------------------------------------------
[17:47:13    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[17:48:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:48:32    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:48:32    INFO]  -----------------------------------------------------------------------------------------------------------
[17:48:34    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:48:36    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:48:36    INFO]  - will try to derive a bias correction ... 
[17:48:36    INFO]  - will validate that training produced an XML file for later ... 
[17:48:36    INFO]  - starting ANNZ::loadReaders() ... 
[17:48:39    INFO]  - will validate that the training was not a complete failure ... 
[17:48:39    INFO]  - training seems to have been successful! will move on ...
[17:48:39    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[17:48:44    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:48:45    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:48:45    INFO] ----------------------------------------------------------------------------------------------------
[17:48:45    INFO]  - will book (ANNZ_19_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[17:48:45    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:48:45    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[17:48:45    INFO]    - weights:            1
[17:48:45    INFO] ----------------------------------------------------------------------------------------------------
[17:48:46    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:48:54    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[17:48:54    INFO]  - Will gen. input-parameter errors ...
[17:48:57    INFO]  - starting ANNZ::loadReaders() ... 
[17:49:05    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[17:54:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:54:17    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[17:54:17    INFO]  -----------------------------------------------------------------------------------------------------------
[17:54:17    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[17:55:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:55:37    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[17:55:37    INFO]  -----------------------------------------------------------------------------------------------------------
[17:55:39    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:55:41    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:55:41    INFO]  - will validate that the bias-correction actually improved the result ...
[17:55:41    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:55:41    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
[17:55:46    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_19/plots/
[17:55:55        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_19/plots output/SPEC_advanced4/regres/train/ANNZ_19/plots_biasCor_before
[17:55:55    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:55:55    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
Warning in <Fit>: Fit data is empty 
[17:55:59    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_19/plots/
[17:56:08        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_19/plots output/SPEC_advanced4/regres/train/ANNZ_19/plots_biasCor_after
[17:56:08    INFO]  - Got original [KS-test,N_poiss]: [0.0664351 , 6.98917] , after the bias-correction: [0.0367466 , 5.62179] --> will KEEP the correction !

(17:56 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(17:56 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m20[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+9:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=35810:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(17:56 INFO) 
[17:56:12    INFO]  -----------------------------------------------------
[17:56:12    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[17:56:12    INFO]  -----------------------------------------------------------------------------------------------------------
[17:56:14    INFO]  - starting ANNZ::Init()  ... 
[17:56:16    INFO]  - Saving run information in ./output/SPEC_advanced4/regres/train/ANNZ_20/saveOpt.txt ...
[17:56:37    INFO]  - starting ANNZ::Train_singleReg() ... 
[17:56:37    INFO] ----------------------------------------------------------------------------------------------------
[17:56:37    INFO]  - will book (ANNZ_20) method(ANN) with options: :HiddenLayers=N+2,N+9:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=35810:VarTransform=N,P
[17:56:37    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:56:37    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[17:56:37    INFO]      cuts (train):        ,
[17:56:37    INFO]      cuts (valid):       
[17:56:37    INFO]    - weights:            1
[17:56:37    INFO] ----------------------------------------------------------------------------------------------------
[17:56:37    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
Error in <TDecompLU::InvertLU>: matrix is singular, 42 diag elements < tolerance of 2.2204e-16
(20:06 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(20:06 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(20:06 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(20:06 INFO) [40;37;1m - 22/02/19 20:06:10 - starting ANNZ[0m
(20:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1030:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:06 INFO) 
[20:06:10    INFO]  -----------------------------------------------------
[20:06:10    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:06:10    INFO]  -----------------------------------------------------------------------------------------------------------
[20:06:12    INFO]  - starting ANNZ::Init()  ... 
[20:06:12    INFO]  - found trained "ANNZ_0" (./output/SPEC_advanced4/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[20:06:12    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=700:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:06 INFO) 
[20:06:12    INFO]  -----------------------------------------------------
[20:06:12    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:06:12    INFO]  -----------------------------------------------------------------------------------------------------------
[20:06:14    INFO]  - starting ANNZ::Init()  ... 
[20:06:15    INFO]  - found trained "ANNZ_1" (./output/SPEC_advanced4/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[20:06:15    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:06 INFO) 
[20:06:15    INFO]  -----------------------------------------------------
[20:06:15    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:06:15    INFO]  -----------------------------------------------------------------------------------------------------------
[20:06:16    INFO]  - starting ANNZ::Init()  ... 
[20:06:17    INFO]  - found trained "ANNZ_2" (./output/SPEC_advanced4/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[20:06:17    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=470:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:06 INFO) 
[20:06:17    INFO]  -----------------------------------------------------
[20:06:17    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:06:17    INFO]  -----------------------------------------------------------------------------------------------------------
[20:06:19    INFO]  - starting ANNZ::Init()  ... 
[20:06:19    INFO]  - found trained "ANNZ_3" (./output/SPEC_advanced4/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[20:06:19    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:06 INFO) 
[20:06:19    INFO]  -----------------------------------------------------
[20:06:19    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:06:19    INFO]  -----------------------------------------------------------------------------------------------------------
[20:06:21    INFO]  - starting ANNZ::Init()  ... 
[20:06:21    INFO]  - found trained "ANNZ_4" (./output/SPEC_advanced4/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[20:06:21    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+1:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=83295:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:06 INFO) 
[20:06:22    INFO]  -----------------------------------------------------
[20:06:22    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:06:22    INFO]  -----------------------------------------------------------------------------------------------------------
[20:06:23    INFO]  - starting ANNZ::Init()  ... 
[20:06:23    INFO]  - found trained "ANNZ_5" (./output/SPEC_advanced4/regres/train/ANNZ_5/ANNZ_5_weights/randomReg_ANNZ_5.weights.xml)
[20:06:23    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+2:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=29874:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:06 INFO) 
[20:06:24    INFO]  -----------------------------------------------------
[20:06:24    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:06:24    INFO]  -----------------------------------------------------------------------------------------------------------
[20:06:25    INFO]  - starting ANNZ::Init()  ... 
[20:06:25    INFO]  - found trained "ANNZ_6" (./output/SPEC_advanced4/regres/train/ANNZ_6/ANNZ_6_weights/randomReg_ANNZ_6.weights.xml)
[20:06:25    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+9:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=64455:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:06 INFO) 
[20:06:25    INFO]  -----------------------------------------------------
[20:06:25    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:06:25    INFO]  -----------------------------------------------------------------------------------------------------------
[20:06:27    INFO]  - starting ANNZ::Init()  ... 
[20:06:27    INFO]  - found trained "ANNZ_7" (./output/SPEC_advanced4/regres/train/ANNZ_7/ANNZ_7_weights/randomReg_ANNZ_7.weights.xml)
[20:06:27    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:06 INFO) 
[20:06:27    INFO]  -----------------------------------------------------
[20:06:27    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:06:27    INFO]  -----------------------------------------------------------------------------------------------------------
[20:06:28    INFO]  - starting ANNZ::Init()  ... 
[20:06:28    INFO]  - found trained "ANNZ_8" (./output/SPEC_advanced4/regres/train/ANNZ_8/ANNZ_8_weights/randomReg_ANNZ_8.weights.xml)
[20:06:28    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+9:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=50:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=3406:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:06 INFO) 
[20:06:28    INFO]  -----------------------------------------------------
[20:06:28    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:06:28    INFO]  -----------------------------------------------------------------------------------------------------------
[20:06:30    INFO]  - starting ANNZ::Init()  ... 
[20:06:30    INFO]  - found trained "ANNZ_9" (./output/SPEC_advanced4/regres/train/ANNZ_9/ANNZ_9_weights/randomReg_ANNZ_9.weights.xml)
[20:06:30    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:06 INFO) 
[20:06:30    INFO]  -----------------------------------------------------
[20:06:30    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:06:30    INFO]  -----------------------------------------------------------------------------------------------------------
[20:06:31    INFO]  - starting ANNZ::Init()  ... 
[20:06:32    INFO]  - found trained "ANNZ_10" (./output/SPEC_advanced4/regres/train/ANNZ_10/ANNZ_10_weights/randomReg_ANNZ_10.weights.xml)
[20:06:32    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=330:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:06 INFO) 
[20:06:32    INFO]  -----------------------------------------------------
[20:06:32    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:06:32    INFO]  -----------------------------------------------------------------------------------------------------------
[20:06:33    INFO]  - starting ANNZ::Init()  ... 
[20:06:34    INFO]  - found trained "ANNZ_11" (./output/SPEC_advanced4/regres/train/ANNZ_11/ANNZ_11_weights/randomReg_ANNZ_11.weights.xml)
[20:06:34    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+5:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=97019:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:06 INFO) 
[20:06:34    INFO]  -----------------------------------------------------
[20:06:34    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:06:34    INFO]  -----------------------------------------------------------------------------------------------------------
[20:06:35    INFO]  - starting ANNZ::Init()  ... 
[20:06:36    INFO]  - found trained "ANNZ_12" (./output/SPEC_advanced4/regres/train/ANNZ_12/ANNZ_12_weights/randomReg_ANNZ_12.weights.xml)
[20:06:36    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+5:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=50531:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:06 INFO) 
[20:06:36    INFO]  -----------------------------------------------------
[20:06:36    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:06:36    INFO]  -----------------------------------------------------------------------------------------------------------
[20:06:37    INFO]  - starting ANNZ::Init()  ... 
[20:06:37    INFO]  - found trained "ANNZ_13" (./output/SPEC_advanced4/regres/train/ANNZ_13/ANNZ_13_weights/randomReg_ANNZ_13.weights.xml)
[20:06:37    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+9:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=11831:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:06 INFO) 
[20:06:37    INFO]  -----------------------------------------------------
[20:06:37    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:06:37    INFO]  -----------------------------------------------------------------------------------------------------------
[20:06:39    INFO]  - starting ANNZ::Init()  ... 
[20:06:39    INFO]  - found trained "ANNZ_14" (./output/SPEC_advanced4/regres/train/ANNZ_14/ANNZ_14_weights/randomReg_ANNZ_14.weights.xml)
[20:06:39    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:06 INFO) 
[20:06:40    INFO]  -----------------------------------------------------
[20:06:40    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:06:40    INFO]  -----------------------------------------------------------------------------------------------------------
[20:06:41    INFO]  - starting ANNZ::Init()  ... 
[20:06:42    INFO]  - found trained "ANNZ_15" (./output/SPEC_advanced4/regres/train/ANNZ_15/ANNZ_15_weights/randomReg_ANNZ_15.weights.xml)
[20:06:42    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=530:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:06 INFO) 
[20:06:42    INFO]  -----------------------------------------------------
[20:06:42    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:06:42    INFO]  -----------------------------------------------------------------------------------------------------------
[20:06:43    INFO]  - starting ANNZ::Init()  ... 
[20:06:43    INFO]  - found trained "ANNZ_16" (./output/SPEC_advanced4/regres/train/ANNZ_16/ANNZ_16_weights/randomReg_ANNZ_16.weights.xml)
[20:06:43    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+2,N+1:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=2565:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:06 INFO) 
[20:06:44    INFO]  -----------------------------------------------------
[20:06:44    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:06:44    INFO]  -----------------------------------------------------------------------------------------------------------
[20:06:45    INFO]  - starting ANNZ::Init()  ... 
[20:06:45    INFO]  - found trained "ANNZ_17" (./output/SPEC_advanced4/regres/train/ANNZ_17/ANNZ_17_weights/randomReg_ANNZ_17.weights.xml)
[20:06:45    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m18[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:06 INFO) 
[20:06:45    INFO]  -----------------------------------------------------
[20:06:45    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:06:45    INFO]  -----------------------------------------------------------------------------------------------------------
[20:06:47    INFO]  - starting ANNZ::Init()  ... 
[20:06:47    INFO]  - found trained "ANNZ_18" (./output/SPEC_advanced4/regres/train/ANNZ_18/ANNZ_18_weights/randomReg_ANNZ_18.weights.xml)
[20:06:47    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m19[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:06 INFO) 
[20:06:47    INFO]  -----------------------------------------------------
[20:06:47    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:06:47    INFO]  -----------------------------------------------------------------------------------------------------------
[20:06:49    INFO]  - starting ANNZ::Init()  ... 
[20:06:49    INFO]  - found trained "ANNZ_19" (./output/SPEC_advanced4/regres/train/ANNZ_19/ANNZ_19_weights/randomReg_ANNZ_19.weights.xml)
[20:06:49    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(20:06 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:06 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m20[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:06 INFO) 
[20:06:50    INFO]  -----------------------------------------------------
[20:06:50    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:06:50    INFO]  -----------------------------------------------------------------------------------------------------------
[20:06:51    INFO]  - starting ANNZ::Init()  ... 
[20:06:53    INFO]  - Saving run information in ./output/SPEC_advanced4/regres/train/ANNZ_20/saveOpt.txt ...
[20:07:12    INFO]  - starting ANNZ::Train_singleReg() ... 
[20:07:12    INFO] ----------------------------------------------------------------------------------------------------
[20:07:12    INFO]  - will book (ANNZ_20) method(BDT) with options: :NTrees=370:BoostType=AdaBoost:VarTransform=N
[20:07:12    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:07:12    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[20:07:12    INFO]      cuts (train):        ,
[20:07:12    INFO]      cuts (valid):       
[20:07:12    INFO]    - weights:            1
[20:07:12    INFO] ----------------------------------------------------------------------------------------------------
[20:07:13    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:07:30    INFO]  - Saving MLM information in ./output/SPEC_advanced4/regres/train/ANNZ_20/ANNZ_20_weights/saveTrainOpt_ANNZ_20.txt ...
[20:07:33    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_20 ... 
[20:07:33    INFO]  - Will gen. input-parameter errors ...
[20:07:35    INFO]  - starting ANNZ::loadReaders() ... 
[20:07:41    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[20:08:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:08:50    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[20:08:50    INFO]  -----------------------------------------------------------------------------------------------------------
[20:08:50    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[20:09:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:09:07    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[20:09:07    INFO]  -----------------------------------------------------------------------------------------------------------
[20:09:07    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_20/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:09:08    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:09:08    INFO]  - will try to derive a bias correction ... 
[20:09:08    INFO]  - will validate that training produced an XML file for later ... 
[20:09:08    INFO]  - starting ANNZ::loadReaders() ... 
[20:09:10    INFO]  - will validate that the training was not a complete failure ... 
[20:09:10    INFO]  - training seems to have been successful! will move on ...
[20:09:10    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[20:09:13    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:09:14    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:09:15    INFO] ----------------------------------------------------------------------------------------------------
[20:09:15    INFO]  - will book (ANNZ_20_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[20:09:15    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:09:15    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[20:09:15    INFO]    - weights:            1
[20:09:15    INFO] ----------------------------------------------------------------------------------------------------
[20:09:15    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:09:21    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_20 ... 
[20:09:21    INFO]  - Will gen. input-parameter errors ...
[20:09:23    INFO]  - starting ANNZ::loadReaders() ... 
[20:09:29    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[20:10:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:10:45    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[20:10:45    INFO]  -----------------------------------------------------------------------------------------------------------
[20:10:45    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[20:11:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:11:03    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[20:11:03    INFO]  -----------------------------------------------------------------------------------------------------------
[20:11:04    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_20/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:11:05    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:11:05    INFO]  - will validate that the bias-correction actually improved the result ...
[20:11:05    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:11:05    INFO]  - Will use (1) MLMs from the input chain: ANNZ_20,
Warning in <Fit>: Fit data is empty 
[20:11:09    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_20/plots/
[20:11:16        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_20/plots output/SPEC_advanced4/regres/train/ANNZ_20/plots_biasCor_before
[20:11:16    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:11:16    INFO]  - Will use (1) MLMs from the input chain: ANNZ_20,
[20:11:20    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_20/plots/
[20:11:28        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_20/plots output/SPEC_advanced4/regres/train/ANNZ_20/plots_biasCor_after
[20:11:28    INFO]  - Got original [KS-test,N_poiss]: [0.0824558 , 6.31451] , after the bias-correction: [0.0480618 , 5.78664] --> will KEEP the correction !

(20:11 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:11 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m21[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=470:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:11 INFO) 
[20:11:32    INFO]  -----------------------------------------------------
[20:11:32    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:11:32    INFO]  -----------------------------------------------------------------------------------------------------------
[20:11:33    INFO]  - starting ANNZ::Init()  ... 
[20:11:35    INFO]  - Saving run information in ./output/SPEC_advanced4/regres/train/ANNZ_21/saveOpt.txt ...
[20:11:51    INFO]  - starting ANNZ::Train_singleReg() ... 
[20:11:51    INFO] ----------------------------------------------------------------------------------------------------
[20:11:51    INFO]  - will book (ANNZ_21) method(BDT) with options: :NTrees=470:BoostType=AdaBoostR2:VarTransform=N,P
[20:11:51    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:11:51    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[20:11:51    INFO]      cuts (train):        ,
[20:11:51    INFO]      cuts (valid):       
[20:11:51    INFO]    - weights:            1
[20:11:51    INFO] ----------------------------------------------------------------------------------------------------
[20:11:52    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:12:34    INFO]  - Saving MLM information in ./output/SPEC_advanced4/regres/train/ANNZ_21/ANNZ_21_weights/saveTrainOpt_ANNZ_21.txt ...
[20:12:38    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_21 ... 
[20:12:38    INFO]  - Will gen. input-parameter errors ...
[20:12:40    INFO]  - starting ANNZ::loadReaders() ... 
[20:12:51    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[20:23:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:23:14    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[20:23:14    INFO]  -----------------------------------------------------------------------------------------------------------
[20:23:14    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[20:26:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:26:07    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[20:26:07    INFO]  -----------------------------------------------------------------------------------------------------------
[20:26:09    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_21/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:26:10    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:26:10    INFO]  - will try to derive a bias correction ... 
[20:26:10    INFO]  - will validate that training produced an XML file for later ... 
[20:26:10    INFO]  - starting ANNZ::loadReaders() ... 
[20:26:14    INFO]  - will validate that the training was not a complete failure ... 
[20:26:14    INFO]  - training seems to have been successful! will move on ...
[20:26:14    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[20:26:19    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:26:20    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:26:20    INFO] ----------------------------------------------------------------------------------------------------
[20:26:20    INFO]  - will book (ANNZ_21_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[20:26:20    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:26:20    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[20:26:20    INFO]    - weights:            1
[20:26:20    INFO] ----------------------------------------------------------------------------------------------------
[20:26:21    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:26:30    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_21 ... 
[20:26:30    INFO]  - Will gen. input-parameter errors ...
[20:26:33    INFO]  - starting ANNZ::loadReaders() ... 
[20:26:47    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[20:35:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:35:54    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[20:35:54    INFO]  -----------------------------------------------------------------------------------------------------------
[20:35:54    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[20:38:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:38:15    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[20:38:15    INFO]  -----------------------------------------------------------------------------------------------------------
[20:38:17    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_21/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:38:18    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:38:18    INFO]  - will validate that the bias-correction actually improved the result ...
[20:38:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:38:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_21,
[20:38:22    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_21/plots/
[20:38:31        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_21/plots output/SPEC_advanced4/regres/train/ANNZ_21/plots_biasCor_before
[20:38:31    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:38:31    INFO]  - Will use (1) MLMs from the input chain: ANNZ_21,
[20:38:35    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_21/plots/
[20:38:42        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_21/plots output/SPEC_advanced4/regres/train/ANNZ_21/plots_biasCor_after
[20:38:42    INFO]  - Got original [KS-test,N_poiss]: [0.0761819 , 6.91338] , after the bias-correction: [0.0341699 , 5.73253] --> will KEEP the correction !

(20:38 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:38 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m22[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+8:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=30654:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:38 INFO) 
[20:38:45    INFO]  -----------------------------------------------------
[20:38:45    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:38:45    INFO]  -----------------------------------------------------------------------------------------------------------
[20:38:47    INFO]  - starting ANNZ::Init()  ... 
[20:38:48    INFO]  - Saving run information in ./output/SPEC_advanced4/regres/train/ANNZ_22/saveOpt.txt ...
[20:39:09    INFO]  - starting ANNZ::Train_singleReg() ... 
[20:39:09    INFO] ----------------------------------------------------------------------------------------------------
[20:39:09    INFO]  - will book (ANNZ_22) method(ANN) with options: :HiddenLayers=N+2,N+8:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=30654:VarTransform=N
[20:39:09    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:39:09    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[20:39:09    INFO]      cuts (train):        ,
[20:39:09    INFO]      cuts (valid):       
[20:39:09    INFO]    - weights:            1
[20:39:09    INFO] ----------------------------------------------------------------------------------------------------
[20:39:09    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:53:26    INFO]  - Saving MLM information in ./output/SPEC_advanced4/regres/train/ANNZ_22/ANNZ_22_weights/saveTrainOpt_ANNZ_22.txt ...
[22:53:30    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_22 ... 
[22:53:30    INFO]  - Will gen. input-parameter errors ...
[22:53:32    INFO]  - starting ANNZ::loadReaders() ... 
[22:53:32    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[22:53:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:53:53    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[22:53:53    INFO]  -----------------------------------------------------------------------------------------------------------
[22:53:53    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[22:53:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:53:58    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[22:53:58    INFO]  -----------------------------------------------------------------------------------------------------------
[22:53:59    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_22/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:53:59    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:53:59    INFO]  - will try to derive a bias correction ... 
[22:53:59    INFO]  - will validate that training produced an XML file for later ... 
[22:53:59    INFO]  - starting ANNZ::loadReaders() ... 
[22:53:59    INFO]  - will validate that the training was not a complete failure ... 
[22:53:59    INFO]  - training seems to have been successful! will move on ...
[22:53:59    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[22:54:03    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:54:04    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:54:04    INFO] ----------------------------------------------------------------------------------------------------
[22:54:04    INFO]  - will book (ANNZ_22_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[22:54:04    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:54:04    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[22:54:04    INFO]    - weights:            1
[22:54:04    INFO] ----------------------------------------------------------------------------------------------------
[22:54:04    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:54:08    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_22 ... 
[22:54:08    INFO]  - Will gen. input-parameter errors ...
[22:54:10    INFO]  - starting ANNZ::loadReaders() ... 
[22:54:11    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[22:55:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:55:03    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[22:55:03    INFO]  -----------------------------------------------------------------------------------------------------------
[22:55:03    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[22:55:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:55:16    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[22:55:16    INFO]  -----------------------------------------------------------------------------------------------------------
[22:55:16    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_22/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:55:17    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:55:17    INFO]  - will validate that the bias-correction actually improved the result ...
[22:55:17    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:55:17    INFO]  - Will use (1) MLMs from the input chain: ANNZ_22,
[22:55:22    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_22/plots/
[22:55:28        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_22/plots output/SPEC_advanced4/regres/train/ANNZ_22/plots_biasCor_before
[22:55:28    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:55:28    INFO]  - Will use (1) MLMs from the input chain: ANNZ_22,
[22:55:31    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_22/plots/
[22:55:38        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_22/plots output/SPEC_advanced4/regres/train/ANNZ_22/plots_biasCor_after
[22:55:38    INFO]  - Got original [KS-test,N_poiss]: [0.0406097 , 5.8493] , after the bias-correction: [0.0347884 , 5.46344] --> will KEEP the correction !

(22:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m23[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:55 INFO) 
[22:55:41    INFO]  -----------------------------------------------------
[22:55:41    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:55:41    INFO]  -----------------------------------------------------------------------------------------------------------
[22:55:42    INFO]  - starting ANNZ::Init()  ... 
[22:55:44    INFO]  - Saving run information in ./output/SPEC_advanced4/regres/train/ANNZ_23/saveOpt.txt ...
[22:56:02    INFO]  - starting ANNZ::Train_singleReg() ... 
[22:56:02    INFO] ----------------------------------------------------------------------------------------------------
[22:56:02    INFO]  - will book (ANNZ_23) method(BDT) with options: :NTrees=380:BoostType=Bagging:VarTransform=N,P
[22:56:02    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:56:02    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[22:56:02    INFO]      cuts (train):        ,
[22:56:02    INFO]      cuts (valid):       
[22:56:02    INFO]    - weights:            1
[22:56:02    INFO] ----------------------------------------------------------------------------------------------------
[22:56:03    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:56:32    INFO]  - Saving MLM information in ./output/SPEC_advanced4/regres/train/ANNZ_23/ANNZ_23_weights/saveTrainOpt_ANNZ_23.txt ...
[22:56:35    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_23 ... 
[22:56:35    INFO]  - Will gen. input-parameter errors ...
[22:56:37    INFO]  - starting ANNZ::loadReaders() ... 
[22:56:51    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[22:59:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:59:49    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[22:59:49    INFO]  -----------------------------------------------------------------------------------------------------------
[22:59:49    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[23:00:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:00:24    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[23:00:24    INFO]  -----------------------------------------------------------------------------------------------------------
[23:00:25    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_23/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:00:26    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:00:26    INFO]  - will try to derive a bias correction ... 
[23:00:26    INFO]  - will validate that training produced an XML file for later ... 
[23:00:26    INFO]  - starting ANNZ::loadReaders() ... 
[23:00:31    INFO]  - will validate that the training was not a complete failure ... 
[23:00:31    INFO]  - training seems to have been successful! will move on ...
[23:00:31    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:00:35    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:00:36    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:00:37    INFO] ----------------------------------------------------------------------------------------------------
[23:00:37    INFO]  - will book (ANNZ_23_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:00:37    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:00:37    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[23:00:37    INFO]    - weights:            1
[23:00:37    INFO] ----------------------------------------------------------------------------------------------------
[23:00:37    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:00:42    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_23 ... 
[23:00:42    INFO]  - Will gen. input-parameter errors ...
[23:00:45    INFO]  - starting ANNZ::loadReaders() ... 
[23:00:53    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[23:03:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:03:17    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[23:03:17    INFO]  -----------------------------------------------------------------------------------------------------------
[23:03:17    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[23:03:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:03:52    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[23:03:52    INFO]  -----------------------------------------------------------------------------------------------------------
[23:03:52    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_23/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:03:54    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:03:54    INFO]  - will validate that the bias-correction actually improved the result ...
[23:03:54    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:03:54    INFO]  - Will use (1) MLMs from the input chain: ANNZ_23,
[23:03:59    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_23/plots/
[23:04:06        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_23/plots output/SPEC_advanced4/regres/train/ANNZ_23/plots_biasCor_before
[23:04:06    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:04:06    INFO]  - Will use (1) MLMs from the input chain: ANNZ_23,
[23:04:09    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_23/plots/
[23:04:16        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_23/plots output/SPEC_advanced4/regres/train/ANNZ_23/plots_biasCor_after
[23:04:16    INFO]  - Got original [KS-test,N_poiss]: [0.0954515 , 6.82033] , after the bias-correction: [0.0455971 , 5.58988] --> will KEEP the correction !

(23:04 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:04 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m24[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=Bagging:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:04 INFO) 
[23:04:21    INFO]  -----------------------------------------------------
[23:04:21    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:04:21    INFO]  -----------------------------------------------------------------------------------------------------------
[23:04:22    INFO]  - starting ANNZ::Init()  ... 
[23:04:24    INFO]  - Saving run information in ./output/SPEC_advanced4/regres/train/ANNZ_24/saveOpt.txt ...
[23:04:43    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:04:43    INFO] ----------------------------------------------------------------------------------------------------
[23:04:43    INFO]  - will book (ANNZ_24) method(BDT) with options: :NTrees=420:BoostType=Bagging:VarTransform=P
[23:04:43    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:04:43    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[23:04:43    INFO]      cuts (train):        ,
[23:04:43    INFO]      cuts (valid):       
[23:04:43    INFO]    - weights:            1
[23:04:43    INFO] ----------------------------------------------------------------------------------------------------
[23:04:43    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
<FATAL>                          :  while the separation is thought to be 0.0672569
***> abort program execution
terminate called after throwing an instance of 'std::runtime_error'
  what():  FATAL error
Aborted (core dumped)
(23:04 CRITICAL) [41;37;1mrunANNZ failed !!![0m
(23:04 CRITICAL) [41;37;1mWill terminate !!!![0m
(00:24 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(00:24 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(00:24 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(00:24 INFO) [40;37;1m - 23/02/19 00:24:14 - starting ANNZ[0m
(00:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=4140:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:24 INFO) 
[00:24:14    INFO]  -----------------------------------------------------
[00:24:14    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:24:14    INFO]  -----------------------------------------------------------------------------------------------------------
[00:24:15    INFO]  - starting ANNZ::Init()  ... 
[00:24:15    INFO]  - found trained "ANNZ_0" (./output/SPEC_advanced4/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[00:24:15    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(00:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+7:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=27929:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:24 INFO) 
[00:24:15    INFO]  -----------------------------------------------------
[00:24:15    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:24:15    INFO]  -----------------------------------------------------------------------------------------------------------
[00:24:17    INFO]  - starting ANNZ::Init()  ... 
[00:24:18    INFO]  - found trained "ANNZ_1" (./output/SPEC_advanced4/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[00:24:18    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(00:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=300:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:24 INFO) 
[00:24:18    INFO]  -----------------------------------------------------
[00:24:18    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:24:18    INFO]  -----------------------------------------------------------------------------------------------------------
[00:24:19    INFO]  - starting ANNZ::Init()  ... 
[00:24:20    INFO]  - found trained "ANNZ_2" (./output/SPEC_advanced4/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[00:24:20    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(00:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+1:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=25439:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:24 INFO) 
[00:24:20    INFO]  -----------------------------------------------------
[00:24:20    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:24:20    INFO]  -----------------------------------------------------------------------------------------------------------
[00:24:21    INFO]  - starting ANNZ::Init()  ... 
[00:24:21    INFO]  - found trained "ANNZ_3" (./output/SPEC_advanced4/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[00:24:21    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(00:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:24 INFO) 
[00:24:21    INFO]  -----------------------------------------------------
[00:24:21    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:24:21    INFO]  -----------------------------------------------------------------------------------------------------------
[00:24:23    INFO]  - starting ANNZ::Init()  ... 
[00:24:23    INFO]  - found trained "ANNZ_4" (./output/SPEC_advanced4/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[00:24:23    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(00:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:24 INFO) 
[00:24:23    INFO]  -----------------------------------------------------
[00:24:23    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:24:23    INFO]  -----------------------------------------------------------------------------------------------------------
[00:24:25    INFO]  - starting ANNZ::Init()  ... 
[00:24:25    INFO]  - found trained "ANNZ_5" (./output/SPEC_advanced4/regres/train/ANNZ_5/ANNZ_5_weights/randomReg_ANNZ_5.weights.xml)
[00:24:25    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(00:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=410:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:24 INFO) 
[00:24:25    INFO]  -----------------------------------------------------
[00:24:25    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:24:25    INFO]  -----------------------------------------------------------------------------------------------------------
[00:24:26    INFO]  - starting ANNZ::Init()  ... 
[00:24:27    INFO]  - found trained "ANNZ_6" (./output/SPEC_advanced4/regres/train/ANNZ_6/ANNZ_6_weights/randomReg_ANNZ_6.weights.xml)
[00:24:27    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(00:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=310:BoostType=AdaBoostR2:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:24 INFO) 
[00:24:27    INFO]  -----------------------------------------------------
[00:24:27    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:24:27    INFO]  -----------------------------------------------------------------------------------------------------------
[00:24:28    INFO]  - starting ANNZ::Init()  ... 
[00:24:28    INFO]  - found trained "ANNZ_7" (./output/SPEC_advanced4/regres/train/ANNZ_7/ANNZ_7_weights/randomReg_ANNZ_7.weights.xml)
[00:24:28    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(00:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+3,N+6:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=31664:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:24 INFO) 
[00:24:28    INFO]  -----------------------------------------------------
[00:24:28    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:24:28    INFO]  -----------------------------------------------------------------------------------------------------------
[00:24:30    INFO]  - starting ANNZ::Init()  ... 
[00:24:30    INFO]  - found trained "ANNZ_8" (./output/SPEC_advanced4/regres/train/ANNZ_8/ANNZ_8_weights/randomReg_ANNZ_8.weights.xml)
[00:24:30    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(00:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+7:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=5:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=21712:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:24 INFO) 
[00:24:30    INFO]  -----------------------------------------------------
[00:24:30    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:24:30    INFO]  -----------------------------------------------------------------------------------------------------------
[00:24:31    INFO]  - starting ANNZ::Init()  ... 
[00:24:31    INFO]  - found trained "ANNZ_9" (./output/SPEC_advanced4/regres/train/ANNZ_9/ANNZ_9_weights/randomReg_ANNZ_9.weights.xml)
[00:24:31    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(00:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N+2,N+2:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=50:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=85225:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:24 INFO) 
[00:24:31    INFO]  -----------------------------------------------------
[00:24:31    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:24:31    INFO]  -----------------------------------------------------------------------------------------------------------
[00:24:32    INFO]  - starting ANNZ::Init()  ... 
[00:24:33    INFO]  - found trained "ANNZ_10" (./output/SPEC_advanced4/regres/train/ANNZ_10/ANNZ_10_weights/randomReg_ANNZ_10.weights.xml)
[00:24:33    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(00:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:24 INFO) 
[00:24:33    INFO]  -----------------------------------------------------
[00:24:33    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:24:33    INFO]  -----------------------------------------------------------------------------------------------------------
[00:24:34    INFO]  - starting ANNZ::Init()  ... 
[00:24:35    INFO]  - found trained "ANNZ_11" (./output/SPEC_advanced4/regres/train/ANNZ_11/ANNZ_11_weights/randomReg_ANNZ_11.weights.xml)
[00:24:35    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(00:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+9:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=50:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=92238:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:24 INFO) 
[00:24:35    INFO]  -----------------------------------------------------
[00:24:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:24:35    INFO]  -----------------------------------------------------------------------------------------------------------
[00:24:36    INFO]  - starting ANNZ::Init()  ... 
[00:24:36    INFO]  - found trained "ANNZ_12" (./output/SPEC_advanced4/regres/train/ANNZ_12/ANNZ_12_weights/randomReg_ANNZ_12.weights.xml)
[00:24:36    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(00:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+2,N+9:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=True:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=41364:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:24 INFO) 
[00:24:37    INFO]  -----------------------------------------------------
[00:24:37    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:24:37    INFO]  -----------------------------------------------------------------------------------------------------------
[00:24:38    INFO]  - starting ANNZ::Init()  ... 
[00:24:38    INFO]  - found trained "ANNZ_13" (./output/SPEC_advanced4/regres/train/ANNZ_13/ANNZ_13_weights/randomReg_ANNZ_13.weights.xml)
[00:24:38    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(00:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=Bagging[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:24 INFO) 
[00:24:38    INFO]  -----------------------------------------------------
[00:24:38    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:24:38    INFO]  -----------------------------------------------------------------------------------------------------------
[00:24:39    INFO]  - starting ANNZ::Init()  ... 
[00:24:40    INFO]  - found trained "ANNZ_14" (./output/SPEC_advanced4/regres/train/ANNZ_14/ANNZ_14_weights/randomReg_ANNZ_14.weights.xml)
[00:24:40    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(00:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=400:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:24 INFO) 
[00:24:40    INFO]  -----------------------------------------------------
[00:24:40    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:24:40    INFO]  -----------------------------------------------------------------------------------------------------------
[00:24:41    INFO]  - starting ANNZ::Init()  ... 
[00:24:41    INFO]  - found trained "ANNZ_15" (./output/SPEC_advanced4/regres/train/ANNZ_15/ANNZ_15_weights/randomReg_ANNZ_15.weights.xml)
[00:24:41    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(00:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N+4:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=250:RandomSeed=91535:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:24 INFO) 
[00:24:42    INFO]  -----------------------------------------------------
[00:24:42    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:24:42    INFO]  -----------------------------------------------------------------------------------------------------------
[00:24:43    INFO]  - starting ANNZ::Init()  ... 
[00:24:43    INFO]  - found trained "ANNZ_16" (./output/SPEC_advanced4/regres/train/ANNZ_16/ANNZ_16_weights/randomReg_ANNZ_16.weights.xml)
[00:24:43    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(00:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+1,N+4,N+1:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=57792:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:24 INFO) 
[00:24:43    INFO]  -----------------------------------------------------
[00:24:43    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:24:43    INFO]  -----------------------------------------------------------------------------------------------------------
[00:24:44    INFO]  - starting ANNZ::Init()  ... 
[00:24:44    INFO]  - found trained "ANNZ_17" (./output/SPEC_advanced4/regres/train/ANNZ_17/ANNZ_17_weights/randomReg_ANNZ_17.weights.xml)
[00:24:44    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(00:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m18[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=510:BoostType=AdaBoost[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:24 INFO) 
[00:24:44    INFO]  -----------------------------------------------------
[00:24:44    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:24:44    INFO]  -----------------------------------------------------------------------------------------------------------
[00:24:46    INFO]  - starting ANNZ::Init()  ... 
[00:24:46    INFO]  - found trained "ANNZ_18" (./output/SPEC_advanced4/regres/train/ANNZ_18/ANNZ_18_weights/randomReg_ANNZ_18.weights.xml)
[00:24:46    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(00:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m19[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=550:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:24 INFO) 
[00:24:46    INFO]  -----------------------------------------------------
[00:24:46    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:24:46    INFO]  -----------------------------------------------------------------------------------------------------------
[00:24:47    INFO]  - starting ANNZ::Init()  ... 
[00:24:48    INFO]  - found trained "ANNZ_19" (./output/SPEC_advanced4/regres/train/ANNZ_19/ANNZ_19_weights/randomReg_ANNZ_19.weights.xml)
[00:24:48    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(00:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m20[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N+4,N:NeuronType=sigmoid:NeuronInputType=sum:TrainingMethod=BFGS:TestRate=25:NCycles=5000:UseRegulator=False:ConvergenceTests=25:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=500:RandomSeed=48822:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:24 INFO) 
[00:24:48    INFO]  -----------------------------------------------------
[00:24:48    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:24:48    INFO]  -----------------------------------------------------------------------------------------------------------
[00:24:49    INFO]  - starting ANNZ::Init()  ... 
[00:24:49    INFO]  - found trained "ANNZ_20" (./output/SPEC_advanced4/regres/train/ANNZ_20/ANNZ_20_weights/randomReg_ANNZ_20.weights.xml)
[00:24:49    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(00:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m21[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=ANN:HiddenLayers=N,N:NeuronType=tanh:NeuronInputType=sum:TrainingMethod=BP:TestRate=5:NCycles=5000:UseRegulator=True:ConvergenceTests=-1:ConvergenceImprove=1e-30:SamplingTraining=False:SamplingTesting=False:ResetStep=100:RandomSeed=92409:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:24 INFO) 
[00:24:50    INFO]  -----------------------------------------------------
[00:24:50    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:24:50    INFO]  -----------------------------------------------------------------------------------------------------------
[00:24:51    INFO]  - starting ANNZ::Init()  ... 
[00:24:51    INFO]  - found trained "ANNZ_21" (./output/SPEC_advanced4/regres/train/ANNZ_21/ANNZ_21_weights/randomReg_ANNZ_21.weights.xml)
[00:24:51    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(00:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m22[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:24 INFO) 
[00:24:51    INFO]  -----------------------------------------------------
[00:24:51    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:24:51    INFO]  -----------------------------------------------------------------------------------------------------------
[00:24:53    INFO]  - starting ANNZ::Init()  ... 
[00:24:53    INFO]  - found trained "ANNZ_22" (./output/SPEC_advanced4/regres/train/ANNZ_22/ANNZ_22_weights/randomReg_ANNZ_22.weights.xml)
[00:24:53    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(00:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m23[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=280:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:24 INFO) 
[00:24:53    INFO]  -----------------------------------------------------
[00:24:53    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:24:53    INFO]  -----------------------------------------------------------------------------------------------------------
[00:24:54    INFO]  - starting ANNZ::Init()  ... 
[00:24:55    INFO]  - found trained "ANNZ_23" (./output/SPEC_advanced4/regres/train/ANNZ_23/ANNZ_23_weights/randomReg_ANNZ_23.weights.xml)
[00:24:55    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(00:24 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:24 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mi_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err;band0_flux_error;band2_flux_error;band4_flux_error;band6_flux_error;band8_flux_error;band10_flux_error;band12_flux_error;band14_flux_error;band16_flux_error;band18_flux_error;band20_flux_error;band22_flux_error;band24_flux_error;band26_flux_error;band28_flux_error;band30_flux_error;band32_flux_error;band34_flux_error;band36_flux_error;band38_flux_error[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m24[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m25[0m' , [34mrndOptTypes[0m[31m=[0m'[32mANN_BDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mSPEC_advanced4[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mi_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag;band0_flux;band2_flux;band4_flux;band6_flux;band8_flux;band10_flux;band12_flux;band14_flux;band16_flux;band18_flux;band20_flux;band22_flux;band24_flux;band26_flux;band28_flux;band30_flux;band32_flux;band34_flux;band36_flux;band38_flux[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=540:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mzspec[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:24 INFO) 
[00:24:55    INFO]  -----------------------------------------------------
[00:24:55    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:24:55    INFO]  -----------------------------------------------------------------------------------------------------------
[00:24:56    INFO]  - starting ANNZ::Init()  ... 
[00:24:57    INFO]  - Saving run information in ./output/SPEC_advanced4/regres/train/ANNZ_24/saveOpt.txt ...
[00:25:13    INFO]  - starting ANNZ::Train_singleReg() ... 
[00:25:13    INFO] ----------------------------------------------------------------------------------------------------
[00:25:13    INFO]  - will book (ANNZ_24) method(BDT) with options: :NTrees=540:BoostType=AdaBoost:VarTransform=N,P
[00:25:13    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:25:13    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000) ,
[00:25:13    INFO]      cuts (train):        ,
[00:25:13    INFO]      cuts (valid):       
[00:25:13    INFO]    - weights:            1
[00:25:13    INFO] ----------------------------------------------------------------------------------------------------
[00:25:14    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:25:34    INFO]  - Saving MLM information in ./output/SPEC_advanced4/regres/train/ANNZ_24/ANNZ_24_weights/saveTrainOpt_ANNZ_24.txt ...
[00:25:36    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_24 ... 
[00:25:36    INFO]  - Will gen. input-parameter errors ...
[00:25:38    INFO]  - starting ANNZ::loadReaders() ... 
[00:25:42    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[00:27:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:27:20    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:27:20    INFO]  -----------------------------------------------------------------------------------------------------------
[00:27:20    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[00:27:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:27:44    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:27:44    INFO]  -----------------------------------------------------------------------------------------------------------
[00:27:44    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_24/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:27:46    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:27:46    INFO]  - will try to derive a bias correction ... 
[00:27:46    INFO]  - will validate that training produced an XML file for later ... 
[00:27:46    INFO]  - starting ANNZ::loadReaders() ... 
[00:27:47    INFO]  - will validate that the training was not a complete failure ... 
[00:27:47    INFO]  - training seems to have been successful! will move on ...
[00:27:47    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[00:27:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:27:51    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:27:52    INFO] ----------------------------------------------------------------------------------------------------
[00:27:52    INFO]  - will book (ANNZ_24_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[00:27:52    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:27:52    INFO]    - cuts (all):         (zspec >= 0.000000)&&(zspec <= 1.200000)
[00:27:52    INFO]    - weights:            1
[00:27:52    INFO] ----------------------------------------------------------------------------------------------------
[00:27:52    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:27:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_24 ... 
[00:27:56    INFO]  - Will gen. input-parameter errors ...
[00:27:58    INFO]  - starting ANNZ::loadReaders() ... 
[00:28:02    INFO]  - added chain ANNZ_tree_train(8926) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_train*.root
[00:29:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:29:36    INFO]  -- ANNZ_tree_train ................................. 8926  nObj
[00:29:36    INFO]  -----------------------------------------------------------------------------------------------------------
[00:29:36    INFO]  - added chain ANNZ_tree_valid(2232) from ./output/SPEC_advanced4/rootIn/ANNZ_tree_valid*.root
[00:29:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:29:59    INFO]  -- ANNZ_tree_valid ................................. 2232  nObj
[00:29:59    INFO]  -----------------------------------------------------------------------------------------------------------
[00:29:59    INFO]  - Saving file ./output/SPEC_advanced4/regres/train/ANNZ_24/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:30:00    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:30:00    INFO]  - will validate that the bias-correction actually improved the result ...
[00:30:00    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:30:00    INFO]  - Will use (1) MLMs from the input chain: ANNZ_24,
[00:30:03    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_24/plots/
[00:30:10        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_24/plots output/SPEC_advanced4/regres/train/ANNZ_24/plots_biasCor_before
[00:30:10    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:30:10    INFO]  - Will use (1) MLMs from the input chain: ANNZ_24,
[00:30:12    INFO]  - Writing to plotting directory output/SPEC_advanced4/regres/train/ANNZ_24/plots/
[00:30:19        ]  - Sys-comnd (exit=0) : mv output/SPEC_advanced4/regres/train/ANNZ_24/plots output/SPEC_advanced4/regres/train/ANNZ_24/plots_biasCor_after
[00:30:19    INFO]  - Got original [KS-test,N_poiss]: [0.086825 , 6.36245] , after the bias-correction: [0.0457092 , 5.77075] --> will KEEP the correction !

(00:30 INFO) [40;37;1m - 23/02/19 00:30:22 - finished running ANNZ ![0m
