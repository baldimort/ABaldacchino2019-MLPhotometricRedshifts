(11:36 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(11:36 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(11:36 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(11:36 INFO) [40;37;1m - 28/01/19 11:36:39 - starting ANNZ[0m
(11:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:36 INFO)    [34msplitTypeTrain[0m[31m=[0m'[32mANNz_data5aa.csv[0m' , [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34msplitTypeTest[0m[31m=[0m'[32mANNz_data5ab.csv[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:band0flux;F:band1flux;F:band2flux;F:band3flux;F:band4flux;F:band5flux;F:band6flux;F:band7flux;F:band8flux;F:band9flux;F:band10flux;F:band11flux;F:band12flux;F:band13flux;F:band14flux;F:band15flux;F:band16flux;F:band17flux;F:band18flux;F:band19flux;F:band20flux;F:band21flux;F:band22flux;F:band23flux;F:band24flux;F:band25flux;F:band26flux;F:band27flux;F:band28flux;F:band29flux;F:band30flux;F:band31flux;F:band32flux;F:band33flux;F:band34flux;F:band35flux;F:band36flux;F:band37flux;F:band38flux;F:band39flux;F:band0fluxerror;F:band1fluxerror;F:band2fluxerror;F:band3fluxerror;F:band4fluxerror;F:band5fluxerror;F:band6fluxerror;F:band7fluxerror;F:band8fluxerror;F:band9fluxerror;F:band10fluxerror;F:band11fluxerror;F:band12fluxerror;F:band13fluxerror;F:band14fluxerror;F:band15fluxerror;F:band16fluxerror;F:band17fluxerror;F:band18fluxerror;F:band19fluxerror;F:band20fluxerror;F:band21fluxerror;F:band22fluxerror;F:band23fluxerror;F:band24fluxerror;F:band25fluxerror;F:band26fluxerror;F:band27fluxerror;F:band28fluxerror;F:band29fluxerror;F:band30fluxerror;F:band31fluxerror;F:band32fluxerror;F:band33fluxerror;F:band34fluxerror;F:band35fluxerror;F:band36fluxerror;F:band37fluxerror;F:band38fluxerror;F:band39fluxerror;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:Z;F:Zerror[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mTrue[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:36 INFO) 
[11:36:39    INFO]  -----------------------------------------------------
[11:36:39    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:36:39    INFO]  -----------------------------------------------------------------------------------------------------------
[11:36:42    INFO]  - starting inputToSplitTree() ... 
[11:36:42    INFO]  - Found 12998 lines in file PAUS/ANNz_data5aa.csv -> total so far = 12998 ... 
[11:36:42    INFO]  - Found 13685 lines in file PAUS/ANNz_data5ab.csv -> total so far = 13685 ... 
[11:36:42    INFO]  - Now reading-in PAUS/ANNz_data5aa.csv ... 
[11:36:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:36:43    INFO]  -- ANNZ_tree .......................................... 0  index
[11:36:43    INFO]  -- ANNZ_tree ...................................... 12998  nLine
[11:36:43    INFO]  -- ANNZ_tree ...................................... 12998  nLineFile
[11:36:43    INFO]  -- ANNZ_tree ...................................... 12998  nObj
[11:36:43    INFO]  -- ANNZ_tree .......................................... 0  nTest
[11:36:43    INFO]  -- ANNZ_tree ...................................... 12998  nTrain
[11:36:43    INFO]  -----------------------------------------------------------------------------------------------------------
[11:36:43    INFO]  - Now reading-in PAUS/ANNz_data5ab.csv ... 
[11:36:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:36:44    INFO]  -- ANNZ_tree .......................................... 0  index
[11:36:44    INFO]  -- ANNZ_tree ...................................... 26683  nLine
[11:36:44    INFO]  -- ANNZ_tree ...................................... 13685  nLineFile
[11:36:44    INFO]  -- ANNZ_tree ...................................... 13685  nObj
[11:36:44    INFO]  -- ANNZ_tree ...................................... 13685  nTest
[11:36:44    INFO]  -- ANNZ_tree ...................................... 12998  nTrain
[11:36:44    INFO]  -----------------------------------------------------------------------------------------------------------
[11:36:45    INFO]  - Writing to plotting directory output/PAUS_advanced7/rootIn/plots/
[11:36:46    INFO]  - Writing to plotting directory output/PAUS_advanced7/rootIn/plots/

(11:36 INFO) [40;37;1m - 28/01/19 11:36:47 - finished running ANNZ ![0m
(11:36 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(11:36 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(11:36 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(11:36 INFO) [40;37;1m - 28/01/19 11:36:55 - starting ANNZ[0m
(11:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=440:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:36 INFO) 
[11:36:55    INFO]  -----------------------------------------------------
[11:36:55    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:36:55    INFO]  -----------------------------------------------------------------------------------------------------------
[11:36:56    INFO]  - starting ANNZ::Init()  ... 
[11:36:56    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_0/saveOpt.txt ...
[11:37:01    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:37:01    INFO] ----------------------------------------------------------------------------------------------------
[11:37:01    INFO]  - will book (ANNZ_0) method(BDT) with options: :NTrees=440:BoostType=Bagging:VarTransform=N
[11:37:01    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:37:01    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[11:37:01    INFO]      cuts (train):        ,
[11:37:01    INFO]      cuts (valid):       
[11:37:01    INFO]    - weights:            1
[11:37:01    INFO] ----------------------------------------------------------------------------------------------------
[11:37:01    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:37:45    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_0/ANNZ_0_weights/saveTrainOpt_ANNZ_0.txt ...
[11:37:49    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[11:37:49    INFO]  - Will gen. input-parameter errors ...
[11:37:50    INFO]  - starting ANNZ::loadReaders() ... 
[11:38:00    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[11:39:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:39:56    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[11:39:56    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[11:39:56    INFO]  -----------------------------------------------------------------------------------------------------------
[11:40:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:40:30    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[11:40:30    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[11:40:30    INFO]  -----------------------------------------------------------------------------------------------------------
[11:40:30    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[11:42:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:42:28    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[11:42:28    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[11:42:28    INFO]  -----------------------------------------------------------------------------------------------------------
[11:43:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:43:11    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[11:43:11    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[11:43:11    INFO]  -----------------------------------------------------------------------------------------------------------
[11:43:11    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:43:13    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:43:13    INFO]  - will try to derive a bias correction ... 
[11:43:13    INFO]  - will validate that training produced an XML file for later ... 
[11:43:13    INFO]  - starting ANNZ::loadReaders() ... 
[11:43:17    INFO]  - will validate that the training was not a complete failure ... 
[11:43:17    INFO]  - training seems to have been successful! will move on ...
[11:43:17    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[11:43:20    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:43:21    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[11:43:22    INFO] ----------------------------------------------------------------------------------------------------
[11:43:22    INFO]  - will book (ANNZ_0_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[11:43:22    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:43:22    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[11:43:22    INFO]    - weights:            1
[11:43:22    INFO] ----------------------------------------------------------------------------------------------------
[11:43:23    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:43:34    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_0 ... 
[11:43:34    INFO]  - Will gen. input-parameter errors ...
[11:43:36    INFO]  - starting ANNZ::loadReaders() ... 
[11:43:47    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[11:46:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:46:03    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[11:46:03    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[11:46:03    INFO]  -----------------------------------------------------------------------------------------------------------
[11:46:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:46:44    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[11:46:44    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[11:46:44    INFO]  -----------------------------------------------------------------------------------------------------------
[11:46:44    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[11:48:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:48:58    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[11:48:58    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[11:48:58    INFO]  -----------------------------------------------------------------------------------------------------------
[11:49:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[11:49:47    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[11:49:47    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[11:49:47    INFO]  -----------------------------------------------------------------------------------------------------------
[11:49:47    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_0/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[11:49:49    INFO]  - ending makeTreeRegClsOneMLM() ... 
[11:49:49    INFO]  - will validate that the bias-correction actually improved the result ...
[11:49:49    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:49:49    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
[11:49:54    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_0/plots/
[11:50:04        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_0/plots output/PAUS_advanced7/regres/train/ANNZ_0/plots_biasCor_before
[11:50:04    INFO]  - starting ANNZ::doMetricPlots() ... 
[11:50:04    INFO]  - Will use (1) MLMs from the input chain: ANNZ_0,
[11:50:09    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_0/plots/
[11:50:19        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_0/plots output/PAUS_advanced7/regres/train/ANNZ_0/plots_biasCor_after
[11:50:19    INFO]  - Got original [KS-test,N_poiss]: [0.0678639 , 5.76376] , after the bias-correction: [0.0487183 , 4.63656] --> will KEEP the correction !

(11:50 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(11:50 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=510:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(11:50 INFO) 
[11:50:22    INFO]  -----------------------------------------------------
[11:50:22    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[11:50:22    INFO]  -----------------------------------------------------------------------------------------------------------
[11:50:22    INFO]  - starting ANNZ::Init()  ... 
[11:50:23    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_1/saveOpt.txt ...
[11:50:28    INFO]  - starting ANNZ::Train_singleReg() ... 
[11:50:28    INFO] ----------------------------------------------------------------------------------------------------
[11:50:28    INFO]  - will book (ANNZ_1) method(BDT) with options: :NTrees=510:BoostType=AdaBoostR2:VarTransform=N,P
[11:50:28    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[11:50:28    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[11:50:28    INFO]      cuts (train):        ,
[11:50:28    INFO]      cuts (valid):       
[11:50:28    INFO]    - weights:            1
[11:50:28    INFO] ----------------------------------------------------------------------------------------------------
[11:50:28    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[11:51:15    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_1/ANNZ_1_weights/saveTrainOpt_ANNZ_1.txt ...
[11:51:18    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[11:51:18    INFO]  - Will gen. input-parameter errors ...
[11:51:19    INFO]  - starting ANNZ::loadReaders() ... 
[11:51:34    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[12:00:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:00:55    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[12:00:55    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[12:00:55    INFO]  -----------------------------------------------------------------------------------------------------------
[12:03:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:03:43    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[12:03:43    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[12:03:43    INFO]  -----------------------------------------------------------------------------------------------------------
[12:03:43    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[12:13:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:13:03    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[12:13:03    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[12:13:03    INFO]  -----------------------------------------------------------------------------------------------------------
[12:16:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:16:31    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[12:16:31    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[12:16:31    INFO]  -----------------------------------------------------------------------------------------------------------
[12:16:31    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:16:32    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:16:32    INFO]  - will try to derive a bias correction ... 
[12:16:32    INFO]  - will validate that training produced an XML file for later ... 
[12:16:32    INFO]  - starting ANNZ::loadReaders() ... 
[12:16:34    INFO]  - will validate that the training was not a complete failure ... 
[12:16:34    INFO]  - training seems to have been successful! will move on ...
[12:16:34    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:16:36    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:16:38    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:16:39    INFO] ----------------------------------------------------------------------------------------------------
[12:16:39    INFO]  - will book (ANNZ_1_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:16:39    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:16:39    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[12:16:39    INFO]    - weights:            1
[12:16:39    INFO] ----------------------------------------------------------------------------------------------------
[12:16:39    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:16:48    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_1 ... 
[12:16:48    INFO]  - Will gen. input-parameter errors ...
[12:16:49    INFO]  - starting ANNZ::loadReaders() ... 
[12:17:02    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[12:27:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:27:59    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[12:27:59    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[12:27:59    INFO]  -----------------------------------------------------------------------------------------------------------
[12:31:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:31:16    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[12:31:16    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[12:31:16    INFO]  -----------------------------------------------------------------------------------------------------------
[12:31:17    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[12:42:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:42:15    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[12:42:15    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[12:42:15    INFO]  -----------------------------------------------------------------------------------------------------------
[12:46:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:46:17    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[12:46:17    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[12:46:17    INFO]  -----------------------------------------------------------------------------------------------------------
[12:46:18    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_1/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:46:19    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:46:19    INFO]  - will validate that the bias-correction actually improved the result ...
[12:46:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:46:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
[12:46:24    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_1/plots/
[12:46:34        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_1/plots output/PAUS_advanced7/regres/train/ANNZ_1/plots_biasCor_before
[12:46:34    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:46:34    INFO]  - Will use (1) MLMs from the input chain: ANNZ_1,
[12:46:38    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_1/plots/
[12:46:48        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_1/plots output/PAUS_advanced7/regres/train/ANNZ_1/plots_biasCor_after
[12:46:48    INFO]  - Got original [KS-test,N_poiss]: [0.0678046 , 6.97905] , after the bias-correction: [0.0373091 , 5.02508] --> will KEEP the correction !

(12:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(12:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=700:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(12:46 INFO) 
[12:46:51    INFO]  -----------------------------------------------------
[12:46:51    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[12:46:51    INFO]  -----------------------------------------------------------------------------------------------------------
[12:46:52    INFO]  - starting ANNZ::Init()  ... 
[12:46:52    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_2/saveOpt.txt ...
[12:46:57    INFO]  - starting ANNZ::Train_singleReg() ... 
[12:46:57    INFO] ----------------------------------------------------------------------------------------------------
[12:46:57    INFO]  - will book (ANNZ_2) method(BDT) with options: :NTrees=700:BoostType=AdaBoost:VarTransform=N
[12:46:57    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:46:57    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[12:46:57    INFO]      cuts (train):        ,
[12:46:57    INFO]      cuts (valid):       
[12:46:57    INFO]    - weights:            1
[12:46:57    INFO] ----------------------------------------------------------------------------------------------------
[12:46:57    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:47:43    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_2/ANNZ_2_weights/saveTrainOpt_ANNZ_2.txt ...
[12:47:46    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[12:47:46    INFO]  - Will gen. input-parameter errors ...
[12:47:47    INFO]  - starting ANNZ::loadReaders() ... 
[12:47:56    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[12:50:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:50:19    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[12:50:19    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[12:50:19    INFO]  -----------------------------------------------------------------------------------------------------------
[12:51:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:51:02    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[12:51:02    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[12:51:02    INFO]  -----------------------------------------------------------------------------------------------------------
[12:51:02    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[12:53:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:53:24    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[12:53:24    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[12:53:24    INFO]  -----------------------------------------------------------------------------------------------------------
[12:54:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:54:17    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[12:54:17    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[12:54:17    INFO]  -----------------------------------------------------------------------------------------------------------
[12:54:17    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:54:18    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:54:18    INFO]  - will try to derive a bias correction ... 
[12:54:18    INFO]  - will validate that training produced an XML file for later ... 
[12:54:18    INFO]  - starting ANNZ::loadReaders() ... 
[12:54:21    INFO]  - will validate that the training was not a complete failure ... 
[12:54:21    INFO]  - training seems to have been successful! will move on ...
[12:54:21    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[12:54:23    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:54:24    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[12:54:26    INFO] ----------------------------------------------------------------------------------------------------
[12:54:26    INFO]  - will book (ANNZ_2_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[12:54:26    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[12:54:26    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[12:54:26    INFO]    - weights:            1
[12:54:26    INFO] ----------------------------------------------------------------------------------------------------
[12:54:26    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[12:54:35    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_2 ... 
[12:54:35    INFO]  - Will gen. input-parameter errors ...
[12:54:36    INFO]  - starting ANNZ::loadReaders() ... 
[12:54:44    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[12:56:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:56:33    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[12:56:33    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[12:56:33    INFO]  -----------------------------------------------------------------------------------------------------------
[12:57:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:57:05    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[12:57:05    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[12:57:05    INFO]  -----------------------------------------------------------------------------------------------------------
[12:57:05    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[12:58:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:58:54    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[12:58:54    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[12:58:54    INFO]  -----------------------------------------------------------------------------------------------------------
[12:59:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[12:59:34    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[12:59:34    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[12:59:34    INFO]  -----------------------------------------------------------------------------------------------------------
[12:59:34    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_2/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[12:59:36    INFO]  - ending makeTreeRegClsOneMLM() ... 
[12:59:36    INFO]  - will validate that the bias-correction actually improved the result ...
[12:59:36    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:59:36    INFO]  - Will use (1) MLMs from the input chain: ANNZ_2,
Warning in <Fit>: Fit data is empty 
[12:59:41    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_2/plots/
[12:59:51        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_2/plots output/PAUS_advanced7/regres/train/ANNZ_2/plots_biasCor_before
[12:59:51    INFO]  - starting ANNZ::doMetricPlots() ... 
[12:59:51    INFO]  - Will use (1) MLMs from the input chain: ANNZ_2,
Warning in <Fit>: Fit data is empty 
[12:59:55    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_2/plots/
[13:00:05        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_2/plots output/PAUS_advanced7/regres/train/ANNZ_2/plots_biasCor_after
[13:00:05    INFO]  - Got original [KS-test,N_poiss]: [0.0860136 , 5.56536] , after the bias-correction: [0.0489802 , 4.52344] --> will KEEP the correction !

(13:00 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:00 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:00 INFO) 
[13:00:08    INFO]  -----------------------------------------------------
[13:00:08    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:00:08    INFO]  -----------------------------------------------------------------------------------------------------------
[13:00:09    INFO]  - starting ANNZ::Init()  ... 
[13:00:09    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_3/saveOpt.txt ...
[13:00:14    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:00:14    INFO] ----------------------------------------------------------------------------------------------------
[13:00:14    INFO]  - will book (ANNZ_3) method(BDT) with options: :NTrees=490:BoostType=AdaBoost:VarTransform=N
[13:00:14    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:00:14    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[13:00:14    INFO]      cuts (train):        ,
[13:00:14    INFO]      cuts (valid):       
[13:00:14    INFO]    - weights:            1
[13:00:14    INFO] ----------------------------------------------------------------------------------------------------
[13:00:15    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:00:47    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_3/ANNZ_3_weights/saveTrainOpt_ANNZ_3.txt ...
[13:00:49    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[13:00:49    INFO]  - Will gen. input-parameter errors ...
[13:00:50    INFO]  - starting ANNZ::loadReaders() ... 
[13:00:56    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[13:02:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:02:37    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[13:02:37    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[13:02:37    INFO]  -----------------------------------------------------------------------------------------------------------
[13:03:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:03:07    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[13:03:07    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[13:03:07    INFO]  -----------------------------------------------------------------------------------------------------------
[13:03:07    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[13:04:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:04:48    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[13:04:48    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[13:04:48    INFO]  -----------------------------------------------------------------------------------------------------------
[13:05:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:05:25    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[13:05:25    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[13:05:25    INFO]  -----------------------------------------------------------------------------------------------------------
[13:05:25    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:05:27    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:05:27    INFO]  - will try to derive a bias correction ... 
[13:05:27    INFO]  - will validate that training produced an XML file for later ... 
[13:05:27    INFO]  - starting ANNZ::loadReaders() ... 
[13:05:28    INFO]  - will validate that the training was not a complete failure ... 
[13:05:29    INFO]  - training seems to have been successful! will move on ...
[13:05:29    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:05:31    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:05:32    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:05:33    INFO] ----------------------------------------------------------------------------------------------------
[13:05:33    INFO]  - will book (ANNZ_3_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:05:33    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:05:33    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[13:05:33    INFO]    - weights:            1
[13:05:33    INFO] ----------------------------------------------------------------------------------------------------
[13:05:34    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:05:42    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_3 ... 
[13:05:42    INFO]  - Will gen. input-parameter errors ...
[13:05:43    INFO]  - starting ANNZ::loadReaders() ... 
[13:05:50    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[13:07:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:07:31    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[13:07:31    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[13:07:31    INFO]  -----------------------------------------------------------------------------------------------------------
[13:08:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:08:02    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[13:08:02    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[13:08:02    INFO]  -----------------------------------------------------------------------------------------------------------
[13:08:02    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[13:09:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:09:44    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[13:09:44    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[13:09:44    INFO]  -----------------------------------------------------------------------------------------------------------
[13:10:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:10:24    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[13:10:24    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[13:10:24    INFO]  -----------------------------------------------------------------------------------------------------------
[13:10:24    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_3/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:10:25    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:10:25    INFO]  - will validate that the bias-correction actually improved the result ...
[13:10:25    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:10:25    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
Warning in <Fit>: Fit data is empty 
[13:10:30    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_3/plots/
[13:10:41        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_3/plots output/PAUS_advanced7/regres/train/ANNZ_3/plots_biasCor_before
[13:10:41    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:10:41    INFO]  - Will use (1) MLMs from the input chain: ANNZ_3,
Warning in <Fit>: Fit data is empty 
[13:10:45    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_3/plots/
[13:10:56        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_3/plots output/PAUS_advanced7/regres/train/ANNZ_3/plots_biasCor_after
[13:10:56    INFO]  - Got original [KS-test,N_poiss]: [0.0860136 , 5.56139] , after the bias-correction: [0.0501342 , 4.54294] --> will KEEP the correction !

(13:10 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:10 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=480:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:10 INFO) 
[13:10:58    INFO]  -----------------------------------------------------
[13:10:58    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:10:58    INFO]  -----------------------------------------------------------------------------------------------------------
[13:10:59    INFO]  - starting ANNZ::Init()  ... 
[13:10:59    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_4/saveOpt.txt ...
[13:11:04    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:11:04    INFO] ----------------------------------------------------------------------------------------------------
[13:11:04    INFO]  - will book (ANNZ_4) method(BDT) with options: :NTrees=480:BoostType=Bagging:VarTransform=N,P
[13:11:04    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:11:04    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[13:11:04    INFO]      cuts (train):        ,
[13:11:04    INFO]      cuts (valid):       
[13:11:04    INFO]    - weights:            1
[13:11:04    INFO] ----------------------------------------------------------------------------------------------------
[13:11:05    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:11:56    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_4/ANNZ_4_weights/saveTrainOpt_ANNZ_4.txt ...
[13:12:00    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[13:12:00    INFO]  - Will gen. input-parameter errors ...
[13:12:02    INFO]  - starting ANNZ::loadReaders() ... 
[13:12:15    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[13:15:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:15:29    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[13:15:29    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[13:15:29    INFO]  -----------------------------------------------------------------------------------------------------------
[13:16:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:16:27    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[13:16:27    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[13:16:27    INFO]  -----------------------------------------------------------------------------------------------------------
[13:16:27    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[13:19:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:19:37    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[13:19:37    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[13:19:37    INFO]  -----------------------------------------------------------------------------------------------------------
[13:20:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:20:50    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[13:20:50    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[13:20:50    INFO]  -----------------------------------------------------------------------------------------------------------
[13:20:50    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:20:52    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:20:52    INFO]  - will try to derive a bias correction ... 
[13:20:52    INFO]  - will validate that training produced an XML file for later ... 
[13:20:52    INFO]  - starting ANNZ::loadReaders() ... 
[13:20:57    INFO]  - will validate that the training was not a complete failure ... 
[13:20:57    INFO]  - training seems to have been successful! will move on ...
[13:20:57    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:21:01    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:21:02    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:21:03    INFO] ----------------------------------------------------------------------------------------------------
[13:21:03    INFO]  - will book (ANNZ_4_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:21:03    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:21:03    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[13:21:03    INFO]    - weights:            1
[13:21:03    INFO] ----------------------------------------------------------------------------------------------------
[13:21:03    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:21:16    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_4 ... 
[13:21:16    INFO]  - Will gen. input-parameter errors ...
[13:21:18    INFO]  - starting ANNZ::loadReaders() ... 
[13:21:31    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[13:25:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:25:00    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[13:25:00    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[13:25:00    INFO]  -----------------------------------------------------------------------------------------------------------
[13:26:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:26:04    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[13:26:04    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[13:26:04    INFO]  -----------------------------------------------------------------------------------------------------------
[13:26:04    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[13:29:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:29:31    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[13:29:31    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[13:29:31    INFO]  -----------------------------------------------------------------------------------------------------------
[13:30:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:30:47    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[13:30:47    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[13:30:47    INFO]  -----------------------------------------------------------------------------------------------------------
[13:30:47    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_4/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:30:49    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:30:49    INFO]  - will validate that the bias-correction actually improved the result ...
[13:30:49    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:30:49    INFO]  - Will use (1) MLMs from the input chain: ANNZ_4,
[13:30:54    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_4/plots/
[13:31:05        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_4/plots output/PAUS_advanced7/regres/train/ANNZ_4/plots_biasCor_before
[13:31:05    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:31:05    INFO]  - Will use (1) MLMs from the input chain: ANNZ_4,
[13:31:09    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_4/plots/
[13:31:20        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_4/plots output/PAUS_advanced7/regres/train/ANNZ_4/plots_biasCor_after
[13:31:20    INFO]  - Got original [KS-test,N_poiss]: [0.0565198 , 5.77029] , after the bias-correction: [0.040871 , 4.5247] --> will KEEP the correction !

(13:31 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:31 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=530:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:31 INFO) 
[13:31:23    INFO]  -----------------------------------------------------
[13:31:23    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:31:23    INFO]  -----------------------------------------------------------------------------------------------------------
[13:31:24    INFO]  - starting ANNZ::Init()  ... 
[13:31:24    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_5/saveOpt.txt ...
[13:31:29    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:31:29    INFO] ----------------------------------------------------------------------------------------------------
[13:31:29    INFO]  - will book (ANNZ_5) method(BDT) with options: :NTrees=530:BoostType=Bagging:VarTransform=N,P
[13:31:29    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:31:29    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[13:31:29    INFO]      cuts (train):        ,
[13:31:29    INFO]      cuts (valid):       
[13:31:29    INFO]    - weights:            1
[13:31:29    INFO] ----------------------------------------------------------------------------------------------------
[13:31:30    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:32:27    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_5/ANNZ_5_weights/saveTrainOpt_ANNZ_5.txt ...
[13:32:32    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[13:32:32    INFO]  - Will gen. input-parameter errors ...
[13:32:33    INFO]  - starting ANNZ::loadReaders() ... 
[13:32:48    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[13:36:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:36:30    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[13:36:30    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[13:36:30    INFO]  -----------------------------------------------------------------------------------------------------------
[13:37:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:37:36    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[13:37:36    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[13:37:36    INFO]  -----------------------------------------------------------------------------------------------------------
[13:37:36    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[13:41:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:41:11    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[13:41:11    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[13:41:11    INFO]  -----------------------------------------------------------------------------------------------------------
[13:42:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:42:30    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[13:42:30    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[13:42:30    INFO]  -----------------------------------------------------------------------------------------------------------
[13:42:30    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:42:32    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:42:32    INFO]  - will try to derive a bias correction ... 
[13:42:32    INFO]  - will validate that training produced an XML file for later ... 
[13:42:32    INFO]  - starting ANNZ::loadReaders() ... 
[13:42:37    INFO]  - will validate that the training was not a complete failure ... 
[13:42:38    INFO]  - training seems to have been successful! will move on ...
[13:42:38    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[13:42:41    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:42:42    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[13:42:43    INFO] ----------------------------------------------------------------------------------------------------
[13:42:43    INFO]  - will book (ANNZ_5_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[13:42:43    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:42:43    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[13:42:43    INFO]    - weights:            1
[13:42:43    INFO] ----------------------------------------------------------------------------------------------------
[13:42:44    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:42:55    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_5 ... 
[13:42:55    INFO]  - Will gen. input-parameter errors ...
[13:42:57    INFO]  - starting ANNZ::loadReaders() ... 
[13:43:12    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[13:47:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:47:07    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[13:47:07    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[13:47:07    INFO]  -----------------------------------------------------------------------------------------------------------
[13:48:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:48:17    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[13:48:17    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[13:48:17    INFO]  -----------------------------------------------------------------------------------------------------------
[13:48:17    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[13:52:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:52:07    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[13:52:07    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[13:52:07    INFO]  -----------------------------------------------------------------------------------------------------------
[13:53:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:53:31    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[13:53:31    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[13:53:31    INFO]  -----------------------------------------------------------------------------------------------------------
[13:53:32    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_5/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[13:53:34    INFO]  - ending makeTreeRegClsOneMLM() ... 
[13:53:34    INFO]  - will validate that the bias-correction actually improved the result ...
[13:53:34    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:53:34    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
[13:53:39    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_5/plots/
[13:53:49        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_5/plots output/PAUS_advanced7/regres/train/ANNZ_5/plots_biasCor_before
[13:53:49    INFO]  - starting ANNZ::doMetricPlots() ... 
[13:53:49    INFO]  - Will use (1) MLMs from the input chain: ANNZ_5,
[13:53:54    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_5/plots/
[13:54:04        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_5/plots output/PAUS_advanced7/regres/train/ANNZ_5/plots_biasCor_after
[13:54:04    INFO]  - Got original [KS-test,N_poiss]: [0.056366 , 5.76957] , after the bias-correction: [0.0403324 , 4.50521] --> will KEEP the correction !

(13:54 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(13:54 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(13:54 INFO) 
[13:54:08    INFO]  -----------------------------------------------------
[13:54:08    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[13:54:08    INFO]  -----------------------------------------------------------------------------------------------------------
[13:54:09    INFO]  - starting ANNZ::Init()  ... 
[13:54:09    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_6/saveOpt.txt ...
[13:54:14    INFO]  - starting ANNZ::Train_singleReg() ... 
[13:54:14    INFO] ----------------------------------------------------------------------------------------------------
[13:54:14    INFO]  - will book (ANNZ_6) method(BDT) with options: :NTrees=500:BoostType=Bagging:VarTransform=N
[13:54:14    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[13:54:14    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[13:54:14    INFO]      cuts (train):        ,
[13:54:14    INFO]      cuts (valid):       
[13:54:14    INFO]    - weights:            1
[13:54:14    INFO] ----------------------------------------------------------------------------------------------------
[13:54:14    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[13:55:05    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_6/ANNZ_6_weights/saveTrainOpt_ANNZ_6.txt ...
[13:55:09    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[13:55:09    INFO]  - Will gen. input-parameter errors ...
[13:55:11    INFO]  - starting ANNZ::loadReaders() ... 
[13:55:23    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[13:57:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:57:35    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[13:57:35    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[13:57:35    INFO]  -----------------------------------------------------------------------------------------------------------
[13:58:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[13:58:15    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[13:58:15    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[13:58:15    INFO]  -----------------------------------------------------------------------------------------------------------
[13:58:15    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[14:00:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:00:30    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[14:00:30    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[14:00:30    INFO]  -----------------------------------------------------------------------------------------------------------
[14:01:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:01:19    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[14:01:19    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[14:01:19    INFO]  -----------------------------------------------------------------------------------------------------------
[14:01:19    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:01:22    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:01:22    INFO]  - will try to derive a bias correction ... 
[14:01:22    INFO]  - will validate that training produced an XML file for later ... 
[14:01:22    INFO]  - starting ANNZ::loadReaders() ... 
[14:01:27    INFO]  - will validate that the training was not a complete failure ... 
[14:01:27    INFO]  - training seems to have been successful! will move on ...
[14:01:27    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:01:30    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:01:31    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:01:32    INFO] ----------------------------------------------------------------------------------------------------
[14:01:32    INFO]  - will book (ANNZ_6_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:01:32    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:01:32    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[14:01:32    INFO]    - weights:            1
[14:01:32    INFO] ----------------------------------------------------------------------------------------------------
[14:01:33    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:01:45    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_6 ... 
[14:01:45    INFO]  - Will gen. input-parameter errors ...
[14:01:46    INFO]  - starting ANNZ::loadReaders() ... 
[14:01:59    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[14:04:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:04:31    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[14:04:31    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[14:04:31    INFO]  -----------------------------------------------------------------------------------------------------------
[14:05:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:05:16    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[14:05:16    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[14:05:16    INFO]  -----------------------------------------------------------------------------------------------------------
[14:05:16    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[14:07:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:07:48    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[14:07:48    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[14:07:48    INFO]  -----------------------------------------------------------------------------------------------------------
[14:08:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:08:44    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[14:08:44    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[14:08:44    INFO]  -----------------------------------------------------------------------------------------------------------
[14:08:44    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_6/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:08:46    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:08:46    INFO]  - will validate that the bias-correction actually improved the result ...
[14:08:46    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:08:46    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
[14:08:52    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_6/plots/
[14:09:02        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_6/plots output/PAUS_advanced7/regres/train/ANNZ_6/plots_biasCor_before
[14:09:02    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:09:02    INFO]  - Will use (1) MLMs from the input chain: ANNZ_6,
[14:09:07    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_6/plots/
[14:09:18        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_6/plots output/PAUS_advanced7/regres/train/ANNZ_6/plots_biasCor_after
[14:09:18    INFO]  - Got original [KS-test,N_poiss]: [0.0680178 , 5.78658] , after the bias-correction: [0.0481029 , 4.5104] --> will KEEP the correction !

(14:09 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:09 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:09 INFO) 
[14:09:22    INFO]  -----------------------------------------------------
[14:09:22    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:09:22    INFO]  -----------------------------------------------------------------------------------------------------------
[14:09:22    INFO]  - starting ANNZ::Init()  ... 
[14:09:23    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_7/saveOpt.txt ...
[14:09:28    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:09:28    INFO] ----------------------------------------------------------------------------------------------------
[14:09:28    INFO]  - will book (ANNZ_7) method(BDT) with options: :NTrees=490:BoostType=Bagging:VarTransform=N,P
[14:09:28    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:09:28    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[14:09:28    INFO]      cuts (train):        ,
[14:09:28    INFO]      cuts (valid):       
[14:09:28    INFO]    - weights:            1
[14:09:28    INFO] ----------------------------------------------------------------------------------------------------
[14:09:28    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:10:21    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_7/ANNZ_7_weights/saveTrainOpt_ANNZ_7.txt ...
[14:10:26    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[14:10:26    INFO]  - Will gen. input-parameter errors ...
[14:10:27    INFO]  - starting ANNZ::loadReaders() ... 
[14:10:41    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[14:14:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:14:03    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[14:14:03    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[14:14:03    INFO]  -----------------------------------------------------------------------------------------------------------
[14:15:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:15:03    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[14:15:03    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[14:15:03    INFO]  -----------------------------------------------------------------------------------------------------------
[14:15:03    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[14:18:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:18:21    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[14:18:21    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[14:18:21    INFO]  -----------------------------------------------------------------------------------------------------------
[14:19:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:19:33    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[14:19:33    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[14:19:33    INFO]  -----------------------------------------------------------------------------------------------------------
[14:19:33    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:19:35    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:19:35    INFO]  - will try to derive a bias correction ... 
[14:19:35    INFO]  - will validate that training produced an XML file for later ... 
[14:19:35    INFO]  - starting ANNZ::loadReaders() ... 
[14:19:40    INFO]  - will validate that the training was not a complete failure ... 
[14:19:41    INFO]  - training seems to have been successful! will move on ...
[14:19:41    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:19:44    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:19:45    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:19:46    INFO] ----------------------------------------------------------------------------------------------------
[14:19:46    INFO]  - will book (ANNZ_7_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:19:46    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:19:46    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[14:19:46    INFO]    - weights:            1
[14:19:46    INFO] ----------------------------------------------------------------------------------------------------
[14:19:46    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:19:59    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_7 ... 
[14:19:59    INFO]  - Will gen. input-parameter errors ...
[14:20:00    INFO]  - starting ANNZ::loadReaders() ... 
[14:20:14    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[14:23:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:23:59    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[14:23:59    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[14:23:59    INFO]  -----------------------------------------------------------------------------------------------------------
[14:25:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:25:08    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[14:25:08    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[14:25:08    INFO]  -----------------------------------------------------------------------------------------------------------
[14:25:08    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[14:28:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:28:52    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[14:28:52    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[14:28:52    INFO]  -----------------------------------------------------------------------------------------------------------
[14:30:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:30:14    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[14:30:14    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[14:30:14    INFO]  -----------------------------------------------------------------------------------------------------------
[14:30:14    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_7/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:30:16    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:30:16    INFO]  - will validate that the bias-correction actually improved the result ...
[14:30:16    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:30:16    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
[14:30:22    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_7/plots/
[14:30:32        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_7/plots output/PAUS_advanced7/regres/train/ANNZ_7/plots_biasCor_before
[14:30:32    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:30:32    INFO]  - Will use (1) MLMs from the input chain: ANNZ_7,
[14:30:37    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_7/plots/
[14:30:47        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_7/plots output/PAUS_advanced7/regres/train/ANNZ_7/plots_biasCor_after
[14:30:47    INFO]  - Got original [KS-test,N_poiss]: [0.056366 , 5.7711] , after the bias-correction: [0.0404094 , 4.40977] --> will KEEP the correction !

(14:30 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:30 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=410:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:30 INFO) 
[14:30:51    INFO]  -----------------------------------------------------
[14:30:51    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:30:51    INFO]  -----------------------------------------------------------------------------------------------------------
[14:30:52    INFO]  - starting ANNZ::Init()  ... 
[14:30:52    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_8/saveOpt.txt ...
[14:30:57    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:30:57    INFO] ----------------------------------------------------------------------------------------------------
[14:30:57    INFO]  - will book (ANNZ_8) method(BDT) with options: :NTrees=410:BoostType=AdaBoost:VarTransform=N
[14:30:57    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:30:57    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[14:30:57    INFO]      cuts (train):        ,
[14:30:57    INFO]      cuts (valid):       
[14:30:57    INFO]    - weights:            1
[14:30:57    INFO] ----------------------------------------------------------------------------------------------------
[14:30:57    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:31:25    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_8/ANNZ_8_weights/saveTrainOpt_ANNZ_8.txt ...
[14:31:27    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[14:31:27    INFO]  - Will gen. input-parameter errors ...
[14:31:28    INFO]  - starting ANNZ::loadReaders() ... 
[14:31:33    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[14:32:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:32:58    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[14:32:58    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[14:32:58    INFO]  -----------------------------------------------------------------------------------------------------------
[14:33:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:33:23    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[14:33:23    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[14:33:23    INFO]  -----------------------------------------------------------------------------------------------------------
[14:33:23    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[14:34:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:34:48    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[14:34:48    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[14:34:48    INFO]  -----------------------------------------------------------------------------------------------------------
[14:35:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:35:20    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[14:35:20    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[14:35:20    INFO]  -----------------------------------------------------------------------------------------------------------
[14:35:20    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:35:21    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:35:21    INFO]  - will try to derive a bias correction ... 
[14:35:21    INFO]  - will validate that training produced an XML file for later ... 
[14:35:21    INFO]  - starting ANNZ::loadReaders() ... 
[14:35:23    INFO]  - will validate that the training was not a complete failure ... 
[14:35:23    INFO]  - training seems to have been successful! will move on ...
[14:35:23    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:35:25    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:35:26    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:35:27    INFO] ----------------------------------------------------------------------------------------------------
[14:35:27    INFO]  - will book (ANNZ_8_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:35:27    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:35:27    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[14:35:27    INFO]    - weights:            1
[14:35:27    INFO] ----------------------------------------------------------------------------------------------------
[14:35:28    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:35:35    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_8 ... 
[14:35:35    INFO]  - Will gen. input-parameter errors ...
[14:35:36    INFO]  - starting ANNZ::loadReaders() ... 
[14:35:42    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[14:37:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:37:18    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[14:37:18    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[14:37:18    INFO]  -----------------------------------------------------------------------------------------------------------
[14:37:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:37:47    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[14:37:47    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[14:37:47    INFO]  -----------------------------------------------------------------------------------------------------------
[14:37:47    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[14:39:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:39:24    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[14:39:24    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[14:39:24    INFO]  -----------------------------------------------------------------------------------------------------------
[14:40:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:40:01    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[14:40:01    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[14:40:01    INFO]  -----------------------------------------------------------------------------------------------------------
[14:40:01    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_8/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:40:02    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:40:02    INFO]  - will validate that the bias-correction actually improved the result ...
[14:40:02    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:40:02    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
Warning in <Fit>: Fit data is empty 
[14:40:07    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_8/plots/
[14:40:18        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_8/plots output/PAUS_advanced7/regres/train/ANNZ_8/plots_biasCor_before
[14:40:18    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:40:18    INFO]  - Will use (1) MLMs from the input chain: ANNZ_8,
[14:40:22    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_8/plots/
[14:40:33        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_8/plots output/PAUS_advanced7/regres/train/ANNZ_8/plots_biasCor_after
[14:40:33    INFO]  - Got original [KS-test,N_poiss]: [0.0860136 , 5.56154] , after the bias-correction: [0.0488263 , 4.49724] --> will KEEP the correction !

(14:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:40 INFO) 
[14:40:36    INFO]  -----------------------------------------------------
[14:40:36    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:40:36    INFO]  -----------------------------------------------------------------------------------------------------------
[14:40:36    INFO]  - starting ANNZ::Init()  ... 
[14:40:37    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_9/saveOpt.txt ...
[14:40:42    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:40:42    INFO] ----------------------------------------------------------------------------------------------------
[14:40:42    INFO]  - will book (ANNZ_9) method(BDT) with options: :NTrees=500:BoostType=Bagging:VarTransform=N
[14:40:42    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:40:42    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[14:40:42    INFO]      cuts (train):        ,
[14:40:42    INFO]      cuts (valid):       
[14:40:42    INFO]    - weights:            1
[14:40:42    INFO] ----------------------------------------------------------------------------------------------------
[14:40:42    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:41:33    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_9/ANNZ_9_weights/saveTrainOpt_ANNZ_9.txt ...
[14:41:38    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[14:41:38    INFO]  - Will gen. input-parameter errors ...
[14:41:39    INFO]  - starting ANNZ::loadReaders() ... 
[14:41:52    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[14:44:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:44:04    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[14:44:04    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[14:44:04    INFO]  -----------------------------------------------------------------------------------------------------------
[14:44:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:44:44    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[14:44:44    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[14:44:44    INFO]  -----------------------------------------------------------------------------------------------------------
[14:44:44    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[14:46:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:46:56    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[14:46:56    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[14:46:56    INFO]  -----------------------------------------------------------------------------------------------------------
[14:47:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:47:45    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[14:47:45    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[14:47:45    INFO]  -----------------------------------------------------------------------------------------------------------
[14:47:45    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:47:47    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:47:47    INFO]  - will try to derive a bias correction ... 
[14:47:47    INFO]  - will validate that training produced an XML file for later ... 
[14:47:47    INFO]  - starting ANNZ::loadReaders() ... 
[14:47:52    INFO]  - will validate that the training was not a complete failure ... 
[14:47:52    INFO]  - training seems to have been successful! will move on ...
[14:47:52    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[14:47:56    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:47:57    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[14:47:58    INFO] ----------------------------------------------------------------------------------------------------
[14:47:58    INFO]  - will book (ANNZ_9_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[14:47:58    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:47:58    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[14:47:58    INFO]    - weights:            1
[14:47:58    INFO] ----------------------------------------------------------------------------------------------------
[14:47:58    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:48:10    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_9 ... 
[14:48:10    INFO]  - Will gen. input-parameter errors ...
[14:48:12    INFO]  - starting ANNZ::loadReaders() ... 
[14:48:25    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[14:51:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:51:01    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[14:51:01    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[14:51:01    INFO]  -----------------------------------------------------------------------------------------------------------
[14:51:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:51:48    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[14:51:48    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[14:51:48    INFO]  -----------------------------------------------------------------------------------------------------------
[14:51:48    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[14:54:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:54:22    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[14:54:22    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[14:54:22    INFO]  -----------------------------------------------------------------------------------------------------------
[14:55:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[14:55:18    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[14:55:18    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[14:55:18    INFO]  -----------------------------------------------------------------------------------------------------------
[14:55:18    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_9/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[14:55:20    INFO]  - ending makeTreeRegClsOneMLM() ... 
[14:55:20    INFO]  - will validate that the bias-correction actually improved the result ...
[14:55:20    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:55:20    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
[14:55:25    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_9/plots/
[14:55:36        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_9/plots output/PAUS_advanced7/regres/train/ANNZ_9/plots_biasCor_before
[14:55:36    INFO]  - starting ANNZ::doMetricPlots() ... 
[14:55:36    INFO]  - Will use (1) MLMs from the input chain: ANNZ_9,
[14:55:41    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_9/plots/
[14:55:51        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_9/plots output/PAUS_advanced7/regres/train/ANNZ_9/plots_biasCor_after
[14:55:51    INFO]  - Got original [KS-test,N_poiss]: [0.0680178 , 5.78658] , after the bias-correction: [0.0481029 , 4.5104] --> will KEEP the correction !

(14:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(14:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=520:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(14:55 INFO) 
[14:55:55    INFO]  -----------------------------------------------------
[14:55:55    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[14:55:55    INFO]  -----------------------------------------------------------------------------------------------------------
[14:55:55    INFO]  - starting ANNZ::Init()  ... 
[14:55:56    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_10/saveOpt.txt ...
[14:56:01    INFO]  - starting ANNZ::Train_singleReg() ... 
[14:56:01    INFO] ----------------------------------------------------------------------------------------------------
[14:56:01    INFO]  - will book (ANNZ_10) method(BDT) with options: :NTrees=520:BoostType=Bagging:VarTransform=N,P
[14:56:01    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[14:56:01    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[14:56:01    INFO]      cuts (train):        ,
[14:56:01    INFO]      cuts (valid):       
[14:56:01    INFO]    - weights:            1
[14:56:01    INFO] ----------------------------------------------------------------------------------------------------
[14:56:01    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[14:56:57    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_10/ANNZ_10_weights/saveTrainOpt_ANNZ_10.txt ...
[14:57:01    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[14:57:01    INFO]  - Will gen. input-parameter errors ...
[14:57:03    INFO]  - starting ANNZ::loadReaders() ... 
[14:57:17    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[15:00:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:00:48    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[15:00:48    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[15:00:48    INFO]  -----------------------------------------------------------------------------------------------------------
[15:01:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:01:52    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[15:01:52    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[15:01:52    INFO]  -----------------------------------------------------------------------------------------------------------
[15:01:52    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[15:05:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:05:21    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[15:05:21    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[15:05:21    INFO]  -----------------------------------------------------------------------------------------------------------
[15:06:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:06:38    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[15:06:38    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[15:06:38    INFO]  -----------------------------------------------------------------------------------------------------------
[15:06:38    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:06:40    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:06:40    INFO]  - will try to derive a bias correction ... 
[15:06:40    INFO]  - will validate that training produced an XML file for later ... 
[15:06:40    INFO]  - starting ANNZ::loadReaders() ... 
[15:06:45    INFO]  - will validate that the training was not a complete failure ... 
[15:06:46    INFO]  - training seems to have been successful! will move on ...
[15:06:46    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:06:49    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:06:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:06:51    INFO] ----------------------------------------------------------------------------------------------------
[15:06:51    INFO]  - will book (ANNZ_10_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[15:06:51    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:06:51    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[15:06:51    INFO]    - weights:            1
[15:06:51    INFO] ----------------------------------------------------------------------------------------------------
[15:06:52    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:07:03    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_10 ... 
[15:07:03    INFO]  - Will gen. input-parameter errors ...
[15:07:05    INFO]  - starting ANNZ::loadReaders() ... 
[15:07:19    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[15:11:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:11:05    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[15:11:05    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[15:11:05    INFO]  -----------------------------------------------------------------------------------------------------------
[15:12:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:12:13    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[15:12:13    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[15:12:13    INFO]  -----------------------------------------------------------------------------------------------------------
[15:12:13    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[15:15:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:15:56    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[15:15:56    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[15:15:56    INFO]  -----------------------------------------------------------------------------------------------------------
[15:17:20    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:17:20    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[15:17:20    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[15:17:20    INFO]  -----------------------------------------------------------------------------------------------------------
[15:17:20    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_10/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:17:22    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:17:22    INFO]  - will validate that the bias-correction actually improved the result ...
[15:17:22    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:17:22    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
[15:17:28    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_10/plots/
[15:17:38        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_10/plots output/PAUS_advanced7/regres/train/ANNZ_10/plots_biasCor_before
[15:17:38    INFO]  - starting ANNZ::doMetricPlots() ... 
[15:17:38    INFO]  - Will use (1) MLMs from the input chain: ANNZ_10,
[15:17:42    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_10/plots/
[15:17:53        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_10/plots output/PAUS_advanced7/regres/train/ANNZ_10/plots_biasCor_after
[15:17:53    INFO]  - Got original [KS-test,N_poiss]: [0.0564429 , 5.76323] , after the bias-correction: [0.0401016 , 4.47426] --> will KEEP the correction !

(15:17 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(15:17 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=790:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(15:17 INFO) 
[15:17:57    INFO]  -----------------------------------------------------
[15:17:57    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[15:17:57    INFO]  -----------------------------------------------------------------------------------------------------------
[15:17:57    INFO]  - starting ANNZ::Init()  ... 
[15:17:58    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_11/saveOpt.txt ...
[15:18:02    INFO]  - starting ANNZ::Train_singleReg() ... 
[15:18:03    INFO] ----------------------------------------------------------------------------------------------------
[15:18:03    INFO]  - will book (ANNZ_11) method(BDT) with options: :NTrees=790:BoostType=Bagging:VarTransform=N,P
[15:18:03    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:18:03    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[15:18:03    INFO]      cuts (train):        ,
[15:18:03    INFO]      cuts (valid):       
[15:18:03    INFO]    - weights:            1
[15:18:03    INFO] ----------------------------------------------------------------------------------------------------
[15:18:03    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:19:29    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_11/ANNZ_11_weights/saveTrainOpt_ANNZ_11.txt ...
[15:19:36    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[15:19:36    INFO]  - Will gen. input-parameter errors ...
[15:19:38    INFO]  - starting ANNZ::loadReaders() ... 
[15:20:00    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[15:27:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:27:46    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[15:27:46    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[15:27:46    INFO]  -----------------------------------------------------------------------------------------------------------
[15:30:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:30:07    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[15:30:07    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[15:30:07    INFO]  -----------------------------------------------------------------------------------------------------------
[15:30:07    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[15:37:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:37:42    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[15:37:42    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[15:37:42    INFO]  -----------------------------------------------------------------------------------------------------------
[15:40:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:40:28    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[15:40:28    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[15:40:28    INFO]  -----------------------------------------------------------------------------------------------------------
[15:40:31    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[15:40:35    INFO]  - ending makeTreeRegClsOneMLM() ... 
[15:40:35    INFO]  - will try to derive a bias correction ... 
[15:40:35    INFO]  - will validate that training produced an XML file for later ... 
[15:40:35    INFO]  - starting ANNZ::loadReaders() ... 
[15:40:43    INFO]  - will validate that the training was not a complete failure ... 
[15:40:43    INFO]  - training seems to have been successful! will move on ...
[15:40:43    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[15:40:49    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:40:50    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[15:40:52    INFO] ----------------------------------------------------------------------------------------------------
[15:40:52    INFO]  - will book (ANNZ_11_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[15:40:52    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[15:40:52    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[15:40:52    INFO]    - weights:            1
[15:40:52    INFO] ----------------------------------------------------------------------------------------------------
[15:40:52    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[15:41:05    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_11 ... 
[15:41:05    INFO]  - Will gen. input-parameter errors ...
[15:41:08    INFO]  - starting ANNZ::loadReaders() ... 
[15:41:31    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[15:49:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:49:45    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[15:49:45    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[15:49:45    INFO]  -----------------------------------------------------------------------------------------------------------
[15:52:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[15:52:13    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[15:52:13    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[15:52:13    INFO]  -----------------------------------------------------------------------------------------------------------
[15:52:13    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[16:00:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:00:11    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:00:11    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[16:00:11    INFO]  -----------------------------------------------------------------------------------------------------------
[16:03:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:03:07    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:03:07    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[16:03:07    INFO]  -----------------------------------------------------------------------------------------------------------
[16:03:09    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_11/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:03:12    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:03:12    INFO]  - will validate that the bias-correction actually improved the result ...
[16:03:13    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:03:13    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
[16:03:18    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_11/plots/
[16:03:29        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_11/plots output/PAUS_advanced7/regres/train/ANNZ_11/plots_biasCor_before
[16:03:29    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:03:29    INFO]  - Will use (1) MLMs from the input chain: ANNZ_11,
[16:03:33    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_11/plots/
[16:03:44        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_11/plots output/PAUS_advanced7/regres/train/ANNZ_11/plots_biasCor_after
[16:03:44    INFO]  - Got original [KS-test,N_poiss]: [0.0563349 , 5.74358] , after the bias-correction: [0.0398335 , 4.42101] --> will KEEP the correction !

(16:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=AdaBoost:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:03 INFO) 
[16:03:50    INFO]  -----------------------------------------------------
[16:03:50    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:03:50    INFO]  -----------------------------------------------------------------------------------------------------------
[16:03:51    INFO]  - starting ANNZ::Init()  ... 
[16:03:52    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_12/saveOpt.txt ...
[16:04:06    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:04:06    INFO] ----------------------------------------------------------------------------------------------------
[16:04:06    INFO]  - will book (ANNZ_12) method(BDT) with options: :NTrees=490:BoostType=AdaBoost:VarTransform=P
[16:04:06    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:04:06    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[16:04:06    INFO]      cuts (train):        ,
[16:04:06    INFO]      cuts (valid):       
[16:04:06    INFO]    - weights:            1
[16:04:06    INFO] ----------------------------------------------------------------------------------------------------
[16:04:06    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:04:40    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_12/ANNZ_12_weights/saveTrainOpt_ANNZ_12.txt ...
[16:04:43    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[16:04:43    INFO]  - Will gen. input-parameter errors ...
[16:04:44    INFO]  - starting ANNZ::loadReaders() ... 
[16:04:51    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[16:07:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:07:03    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:07:03    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[16:07:03    INFO]  -----------------------------------------------------------------------------------------------------------
[16:07:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:07:42    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:07:42    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[16:07:42    INFO]  -----------------------------------------------------------------------------------------------------------
[16:07:42    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[16:09:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:09:53    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:09:53    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[16:09:53    INFO]  -----------------------------------------------------------------------------------------------------------
[16:10:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:10:42    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:10:42    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[16:10:42    INFO]  -----------------------------------------------------------------------------------------------------------
[16:10:43    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:10:44    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:10:44    INFO]  - will try to derive a bias correction ... 
[16:10:44    INFO]  - will validate that training produced an XML file for later ... 
[16:10:44    INFO]  - starting ANNZ::loadReaders() ... 
[16:10:46    INFO]  - will validate that the training was not a complete failure ... 
[16:10:46    INFO]  - training seems to have been successful! will move on ...
[16:10:46    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:10:49    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:10:51    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:10:52    INFO] ----------------------------------------------------------------------------------------------------
[16:10:52    INFO]  - will book (ANNZ_12_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:10:52    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:10:52    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[16:10:52    INFO]    - weights:            1
[16:10:52    INFO] ----------------------------------------------------------------------------------------------------
[16:10:52    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:11:01    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_12 ... 
[16:11:01    INFO]  - Will gen. input-parameter errors ...
[16:11:03    INFO]  - starting ANNZ::loadReaders() ... 
[16:11:09    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[16:13:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:13:10    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:13:10    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[16:13:10    INFO]  -----------------------------------------------------------------------------------------------------------
[16:13:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:13:46    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:13:46    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[16:13:46    INFO]  -----------------------------------------------------------------------------------------------------------
[16:13:47    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[16:15:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:15:47    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:15:47    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[16:15:47    INFO]  -----------------------------------------------------------------------------------------------------------
[16:16:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:16:33    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:16:33    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[16:16:33    INFO]  -----------------------------------------------------------------------------------------------------------
[16:16:33    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_12/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:16:35    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:16:35    INFO]  - will validate that the bias-correction actually improved the result ...
[16:16:35    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:16:35    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
[16:16:40    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_12/plots/
[16:16:50        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_12/plots output/PAUS_advanced7/regres/train/ANNZ_12/plots_biasCor_before
[16:16:50    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:16:50    INFO]  - Will use (1) MLMs from the input chain: ANNZ_12,
[16:16:55    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_12/plots/
[16:17:05        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_12/plots output/PAUS_advanced7/regres/train/ANNZ_12/plots_biasCor_after
[16:17:05    INFO]  - Got original [KS-test,N_poiss]: [0.0765505 , 5.42248] , after the bias-correction: [0.0429384 , 4.21045] --> will KEEP the correction !

(16:17 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:17 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:17 INFO) 
[16:17:09    INFO]  -----------------------------------------------------
[16:17:09    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:17:09    INFO]  -----------------------------------------------------------------------------------------------------------
[16:17:11    INFO]  - starting ANNZ::Init()  ... 
[16:17:12    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_13/saveOpt.txt ...
[16:17:25    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:17:26    INFO] ----------------------------------------------------------------------------------------------------
[16:17:26    INFO]  - will book (ANNZ_13) method(BDT) with options: :NTrees=340:BoostType=AdaBoost:VarTransform=N,P
[16:17:26    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:17:26    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[16:17:26    INFO]      cuts (train):        ,
[16:17:26    INFO]      cuts (valid):       
[16:17:26    INFO]    - weights:            1
[16:17:26    INFO] ----------------------------------------------------------------------------------------------------
[16:17:26    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:17:49    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_13/ANNZ_13_weights/saveTrainOpt_ANNZ_13.txt ...
[16:17:52    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[16:17:52    INFO]  - Will gen. input-parameter errors ...
[16:17:53    INFO]  - starting ANNZ::loadReaders() ... 
[16:17:58    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[16:19:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:19:50    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:19:50    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[16:19:50    INFO]  -----------------------------------------------------------------------------------------------------------
[16:20:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:20:22    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:20:22    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[16:20:22    INFO]  -----------------------------------------------------------------------------------------------------------
[16:20:22    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[16:22:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:22:14    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:22:14    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[16:22:14    INFO]  -----------------------------------------------------------------------------------------------------------
[16:22:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:22:56    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:22:56    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[16:22:56    INFO]  -----------------------------------------------------------------------------------------------------------
[16:22:56    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:22:57    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:22:57    INFO]  - will try to derive a bias correction ... 
[16:22:57    INFO]  - will validate that training produced an XML file for later ... 
[16:22:57    INFO]  - starting ANNZ::loadReaders() ... 
[16:22:58    INFO]  - will validate that the training was not a complete failure ... 
[16:22:58    INFO]  - training seems to have been successful! will move on ...
[16:22:58    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:23:01    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:23:03    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:23:04    INFO] ----------------------------------------------------------------------------------------------------
[16:23:04    INFO]  - will book (ANNZ_13_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:23:04    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:23:04    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[16:23:04    INFO]    - weights:            1
[16:23:04    INFO] ----------------------------------------------------------------------------------------------------
[16:23:04    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:23:13    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_13 ... 
[16:23:13    INFO]  - Will gen. input-parameter errors ...
[16:23:14    INFO]  - starting ANNZ::loadReaders() ... 
[16:23:20    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[16:25:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:25:33    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:25:33    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[16:25:33    INFO]  -----------------------------------------------------------------------------------------------------------
[16:26:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:26:12    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:26:12    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[16:26:12    INFO]  -----------------------------------------------------------------------------------------------------------
[16:26:12    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[16:28:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:28:24    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:28:24    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[16:28:24    INFO]  -----------------------------------------------------------------------------------------------------------
[16:29:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:29:15    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:29:15    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[16:29:15    INFO]  -----------------------------------------------------------------------------------------------------------
[16:29:18    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_13/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:29:20    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:29:20    INFO]  - will validate that the bias-correction actually improved the result ...
[16:29:20    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:29:20    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
[16:29:25    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_13/plots/
[16:29:36        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_13/plots output/PAUS_advanced7/regres/train/ANNZ_13/plots_biasCor_before
[16:29:36    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:29:36    INFO]  - Will use (1) MLMs from the input chain: ANNZ_13,
[16:29:40    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_13/plots/
[16:29:51        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_13/plots output/PAUS_advanced7/regres/train/ANNZ_13/plots_biasCor_after
[16:29:51    INFO]  - Got original [KS-test,N_poiss]: [0.109849 , 5.9895] , after the bias-correction: [0.0542095 , 5.04649] --> will KEEP the correction !

(16:29 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:29 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:29 INFO) 
[16:29:55    INFO]  -----------------------------------------------------
[16:29:55    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:29:55    INFO]  -----------------------------------------------------------------------------------------------------------
[16:29:56    INFO]  - starting ANNZ::Init()  ... 
[16:29:57    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_14/saveOpt.txt ...
[16:30:10    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:30:11    INFO] ----------------------------------------------------------------------------------------------------
[16:30:11    INFO]  - will book (ANNZ_14) method(BDT) with options: :NTrees=450:BoostType=Bagging:VarTransform=N
[16:30:11    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:30:11    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[16:30:11    INFO]      cuts (train):        ,
[16:30:11    INFO]      cuts (valid):       
[16:30:11    INFO]    - weights:            1
[16:30:11    INFO] ----------------------------------------------------------------------------------------------------
[16:30:11    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:30:56    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_14/ANNZ_14_weights/saveTrainOpt_ANNZ_14.txt ...
[16:31:01    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[16:31:01    INFO]  - Will gen. input-parameter errors ...
[16:31:04    INFO]  - starting ANNZ::loadReaders() ... 
[16:31:14    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[16:33:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:33:12    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:33:12    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[16:33:12    INFO]  -----------------------------------------------------------------------------------------------------------
[16:33:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:33:48    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:33:48    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[16:33:48    INFO]  -----------------------------------------------------------------------------------------------------------
[16:33:48    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[16:35:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:35:46    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:35:46    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[16:35:46    INFO]  -----------------------------------------------------------------------------------------------------------
[16:36:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:36:29    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:36:29    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[16:36:29    INFO]  -----------------------------------------------------------------------------------------------------------
[16:36:30    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:36:32    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:36:32    INFO]  - will try to derive a bias correction ... 
[16:36:32    INFO]  - will validate that training produced an XML file for later ... 
[16:36:32    INFO]  - starting ANNZ::loadReaders() ... 
[16:36:36    INFO]  - will validate that the training was not a complete failure ... 
[16:36:36    INFO]  - training seems to have been successful! will move on ...
[16:36:36    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:36:41    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:36:42    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:36:43    INFO] ----------------------------------------------------------------------------------------------------
[16:36:43    INFO]  - will book (ANNZ_14_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:36:43    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:36:43    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[16:36:43    INFO]    - weights:            1
[16:36:43    INFO] ----------------------------------------------------------------------------------------------------
[16:36:44    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:36:54    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_14 ... 
[16:36:54    INFO]  - Will gen. input-parameter errors ...
[16:36:56    INFO]  - starting ANNZ::loadReaders() ... 
[16:37:08    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[16:39:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:39:26    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:39:26    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[16:39:26    INFO]  -----------------------------------------------------------------------------------------------------------
[16:40:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:40:08    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:40:08    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[16:40:08    INFO]  -----------------------------------------------------------------------------------------------------------
[16:40:08    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[16:42:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:42:27    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:42:27    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[16:42:27    INFO]  -----------------------------------------------------------------------------------------------------------
[16:43:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:43:18    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:43:18    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[16:43:18    INFO]  -----------------------------------------------------------------------------------------------------------
[16:43:18    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_14/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:43:20    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:43:20    INFO]  - will validate that the bias-correction actually improved the result ...
[16:43:20    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:43:20    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
[16:43:26    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_14/plots/
[16:43:36        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_14/plots output/PAUS_advanced7/regres/train/ANNZ_14/plots_biasCor_before
[16:43:36    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:43:36    INFO]  - Will use (1) MLMs from the input chain: ANNZ_14,
[16:43:41    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_14/plots/
[16:43:51        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_14/plots output/PAUS_advanced7/regres/train/ANNZ_14/plots_biasCor_after
[16:43:51    INFO]  - Got original [KS-test,N_poiss]: [0.0679408 , 5.77319] , after the bias-correction: [0.0488722 , 4.67654] --> will KEEP the correction !

(16:43 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:43 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=270:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:43 INFO) 
[16:43:56    INFO]  -----------------------------------------------------
[16:43:56    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:43:56    INFO]  -----------------------------------------------------------------------------------------------------------
[16:43:57    INFO]  - starting ANNZ::Init()  ... 
[16:43:58    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_15/saveOpt.txt ...
[16:44:12    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:44:12    INFO] ----------------------------------------------------------------------------------------------------
[16:44:12    INFO]  - will book (ANNZ_15) method(BDT) with options: :NTrees=270:BoostType=AdaBoost:VarTransform=N,P
[16:44:12    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:44:12    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[16:44:12    INFO]      cuts (train):        ,
[16:44:12    INFO]      cuts (valid):       
[16:44:12    INFO]    - weights:            1
[16:44:12    INFO] ----------------------------------------------------------------------------------------------------
[16:44:13    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:44:32    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_15/ANNZ_15_weights/saveTrainOpt_ANNZ_15.txt ...
[16:44:34    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[16:44:34    INFO]  - Will gen. input-parameter errors ...
[16:44:35    INFO]  - starting ANNZ::loadReaders() ... 
[16:44:39    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[16:46:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:46:17    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:46:17    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[16:46:17    INFO]  -----------------------------------------------------------------------------------------------------------
[16:46:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:46:45    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:46:45    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[16:46:45    INFO]  -----------------------------------------------------------------------------------------------------------
[16:46:45    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[16:48:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:48:25    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:48:25    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[16:48:25    INFO]  -----------------------------------------------------------------------------------------------------------
[16:49:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:49:02    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:49:02    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[16:49:02    INFO]  -----------------------------------------------------------------------------------------------------------
[16:49:02    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:49:03    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:49:03    INFO]  - will try to derive a bias correction ... 
[16:49:03    INFO]  - will validate that training produced an XML file for later ... 
[16:49:03    INFO]  - starting ANNZ::loadReaders() ... 
[16:49:04    INFO]  - will validate that the training was not a complete failure ... 
[16:49:04    INFO]  - training seems to have been successful! will move on ...
[16:49:04    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[16:49:07    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:49:08    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[16:49:09    INFO] ----------------------------------------------------------------------------------------------------
[16:49:09    INFO]  - will book (ANNZ_15_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[16:49:09    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:49:09    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[16:49:09    INFO]    - weights:            1
[16:49:09    INFO] ----------------------------------------------------------------------------------------------------
[16:49:09    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:49:18    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_15 ... 
[16:49:18    INFO]  - Will gen. input-parameter errors ...
[16:49:19    INFO]  - starting ANNZ::loadReaders() ... 
[16:49:24    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[16:51:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:51:31    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:51:31    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[16:51:31    INFO]  -----------------------------------------------------------------------------------------------------------
[16:52:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:52:08    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:52:08    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[16:52:08    INFO]  -----------------------------------------------------------------------------------------------------------
[16:52:08    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[16:54:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:54:14    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:54:14    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[16:54:14    INFO]  -----------------------------------------------------------------------------------------------------------
[16:55:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:55:01    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:55:01    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[16:55:01    INFO]  -----------------------------------------------------------------------------------------------------------
[16:55:02    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_15/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[16:55:03    INFO]  - ending makeTreeRegClsOneMLM() ... 
[16:55:03    INFO]  - will validate that the bias-correction actually improved the result ...
[16:55:03    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:55:03    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
[16:55:08    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_15/plots/
[16:55:18        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_15/plots output/PAUS_advanced7/regres/train/ANNZ_15/plots_biasCor_before
[16:55:18    INFO]  - starting ANNZ::doMetricPlots() ... 
[16:55:18    INFO]  - Will use (1) MLMs from the input chain: ANNZ_15,
[16:55:23    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_15/plots/
[16:55:33        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_15/plots output/PAUS_advanced7/regres/train/ANNZ_15/plots_biasCor_after
[16:55:33    INFO]  - Got original [KS-test,N_poiss]: [0.109387 , 5.98927] , after the bias-correction: [0.0537943 , 4.89416] --> will KEEP the correction !

(16:55 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(16:55 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(16:55 INFO) 
[16:55:37    INFO]  -----------------------------------------------------
[16:55:37    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[16:55:37    INFO]  -----------------------------------------------------------------------------------------------------------
[16:55:38    INFO]  - starting ANNZ::Init()  ... 
[16:55:39    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_16/saveOpt.txt ...
[16:55:53    INFO]  - starting ANNZ::Train_singleReg() ... 
[16:55:53    INFO] ----------------------------------------------------------------------------------------------------
[16:55:53    INFO]  - will book (ANNZ_16) method(BDT) with options: :NTrees=370:BoostType=Bagging:VarTransform=N
[16:55:53    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[16:55:53    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[16:55:53    INFO]      cuts (train):        ,
[16:55:53    INFO]      cuts (valid):       
[16:55:53    INFO]    - weights:            1
[16:55:53    INFO] ----------------------------------------------------------------------------------------------------
[16:55:54    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[16:56:32    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_16/ANNZ_16_weights/saveTrainOpt_ANNZ_16.txt ...
[16:56:36    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[16:56:36    INFO]  - Will gen. input-parameter errors ...
[16:56:38    INFO]  - starting ANNZ::loadReaders() ... 
[16:56:47    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[16:58:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:58:25    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:58:25    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[16:58:25    INFO]  -----------------------------------------------------------------------------------------------------------
[16:58:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[16:58:54    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[16:58:54    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[16:58:54    INFO]  -----------------------------------------------------------------------------------------------------------
[16:58:54    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[17:00:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:00:33    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[17:00:33    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[17:00:33    INFO]  -----------------------------------------------------------------------------------------------------------
[17:01:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:01:09    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[17:01:09    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[17:01:09    INFO]  -----------------------------------------------------------------------------------------------------------
[17:01:09    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:01:11    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:01:11    INFO]  - will try to derive a bias correction ... 
[17:01:11    INFO]  - will validate that training produced an XML file for later ... 
[17:01:11    INFO]  - starting ANNZ::loadReaders() ... 
[17:01:15    INFO]  - will validate that the training was not a complete failure ... 
[17:01:15    INFO]  - training seems to have been successful! will move on ...
[17:01:15    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[17:01:19    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:01:20    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:01:21    INFO] ----------------------------------------------------------------------------------------------------
[17:01:21    INFO]  - will book (ANNZ_16_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[17:01:21    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:01:21    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[17:01:21    INFO]    - weights:            1
[17:01:21    INFO] ----------------------------------------------------------------------------------------------------
[17:01:22    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:01:32    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_16 ... 
[17:01:32    INFO]  - Will gen. input-parameter errors ...
[17:01:34    INFO]  - starting ANNZ::loadReaders() ... 
[17:01:43    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[17:03:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:03:30    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[17:03:30    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[17:03:30    INFO]  -----------------------------------------------------------------------------------------------------------
[17:04:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:04:02    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[17:04:02    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[17:04:02    INFO]  -----------------------------------------------------------------------------------------------------------
[17:04:02    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[17:05:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:05:50    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[17:05:50    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[17:05:50    INFO]  -----------------------------------------------------------------------------------------------------------
[17:06:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:06:29    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[17:06:29    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[17:06:29    INFO]  -----------------------------------------------------------------------------------------------------------
[17:06:29    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_16/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:06:31    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:06:31    INFO]  - will validate that the bias-correction actually improved the result ...
[17:06:31    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:06:31    INFO]  - Will use (1) MLMs from the input chain: ANNZ_16,
[17:06:36    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_16/plots/
[17:06:47        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_16/plots output/PAUS_advanced7/regres/train/ANNZ_16/plots_biasCor_before
[17:06:47    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:06:47    INFO]  - Will use (1) MLMs from the input chain: ANNZ_16,
[17:06:51    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_16/plots/
[17:07:02        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_16/plots output/PAUS_advanced7/regres/train/ANNZ_16/plots_biasCor_after
[17:07:02    INFO]  - Got original [KS-test,N_poiss]: [0.0674793 , 5.78074] , after the bias-correction: [0.0466411 , 4.50553] --> will KEEP the correction !

(17:07 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(17:07 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=270:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(17:07 INFO) 
[17:07:07    INFO]  -----------------------------------------------------
[17:07:07    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[17:07:07    INFO]  -----------------------------------------------------------------------------------------------------------
[17:07:08    INFO]  - starting ANNZ::Init()  ... 
[17:07:09    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_17/saveOpt.txt ...
[17:07:23    INFO]  - starting ANNZ::Train_singleReg() ... 
[17:07:23    INFO] ----------------------------------------------------------------------------------------------------
[17:07:23    INFO]  - will book (ANNZ_17) method(BDT) with options: :NTrees=270:BoostType=AdaBoost:VarTransform=N
[17:07:23    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:07:23    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[17:07:23    INFO]      cuts (train):        ,
[17:07:23    INFO]      cuts (valid):       
[17:07:23    INFO]    - weights:            1
[17:07:23    INFO] ----------------------------------------------------------------------------------------------------
[17:07:23    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:07:42    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_17/ANNZ_17_weights/saveTrainOpt_ANNZ_17.txt ...
[17:07:45    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[17:07:45    INFO]  - Will gen. input-parameter errors ...
[17:07:46    INFO]  - starting ANNZ::loadReaders() ... 
[17:07:50    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[17:08:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:08:50    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[17:08:50    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[17:08:50    INFO]  -----------------------------------------------------------------------------------------------------------
[17:09:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:09:08    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[17:09:08    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[17:09:08    INFO]  -----------------------------------------------------------------------------------------------------------
[17:09:08    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[17:10:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:10:10    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[17:10:10    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[17:10:10    INFO]  -----------------------------------------------------------------------------------------------------------
[17:10:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:10:33    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[17:10:33    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[17:10:33    INFO]  -----------------------------------------------------------------------------------------------------------
[17:10:33    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:10:34    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:10:34    INFO]  - will try to derive a bias correction ... 
[17:10:34    INFO]  - will validate that training produced an XML file for later ... 
[17:10:34    INFO]  - starting ANNZ::loadReaders() ... 
[17:10:36    INFO]  - will validate that the training was not a complete failure ... 
[17:10:36    INFO]  - training seems to have been successful! will move on ...
[17:10:36    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[17:10:39    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:10:40    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:10:41    INFO] ----------------------------------------------------------------------------------------------------
[17:10:41    INFO]  - will book (ANNZ_17_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[17:10:41    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:10:41    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[17:10:41    INFO]    - weights:            1
[17:10:41    INFO] ----------------------------------------------------------------------------------------------------
[17:10:41    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:10:49    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_17 ... 
[17:10:49    INFO]  - Will gen. input-parameter errors ...
[17:10:50    INFO]  - starting ANNZ::loadReaders() ... 
[17:10:55    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[17:12:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:12:21    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[17:12:21    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[17:12:21    INFO]  -----------------------------------------------------------------------------------------------------------
[17:12:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:12:47    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[17:12:47    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[17:12:47    INFO]  -----------------------------------------------------------------------------------------------------------
[17:12:47    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[17:14:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:14:14    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[17:14:14    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[17:14:14    INFO]  -----------------------------------------------------------------------------------------------------------
[17:14:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:14:47    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[17:14:47    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[17:14:47    INFO]  -----------------------------------------------------------------------------------------------------------
[17:14:47    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_17/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:14:49    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:14:49    INFO]  - will validate that the bias-correction actually improved the result ...
[17:14:49    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:14:49    INFO]  - Will use (1) MLMs from the input chain: ANNZ_17,
Warning in <Fit>: Fit data is empty 
[17:14:54    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_17/plots/
[17:15:04        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_17/plots output/PAUS_advanced7/regres/train/ANNZ_17/plots_biasCor_before
[17:15:04    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:15:04    INFO]  - Will use (1) MLMs from the input chain: ANNZ_17,
Warning in <Fit>: Fit data is empty 
[17:15:09    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_17/plots/
[17:15:19        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_17/plots output/PAUS_advanced7/regres/train/ANNZ_17/plots_biasCor_after
[17:15:19    INFO]  - Got original [KS-test,N_poiss]: [0.0860136 , 5.56073] , after the bias-correction: [0.0499803 , 4.60842] --> will KEEP the correction !

(17:15 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(17:15 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m18[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=390:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(17:15 INFO) 
[17:15:23    INFO]  -----------------------------------------------------
[17:15:23    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[17:15:23    INFO]  -----------------------------------------------------------------------------------------------------------
[17:15:24    INFO]  - starting ANNZ::Init()  ... 
[17:15:25    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_18/saveOpt.txt ...
[17:15:39    INFO]  - starting ANNZ::Train_singleReg() ... 
[17:15:39    INFO] ----------------------------------------------------------------------------------------------------
[17:15:39    INFO]  - will book (ANNZ_18) method(BDT) with options: :NTrees=390:BoostType=AdaBoostR2:VarTransform=N,P
[17:15:39    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:15:39    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[17:15:39    INFO]      cuts (train):        ,
[17:15:39    INFO]      cuts (valid):       
[17:15:39    INFO]    - weights:            1
[17:15:39    INFO] ----------------------------------------------------------------------------------------------------
[17:15:40    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:16:13    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_18/ANNZ_18_weights/saveTrainOpt_ANNZ_18.txt ...
[17:16:15    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[17:16:15    INFO]  - Will gen. input-parameter errors ...
[17:16:17    INFO]  - starting ANNZ::loadReaders() ... 
[17:16:27    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[17:22:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:22:37    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[17:22:37    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[17:22:37    INFO]  -----------------------------------------------------------------------------------------------------------
[17:24:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:24:27    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[17:24:27    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[17:24:27    INFO]  -----------------------------------------------------------------------------------------------------------
[17:24:27    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[17:30:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:30:39    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[17:30:39    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[17:30:39    INFO]  -----------------------------------------------------------------------------------------------------------
[17:32:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:32:56    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[17:32:56    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[17:32:56    INFO]  -----------------------------------------------------------------------------------------------------------
[17:32:59    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:33:00    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:33:00    INFO]  - will try to derive a bias correction ... 
[17:33:00    INFO]  - will validate that training produced an XML file for later ... 
[17:33:00    INFO]  - starting ANNZ::loadReaders() ... 
[17:33:02    INFO]  - will validate that the training was not a complete failure ... 
[17:33:02    INFO]  - training seems to have been successful! will move on ...
[17:33:02    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[17:33:05    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:33:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:33:08    INFO] ----------------------------------------------------------------------------------------------------
[17:33:08    INFO]  - will book (ANNZ_18_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[17:33:08    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:33:08    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[17:33:08    INFO]    - weights:            1
[17:33:08    INFO] ----------------------------------------------------------------------------------------------------
[17:33:08    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:33:17    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_18 ... 
[17:33:17    INFO]  - Will gen. input-parameter errors ...
[17:33:18    INFO]  - starting ANNZ::loadReaders() ... 
[17:33:28    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[17:39:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:39:16    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[17:39:16    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[17:39:16    INFO]  -----------------------------------------------------------------------------------------------------------
[17:41:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:41:00    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[17:41:00    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[17:41:00    INFO]  -----------------------------------------------------------------------------------------------------------
[17:41:00    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[17:46:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:46:47    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[17:46:47    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[17:46:47    INFO]  -----------------------------------------------------------------------------------------------------------
[17:48:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:48:58    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[17:48:58    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[17:48:58    INFO]  -----------------------------------------------------------------------------------------------------------
[17:49:01    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_18/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:49:02    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:49:02    INFO]  - will validate that the bias-correction actually improved the result ...
[17:49:02    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:49:02    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
[17:49:07    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_18/plots/
[17:49:18        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_18/plots output/PAUS_advanced7/regres/train/ANNZ_18/plots_biasCor_before
[17:49:18    INFO]  - starting ANNZ::doMetricPlots() ... 
[17:49:18    INFO]  - Will use (1) MLMs from the input chain: ANNZ_18,
[17:49:22    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_18/plots/
[17:49:33        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_18/plots output/PAUS_advanced7/regres/train/ANNZ_18/plots_biasCor_after
[17:49:33    INFO]  - Got original [KS-test,N_poiss]: [0.0700357 , 7.05017] , after the bias-correction: [0.0373969 , 5.06782] --> will KEEP the correction !

(17:49 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(17:49 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m19[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(17:49 INFO) 
[17:49:37    INFO]  -----------------------------------------------------
[17:49:37    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[17:49:37    INFO]  -----------------------------------------------------------------------------------------------------------
[17:49:38    INFO]  - starting ANNZ::Init()  ... 
[17:49:39    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_19/saveOpt.txt ...
[17:49:53    INFO]  - starting ANNZ::Train_singleReg() ... 
[17:49:53    INFO] ----------------------------------------------------------------------------------------------------
[17:49:53    INFO]  - will book (ANNZ_19) method(BDT) with options: :NTrees=450:BoostType=AdaBoost:VarTransform=N,P
[17:49:53    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:49:53    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[17:49:53    INFO]      cuts (train):        ,
[17:49:53    INFO]      cuts (valid):       
[17:49:53    INFO]    - weights:            1
[17:49:53    INFO] ----------------------------------------------------------------------------------------------------
[17:49:54    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:50:24    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_19/ANNZ_19_weights/saveTrainOpt_ANNZ_19.txt ...
[17:50:27    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[17:50:27    INFO]  - Will gen. input-parameter errors ...
[17:50:28    INFO]  - starting ANNZ::loadReaders() ... 
[17:50:35    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[17:52:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:52:51    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[17:52:51    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[17:52:51    INFO]  -----------------------------------------------------------------------------------------------------------
[17:53:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:53:31    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[17:53:31    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[17:53:31    INFO]  -----------------------------------------------------------------------------------------------------------
[17:53:31    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[17:55:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:55:45    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[17:55:45    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[17:55:45    INFO]  -----------------------------------------------------------------------------------------------------------
[17:56:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:56:36    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[17:56:36    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[17:56:36    INFO]  -----------------------------------------------------------------------------------------------------------
[17:56:39    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[17:56:40    INFO]  - ending makeTreeRegClsOneMLM() ... 
[17:56:40    INFO]  - will try to derive a bias correction ... 
[17:56:40    INFO]  - will validate that training produced an XML file for later ... 
[17:56:40    INFO]  - starting ANNZ::loadReaders() ... 
[17:56:42    INFO]  - will validate that the training was not a complete failure ... 
[17:56:42    INFO]  - training seems to have been successful! will move on ...
[17:56:42    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[17:56:45    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:56:46    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[17:56:47    INFO] ----------------------------------------------------------------------------------------------------
[17:56:47    INFO]  - will book (ANNZ_19_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[17:56:47    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[17:56:47    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[17:56:47    INFO]    - weights:            1
[17:56:47    INFO] ----------------------------------------------------------------------------------------------------
[17:56:48    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[17:56:57    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_19 ... 
[17:56:57    INFO]  - Will gen. input-parameter errors ...
[17:56:58    INFO]  - starting ANNZ::loadReaders() ... 
[17:57:05    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[17:59:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[17:59:24    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[17:59:24    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[17:59:24    INFO]  -----------------------------------------------------------------------------------------------------------
[18:00:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:00:06    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:00:06    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[18:00:06    INFO]  -----------------------------------------------------------------------------------------------------------
[18:00:06    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[18:02:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:02:24    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:02:24    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[18:02:24    INFO]  -----------------------------------------------------------------------------------------------------------
[18:03:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:03:17    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:03:17    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[18:03:17    INFO]  -----------------------------------------------------------------------------------------------------------
[18:03:20    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_19/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:03:22    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:03:22    INFO]  - will validate that the bias-correction actually improved the result ...
[18:03:22    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:03:22    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
[18:03:27    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_19/plots/
[18:03:37        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_19/plots output/PAUS_advanced7/regres/train/ANNZ_19/plots_biasCor_before
[18:03:37    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:03:37    INFO]  - Will use (1) MLMs from the input chain: ANNZ_19,
[18:03:42    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_19/plots/
[18:03:52        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_19/plots output/PAUS_advanced7/regres/train/ANNZ_19/plots_biasCor_after
[18:03:52    INFO]  - Got original [KS-test,N_poiss]: [0.110584 , 6.0039] , after the bias-correction: [0.0546711 , 5.02536] --> will KEEP the correction !

(18:03 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:03 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m20[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=440:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:03 INFO) 
[18:03:56    INFO]  -----------------------------------------------------
[18:03:56    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:03:56    INFO]  -----------------------------------------------------------------------------------------------------------
[18:03:57    INFO]  - starting ANNZ::Init()  ... 
[18:03:59    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_20/saveOpt.txt ...
[18:04:12    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:04:13    INFO] ----------------------------------------------------------------------------------------------------
[18:04:13    INFO]  - will book (ANNZ_20) method(BDT) with options: :NTrees=440:BoostType=Bagging:VarTransform=N,P
[18:04:13    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:04:13    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[18:04:13    INFO]      cuts (train):        ,
[18:04:13    INFO]      cuts (valid):       
[18:04:13    INFO]    - weights:            1
[18:04:13    INFO] ----------------------------------------------------------------------------------------------------
[18:04:13    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:05:00    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_20/ANNZ_20_weights/saveTrainOpt_ANNZ_20.txt ...
[18:05:05    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_20 ... 
[18:05:05    INFO]  - Will gen. input-parameter errors ...
[18:05:07    INFO]  - starting ANNZ::loadReaders() ... 
[18:05:19    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[18:08:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:08:18    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:08:18    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[18:08:18    INFO]  -----------------------------------------------------------------------------------------------------------
[18:09:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:09:12    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:09:12    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[18:09:12    INFO]  -----------------------------------------------------------------------------------------------------------
[18:09:12    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[18:12:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:12:09    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:12:09    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[18:12:09    INFO]  -----------------------------------------------------------------------------------------------------------
[18:13:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:13:15    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:13:15    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[18:13:15    INFO]  -----------------------------------------------------------------------------------------------------------
[18:13:16    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_20/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:13:19    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:13:19    INFO]  - will try to derive a bias correction ... 
[18:13:19    INFO]  - will validate that training produced an XML file for later ... 
[18:13:19    INFO]  - starting ANNZ::loadReaders() ... 
[18:13:23    INFO]  - will validate that the training was not a complete failure ... 
[18:13:23    INFO]  - training seems to have been successful! will move on ...
[18:13:23    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[18:13:28    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:13:29    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:13:30    INFO] ----------------------------------------------------------------------------------------------------
[18:13:30    INFO]  - will book (ANNZ_20_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[18:13:30    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:13:30    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[18:13:30    INFO]    - weights:            1
[18:13:30    INFO] ----------------------------------------------------------------------------------------------------
[18:13:30    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:13:41    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_20 ... 
[18:13:41    INFO]  - Will gen. input-parameter errors ...
[18:13:44    INFO]  - starting ANNZ::loadReaders() ... 
[18:13:56    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[18:17:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:17:09    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:17:09    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[18:17:09    INFO]  -----------------------------------------------------------------------------------------------------------
[18:18:06    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:18:06    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:18:06    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[18:18:06    INFO]  -----------------------------------------------------------------------------------------------------------
[18:18:06    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[18:21:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:21:15    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:21:15    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[18:21:15    INFO]  -----------------------------------------------------------------------------------------------------------
[18:22:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:22:25    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:22:25    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[18:22:25    INFO]  -----------------------------------------------------------------------------------------------------------
[18:22:27    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_20/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:22:29    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:22:29    INFO]  - will validate that the bias-correction actually improved the result ...
[18:22:29    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:22:29    INFO]  - Will use (1) MLMs from the input chain: ANNZ_20,
[18:22:34    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_20/plots/
[18:22:45        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_20/plots output/PAUS_advanced7/regres/train/ANNZ_20/plots_biasCor_before
[18:22:45    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:22:45    INFO]  - Will use (1) MLMs from the input chain: ANNZ_20,
[18:22:49    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_20/plots/
[18:23:00        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_20/plots output/PAUS_advanced7/regres/train/ANNZ_20/plots_biasCor_after
[18:23:00    INFO]  - Got original [KS-test,N_poiss]: [0.0564118 , 5.75254] , after the bias-correction: [0.0406402 , 4.58857] --> will KEEP the correction !

(18:23 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:23 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m21[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=350:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:23 INFO) 
[18:23:05    INFO]  -----------------------------------------------------
[18:23:05    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:23:05    INFO]  -----------------------------------------------------------------------------------------------------------
[18:23:06    INFO]  - starting ANNZ::Init()  ... 
[18:23:07    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_21/saveOpt.txt ...
[18:23:21    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:23:21    INFO] ----------------------------------------------------------------------------------------------------
[18:23:21    INFO]  - will book (ANNZ_21) method(BDT) with options: :NTrees=350:BoostType=Bagging:VarTransform=N
[18:23:21    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:23:21    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[18:23:21    INFO]      cuts (train):        ,
[18:23:21    INFO]      cuts (valid):       
[18:23:21    INFO]    - weights:            1
[18:23:21    INFO] ----------------------------------------------------------------------------------------------------
[18:23:22    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:23:57    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_21/ANNZ_21_weights/saveTrainOpt_ANNZ_21.txt ...
[18:24:02    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_21 ... 
[18:24:02    INFO]  - Will gen. input-parameter errors ...
[18:24:04    INFO]  - starting ANNZ::loadReaders() ... 
[18:24:12    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[18:25:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:25:47    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:25:47    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[18:25:47    INFO]  -----------------------------------------------------------------------------------------------------------
[18:26:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:26:16    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:26:16    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[18:26:16    INFO]  -----------------------------------------------------------------------------------------------------------
[18:26:16    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[18:27:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:27:52    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:27:52    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[18:27:52    INFO]  -----------------------------------------------------------------------------------------------------------
[18:28:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:28:27    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:28:27    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[18:28:27    INFO]  -----------------------------------------------------------------------------------------------------------
[18:28:27    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_21/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:28:29    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:28:29    INFO]  - will try to derive a bias correction ... 
[18:28:29    INFO]  - will validate that training produced an XML file for later ... 
[18:28:29    INFO]  - starting ANNZ::loadReaders() ... 
[18:28:33    INFO]  - will validate that the training was not a complete failure ... 
[18:28:33    INFO]  - training seems to have been successful! will move on ...
[18:28:33    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[18:28:37    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:28:38    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:28:39    INFO] ----------------------------------------------------------------------------------------------------
[18:28:39    INFO]  - will book (ANNZ_21_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[18:28:39    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:28:39    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[18:28:39    INFO]    - weights:            1
[18:28:39    INFO] ----------------------------------------------------------------------------------------------------
[18:28:40    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:28:50    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_21 ... 
[18:28:50    INFO]  - Will gen. input-parameter errors ...
[18:28:52    INFO]  - starting ANNZ::loadReaders() ... 
[18:29:00    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[18:30:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:30:39    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:30:39    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[18:30:39    INFO]  -----------------------------------------------------------------------------------------------------------
[18:31:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:31:09    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:31:09    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[18:31:09    INFO]  -----------------------------------------------------------------------------------------------------------
[18:31:09    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[18:32:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:32:49    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:32:49    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[18:32:49    INFO]  -----------------------------------------------------------------------------------------------------------
[18:33:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:33:25    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:33:25    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[18:33:25    INFO]  -----------------------------------------------------------------------------------------------------------
[18:33:25    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_21/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:33:27    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:33:27    INFO]  - will validate that the bias-correction actually improved the result ...
[18:33:27    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:33:27    INFO]  - Will use (1) MLMs from the input chain: ANNZ_21,
[18:33:32    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_21/plots/
[18:33:43        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_21/plots output/PAUS_advanced7/regres/train/ANNZ_21/plots_biasCor_before
[18:33:43    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:33:43    INFO]  - Will use (1) MLMs from the input chain: ANNZ_21,
[18:33:47    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_21/plots/
[18:33:58        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_21/plots output/PAUS_advanced7/regres/train/ANNZ_21/plots_biasCor_after
[18:33:58    INFO]  - Got original [KS-test,N_poiss]: [0.06771 , 5.77489] , after the bias-correction: [0.0472566 , 4.41753] --> will KEEP the correction !

(18:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m22[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:34 INFO) 
[18:34:02    INFO]  -----------------------------------------------------
[18:34:02    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:34:02    INFO]  -----------------------------------------------------------------------------------------------------------
[18:34:04    INFO]  - starting ANNZ::Init()  ... 
[18:34:05    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_22/saveOpt.txt ...
[18:34:19    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:34:19    INFO] ----------------------------------------------------------------------------------------------------
[18:34:19    INFO]  - will book (ANNZ_22) method(BDT) with options: :NTrees=430:BoostType=Bagging:VarTransform=N
[18:34:19    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:34:19    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[18:34:19    INFO]      cuts (train):        ,
[18:34:19    INFO]      cuts (valid):       
[18:34:19    INFO]    - weights:            1
[18:34:19    INFO] ----------------------------------------------------------------------------------------------------
[18:34:19    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:35:03    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_22/ANNZ_22_weights/saveTrainOpt_ANNZ_22.txt ...
[18:35:08    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_22 ... 
[18:35:08    INFO]  - Will gen. input-parameter errors ...
[18:35:10    INFO]  - starting ANNZ::loadReaders() ... 
[18:35:20    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[18:37:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:37:13    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:37:13    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[18:37:13    INFO]  -----------------------------------------------------------------------------------------------------------
[18:37:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:37:47    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:37:47    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[18:37:47    INFO]  -----------------------------------------------------------------------------------------------------------
[18:37:47    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[18:39:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:39:40    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:39:40    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[18:39:40    INFO]  -----------------------------------------------------------------------------------------------------------
[18:40:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:40:22    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:40:22    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[18:40:22    INFO]  -----------------------------------------------------------------------------------------------------------
[18:40:22    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_22/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:40:25    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:40:25    INFO]  - will try to derive a bias correction ... 
[18:40:25    INFO]  - will validate that training produced an XML file for later ... 
[18:40:25    INFO]  - starting ANNZ::loadReaders() ... 
[18:40:29    INFO]  - will validate that the training was not a complete failure ... 
[18:40:29    INFO]  - training seems to have been successful! will move on ...
[18:40:29    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[18:40:33    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:40:34    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:40:36    INFO] ----------------------------------------------------------------------------------------------------
[18:40:36    INFO]  - will book (ANNZ_22_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[18:40:36    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:40:36    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[18:40:36    INFO]    - weights:            1
[18:40:36    INFO] ----------------------------------------------------------------------------------------------------
[18:40:36    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:40:46    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_22 ... 
[18:40:46    INFO]  - Will gen. input-parameter errors ...
[18:40:48    INFO]  - starting ANNZ::loadReaders() ... 
[18:40:59    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[18:43:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:43:10    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:43:10    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[18:43:10    INFO]  -----------------------------------------------------------------------------------------------------------
[18:43:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:43:50    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:43:50    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[18:43:50    INFO]  -----------------------------------------------------------------------------------------------------------
[18:43:50    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[18:46:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:46:01    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:46:01    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[18:46:01    INFO]  -----------------------------------------------------------------------------------------------------------
[18:46:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:46:49    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:46:49    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[18:46:49    INFO]  -----------------------------------------------------------------------------------------------------------
[18:46:51    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_22/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:46:53    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:46:53    INFO]  - will validate that the bias-correction actually improved the result ...
[18:46:54    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:46:54    INFO]  - Will use (1) MLMs from the input chain: ANNZ_22,
[18:46:59    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_22/plots/
[18:47:09        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_22/plots output/PAUS_advanced7/regres/train/ANNZ_22/plots_biasCor_before
[18:47:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:47:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_22,
[18:47:14    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_22/plots/
[18:47:25        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_22/plots output/PAUS_advanced7/regres/train/ANNZ_22/plots_biasCor_after
[18:47:25    INFO]  - Got original [KS-test,N_poiss]: [0.0679408 , 5.76912] , after the bias-correction: [0.0491799 , 4.58761] --> will KEEP the correction !

(18:47 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:47 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m23[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=290:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:47 INFO) 
[18:47:30    INFO]  -----------------------------------------------------
[18:47:30    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:47:30    INFO]  -----------------------------------------------------------------------------------------------------------
[18:47:31    INFO]  - starting ANNZ::Init()  ... 
[18:47:32    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_23/saveOpt.txt ...
[18:47:46    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:47:46    INFO] ----------------------------------------------------------------------------------------------------
[18:47:46    INFO]  - will book (ANNZ_23) method(BDT) with options: :NTrees=290:BoostType=Bagging:VarTransform=N
[18:47:46    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:47:46    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[18:47:46    INFO]      cuts (train):        ,
[18:47:46    INFO]      cuts (valid):       
[18:47:46    INFO]    - weights:            1
[18:47:46    INFO] ----------------------------------------------------------------------------------------------------
[18:47:47    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:48:16    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_23/ANNZ_23_weights/saveTrainOpt_ANNZ_23.txt ...
[18:48:19    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_23 ... 
[18:48:19    INFO]  - Will gen. input-parameter errors ...
[18:48:21    INFO]  - starting ANNZ::loadReaders() ... 
[18:48:28    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[18:49:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:49:47    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:49:47    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[18:49:47    INFO]  -----------------------------------------------------------------------------------------------------------
[18:50:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:50:11    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:50:11    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[18:50:11    INFO]  -----------------------------------------------------------------------------------------------------------
[18:50:11    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[18:51:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:51:30    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:51:30    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[18:51:30    INFO]  -----------------------------------------------------------------------------------------------------------
[18:52:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:52:00    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:52:00    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[18:52:00    INFO]  -----------------------------------------------------------------------------------------------------------
[18:52:00    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_23/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:52:01    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:52:01    INFO]  - will try to derive a bias correction ... 
[18:52:01    INFO]  - will validate that training produced an XML file for later ... 
[18:52:01    INFO]  - starting ANNZ::loadReaders() ... 
[18:52:04    INFO]  - will validate that the training was not a complete failure ... 
[18:52:04    INFO]  - training seems to have been successful! will move on ...
[18:52:04    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[18:52:08    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:52:09    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[18:52:11    INFO] ----------------------------------------------------------------------------------------------------
[18:52:11    INFO]  - will book (ANNZ_23_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[18:52:11    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:52:11    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[18:52:11    INFO]    - weights:            1
[18:52:11    INFO] ----------------------------------------------------------------------------------------------------
[18:52:11    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:52:20    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_23 ... 
[18:52:20    INFO]  - Will gen. input-parameter errors ...
[18:52:22    INFO]  - starting ANNZ::loadReaders() ... 
[18:52:29    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[18:53:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:53:53    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:53:53    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[18:53:53    INFO]  -----------------------------------------------------------------------------------------------------------
[18:54:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:54:18    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:54:18    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[18:54:18    INFO]  -----------------------------------------------------------------------------------------------------------
[18:54:18    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[18:55:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:55:42    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:55:42    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[18:55:42    INFO]  -----------------------------------------------------------------------------------------------------------
[18:56:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:56:13    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:56:13    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[18:56:13    INFO]  -----------------------------------------------------------------------------------------------------------
[18:56:13    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_23/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[18:56:15    INFO]  - ending makeTreeRegClsOneMLM() ... 
[18:56:15    INFO]  - will validate that the bias-correction actually improved the result ...
[18:56:15    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:56:15    INFO]  - Will use (1) MLMs from the input chain: ANNZ_23,
[18:56:20    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_23/plots/
[18:56:30        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_23/plots output/PAUS_advanced7/regres/train/ANNZ_23/plots_biasCor_before
[18:56:30    INFO]  - starting ANNZ::doMetricPlots() ... 
[18:56:31    INFO]  - Will use (1) MLMs from the input chain: ANNZ_23,
[18:56:35    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_23/plots/
[18:56:45        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_23/plots output/PAUS_advanced7/regres/train/ANNZ_23/plots_biasCor_after
[18:56:45    INFO]  - Got original [KS-test,N_poiss]: [0.0671715 , 5.74828] , after the bias-correction: [0.046795 , 4.62956] --> will KEEP the correction !

(18:56 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(18:56 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m24[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(18:56 INFO) 
[18:56:50    INFO]  -----------------------------------------------------
[18:56:50    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[18:56:50    INFO]  -----------------------------------------------------------------------------------------------------------
[18:56:51    INFO]  - starting ANNZ::Init()  ... 
[18:56:52    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_24/saveOpt.txt ...
[18:57:06    INFO]  - starting ANNZ::Train_singleReg() ... 
[18:57:06    INFO] ----------------------------------------------------------------------------------------------------
[18:57:06    INFO]  - will book (ANNZ_24) method(BDT) with options: :NTrees=380:BoostType=AdaBoost:VarTransform=N,P
[18:57:06    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[18:57:06    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[18:57:06    INFO]      cuts (train):        ,
[18:57:06    INFO]      cuts (valid):       
[18:57:06    INFO]    - weights:            1
[18:57:06    INFO] ----------------------------------------------------------------------------------------------------
[18:57:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[18:57:33    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_24/ANNZ_24_weights/saveTrainOpt_ANNZ_24.txt ...
[18:57:35    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_24 ... 
[18:57:35    INFO]  - Will gen. input-parameter errors ...
[18:57:37    INFO]  - starting ANNZ::loadReaders() ... 
[18:57:42    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[18:59:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[18:59:43    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[18:59:43    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[18:59:43    INFO]  -----------------------------------------------------------------------------------------------------------
[19:00:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:00:19    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:00:19    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[19:00:19    INFO]  -----------------------------------------------------------------------------------------------------------
[19:00:19    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[19:02:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:02:19    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:02:19    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[19:02:19    INFO]  -----------------------------------------------------------------------------------------------------------
[19:03:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:03:05    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:03:05    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[19:03:05    INFO]  -----------------------------------------------------------------------------------------------------------
[19:03:05    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_24/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:03:06    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:03:06    INFO]  - will try to derive a bias correction ... 
[19:03:06    INFO]  - will validate that training produced an XML file for later ... 
[19:03:06    INFO]  - starting ANNZ::loadReaders() ... 
[19:03:08    INFO]  - will validate that the training was not a complete failure ... 
[19:03:08    INFO]  - training seems to have been successful! will move on ...
[19:03:08    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[19:03:11    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:03:12    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:03:13    INFO] ----------------------------------------------------------------------------------------------------
[19:03:13    INFO]  - will book (ANNZ_24_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[19:03:13    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:03:13    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[19:03:13    INFO]    - weights:            1
[19:03:13    INFO] ----------------------------------------------------------------------------------------------------
[19:03:14    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:03:22    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_24 ... 
[19:03:22    INFO]  - Will gen. input-parameter errors ...
[19:03:24    INFO]  - starting ANNZ::loadReaders() ... 
[19:03:30    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[19:05:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:05:47    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:05:47    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[19:05:47    INFO]  -----------------------------------------------------------------------------------------------------------
[19:06:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:06:27    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:06:27    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[19:06:27    INFO]  -----------------------------------------------------------------------------------------------------------
[19:06:27    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[19:08:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:08:43    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:08:43    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[19:08:43    INFO]  -----------------------------------------------------------------------------------------------------------
[19:09:35    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:09:35    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:09:35    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[19:09:35    INFO]  -----------------------------------------------------------------------------------------------------------
[19:09:38    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_24/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:09:39    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:09:39    INFO]  - will validate that the bias-correction actually improved the result ...
[19:09:39    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:09:39    INFO]  - Will use (1) MLMs from the input chain: ANNZ_24,
[19:09:44    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_24/plots/
[19:09:55        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_24/plots output/PAUS_advanced7/regres/train/ANNZ_24/plots_biasCor_before
[19:09:55    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:09:55    INFO]  - Will use (1) MLMs from the input chain: ANNZ_24,
[19:09:59    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_24/plots/
[19:10:10        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_24/plots output/PAUS_advanced7/regres/train/ANNZ_24/plots_biasCor_after
[19:10:10    INFO]  - Got original [KS-test,N_poiss]: [0.110541 , 6.00405] , after the bias-correction: [0.0551327 , 4.97546] --> will KEEP the correction !

(19:10 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(19:10 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m25[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=410:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(19:10 INFO) 
[19:10:14    INFO]  -----------------------------------------------------
[19:10:14    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[19:10:14    INFO]  -----------------------------------------------------------------------------------------------------------
[19:10:15    INFO]  - starting ANNZ::Init()  ... 
[19:10:16    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_25/saveOpt.txt ...
[19:10:30    INFO]  - starting ANNZ::Train_singleReg() ... 
[19:10:30    INFO] ----------------------------------------------------------------------------------------------------
[19:10:30    INFO]  - will book (ANNZ_25) method(BDT) with options: :NTrees=410:BoostType=AdaBoost:VarTransform=N,P
[19:10:30    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:10:30    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[19:10:30    INFO]      cuts (train):        ,
[19:10:30    INFO]      cuts (valid):       
[19:10:30    INFO]    - weights:            1
[19:10:30    INFO] ----------------------------------------------------------------------------------------------------
[19:10:31    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:10:59    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_25/ANNZ_25_weights/saveTrainOpt_ANNZ_25.txt ...
[19:11:01    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_25 ... 
[19:11:01    INFO]  - Will gen. input-parameter errors ...
[19:11:03    INFO]  - starting ANNZ::loadReaders() ... 
[19:11:09    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[19:13:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:13:16    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:13:16    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[19:13:16    INFO]  -----------------------------------------------------------------------------------------------------------
[19:13:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:13:53    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:13:53    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[19:13:53    INFO]  -----------------------------------------------------------------------------------------------------------
[19:13:53    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[19:15:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:15:59    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:15:59    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[19:15:59    INFO]  -----------------------------------------------------------------------------------------------------------
[19:16:46    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:16:46    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:16:46    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[19:16:46    INFO]  -----------------------------------------------------------------------------------------------------------
[19:16:47    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_25/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:16:48    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:16:48    INFO]  - will try to derive a bias correction ... 
[19:16:48    INFO]  - will validate that training produced an XML file for later ... 
[19:16:48    INFO]  - starting ANNZ::loadReaders() ... 
[19:16:49    INFO]  - will validate that the training was not a complete failure ... 
[19:16:49    INFO]  - training seems to have been successful! will move on ...
[19:16:49    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[19:16:53    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:16:54    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:16:55    INFO] ----------------------------------------------------------------------------------------------------
[19:16:55    INFO]  - will book (ANNZ_25_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[19:16:55    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:16:55    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[19:16:55    INFO]    - weights:            1
[19:16:55    INFO] ----------------------------------------------------------------------------------------------------
[19:16:55    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:17:04    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_25 ... 
[19:17:04    INFO]  - Will gen. input-parameter errors ...
[19:17:06    INFO]  - starting ANNZ::loadReaders() ... 
[19:17:12    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[19:19:29    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:19:29    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:19:29    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[19:19:29    INFO]  -----------------------------------------------------------------------------------------------------------
[19:20:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:20:10    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:20:10    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[19:20:10    INFO]  -----------------------------------------------------------------------------------------------------------
[19:20:10    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[19:22:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:22:27    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:22:27    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[19:22:27    INFO]  -----------------------------------------------------------------------------------------------------------
[19:23:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:23:19    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:23:19    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[19:23:19    INFO]  -----------------------------------------------------------------------------------------------------------
[19:23:21    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_25/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:23:22    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:23:22    INFO]  - will validate that the bias-correction actually improved the result ...
[19:23:22    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:23:22    INFO]  - Will use (1) MLMs from the input chain: ANNZ_25,
[19:23:27    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_25/plots/
[19:23:38        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_25/plots output/PAUS_advanced7/regres/train/ANNZ_25/plots_biasCor_before
[19:23:38    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:23:38    INFO]  - Will use (1) MLMs from the input chain: ANNZ_25,
[19:23:43    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_25/plots/
[19:23:53        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_25/plots output/PAUS_advanced7/regres/train/ANNZ_25/plots_biasCor_after
[19:23:53    INFO]  - Got original [KS-test,N_poiss]: [0.110584 , 6.00267] , after the bias-correction: [0.0545942 , 5.04067] --> will KEEP the correction !

(19:23 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(19:23 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m26[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(19:23 INFO) 
[19:23:57    INFO]  -----------------------------------------------------
[19:23:57    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[19:23:57    INFO]  -----------------------------------------------------------------------------------------------------------
[19:23:58    INFO]  - starting ANNZ::Init()  ... 
[19:24:00    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_26/saveOpt.txt ...
[19:24:14    INFO]  - starting ANNZ::Train_singleReg() ... 
[19:24:14    INFO] ----------------------------------------------------------------------------------------------------
[19:24:14    INFO]  - will book (ANNZ_26) method(BDT) with options: :NTrees=430:BoostType=AdaBoost:VarTransform=N,P
[19:24:14    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:24:14    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[19:24:14    INFO]      cuts (train):        ,
[19:24:14    INFO]      cuts (valid):       
[19:24:14    INFO]    - weights:            1
[19:24:14    INFO] ----------------------------------------------------------------------------------------------------
[19:24:14    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:24:44    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_26/ANNZ_26_weights/saveTrainOpt_ANNZ_26.txt ...
[19:24:47    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_26 ... 
[19:24:47    INFO]  - Will gen. input-parameter errors ...
[19:24:48    INFO]  - starting ANNZ::loadReaders() ... 
[19:24:54    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[19:27:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:27:05    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:27:05    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[19:27:05    INFO]  -----------------------------------------------------------------------------------------------------------
[19:27:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:27:43    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:27:43    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[19:27:43    INFO]  -----------------------------------------------------------------------------------------------------------
[19:27:43    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[19:29:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:29:52    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:29:52    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[19:29:52    INFO]  -----------------------------------------------------------------------------------------------------------
[19:30:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:30:41    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:30:41    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[19:30:41    INFO]  -----------------------------------------------------------------------------------------------------------
[19:30:41    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_26/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:30:42    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:30:42    INFO]  - will try to derive a bias correction ... 
[19:30:42    INFO]  - will validate that training produced an XML file for later ... 
[19:30:42    INFO]  - starting ANNZ::loadReaders() ... 
[19:30:44    INFO]  - will validate that the training was not a complete failure ... 
[19:30:44    INFO]  - training seems to have been successful! will move on ...
[19:30:44    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[19:30:47    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:30:48    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:30:50    INFO] ----------------------------------------------------------------------------------------------------
[19:30:50    INFO]  - will book (ANNZ_26_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[19:30:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:30:50    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[19:30:50    INFO]    - weights:            1
[19:30:50    INFO] ----------------------------------------------------------------------------------------------------
[19:30:50    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:30:59    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_26 ... 
[19:30:59    INFO]  - Will gen. input-parameter errors ...
[19:31:00    INFO]  - starting ANNZ::loadReaders() ... 
[19:31:07    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[19:33:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:33:24    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:33:24    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[19:33:24    INFO]  -----------------------------------------------------------------------------------------------------------
[19:34:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:34:05    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:34:05    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[19:34:05    INFO]  -----------------------------------------------------------------------------------------------------------
[19:34:05    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[19:36:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:36:21    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:36:21    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[19:36:21    INFO]  -----------------------------------------------------------------------------------------------------------
[19:37:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:37:14    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:37:14    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[19:37:14    INFO]  -----------------------------------------------------------------------------------------------------------
[19:37:16    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_26/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:37:17    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:37:17    INFO]  - will validate that the bias-correction actually improved the result ...
[19:37:17    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:37:17    INFO]  - Will use (1) MLMs from the input chain: ANNZ_26,
[19:37:22    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_26/plots/
[19:37:33        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_26/plots output/PAUS_advanced7/regres/train/ANNZ_26/plots_biasCor_before
[19:37:33    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:37:33    INFO]  - Will use (1) MLMs from the input chain: ANNZ_26,
[19:37:37    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_26/plots/
[19:37:48        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_26/plots output/PAUS_advanced7/regres/train/ANNZ_26/plots_biasCor_after
[19:37:48    INFO]  - Got original [KS-test,N_poiss]: [0.110584 , 6.0061] , after the bias-correction: [0.0545172 , 5.03856] --> will KEEP the correction !

(19:37 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(19:37 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m27[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=470:BoostType=AdaBoost:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(19:37 INFO) 
[19:37:52    INFO]  -----------------------------------------------------
[19:37:52    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[19:37:52    INFO]  -----------------------------------------------------------------------------------------------------------
[19:37:53    INFO]  - starting ANNZ::Init()  ... 
[19:37:54    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_27/saveOpt.txt ...
[19:38:09    INFO]  - starting ANNZ::Train_singleReg() ... 
[19:38:09    INFO] ----------------------------------------------------------------------------------------------------
[19:38:09    INFO]  - will book (ANNZ_27) method(BDT) with options: :NTrees=470:BoostType=AdaBoost:VarTransform=P
[19:38:09    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:38:09    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[19:38:09    INFO]      cuts (train):        ,
[19:38:09    INFO]      cuts (valid):       
[19:38:09    INFO]    - weights:            1
[19:38:09    INFO] ----------------------------------------------------------------------------------------------------
[19:38:09    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:38:41    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_27/ANNZ_27_weights/saveTrainOpt_ANNZ_27.txt ...
[19:38:44    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_27 ... 
[19:38:44    INFO]  - Will gen. input-parameter errors ...
[19:38:46    INFO]  - starting ANNZ::loadReaders() ... 
[19:38:52    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[19:41:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:41:00    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:41:00    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[19:41:00    INFO]  -----------------------------------------------------------------------------------------------------------
[19:41:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:41:38    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:41:38    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[19:41:38    INFO]  -----------------------------------------------------------------------------------------------------------
[19:41:38    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[19:43:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:43:45    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:43:45    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[19:43:45    INFO]  -----------------------------------------------------------------------------------------------------------
[19:44:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:44:33    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:44:33    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[19:44:33    INFO]  -----------------------------------------------------------------------------------------------------------
[19:44:33    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_27/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:44:34    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:44:34    INFO]  - will try to derive a bias correction ... 
[19:44:34    INFO]  - will validate that training produced an XML file for later ... 
[19:44:34    INFO]  - starting ANNZ::loadReaders() ... 
[19:44:36    INFO]  - will validate that the training was not a complete failure ... 
[19:44:36    INFO]  - training seems to have been successful! will move on ...
[19:44:36    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[19:44:40    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:44:41    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:44:42    INFO] ----------------------------------------------------------------------------------------------------
[19:44:42    INFO]  - will book (ANNZ_27_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[19:44:42    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:44:42    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[19:44:42    INFO]    - weights:            1
[19:44:42    INFO] ----------------------------------------------------------------------------------------------------
[19:44:43    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:44:51    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_27 ... 
[19:44:51    INFO]  - Will gen. input-parameter errors ...
[19:44:53    INFO]  - starting ANNZ::loadReaders() ... 
[19:45:00    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[19:47:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:47:02    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:47:02    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[19:47:02    INFO]  -----------------------------------------------------------------------------------------------------------
[19:47:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:47:38    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:47:38    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[19:47:38    INFO]  -----------------------------------------------------------------------------------------------------------
[19:47:38    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[19:49:39    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:49:39    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:49:39    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[19:49:39    INFO]  -----------------------------------------------------------------------------------------------------------
[19:50:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:50:25    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:50:25    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[19:50:25    INFO]  -----------------------------------------------------------------------------------------------------------
[19:50:25    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_27/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:50:27    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:50:27    INFO]  - will validate that the bias-correction actually improved the result ...
[19:50:27    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:50:27    INFO]  - Will use (1) MLMs from the input chain: ANNZ_27,
[19:50:32    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_27/plots/
[19:50:43        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_27/plots output/PAUS_advanced7/regres/train/ANNZ_27/plots_biasCor_before
[19:50:43    INFO]  - starting ANNZ::doMetricPlots() ... 
[19:50:43    INFO]  - Will use (1) MLMs from the input chain: ANNZ_27,
[19:50:47    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_27/plots/
[19:50:58        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_27/plots output/PAUS_advanced7/regres/train/ANNZ_27/plots_biasCor_after
[19:50:58    INFO]  - Got original [KS-test,N_poiss]: [0.0765505 , 5.42136] , after the bias-correction: [0.0429384 , 4.19928] --> will KEEP the correction !

(19:51 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(19:51 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m28[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(19:51 INFO) 
[19:51:03    INFO]  -----------------------------------------------------
[19:51:03    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[19:51:03    INFO]  -----------------------------------------------------------------------------------------------------------
[19:51:04    INFO]  - starting ANNZ::Init()  ... 
[19:51:05    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_28/saveOpt.txt ...
[19:51:19    INFO]  - starting ANNZ::Train_singleReg() ... 
[19:51:19    INFO] ----------------------------------------------------------------------------------------------------
[19:51:19    INFO]  - will book (ANNZ_28) method(BDT) with options: :NTrees=340:BoostType=Bagging:VarTransform=N
[19:51:19    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:51:19    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[19:51:19    INFO]      cuts (train):        ,
[19:51:19    INFO]      cuts (valid):       
[19:51:19    INFO]    - weights:            1
[19:51:19    INFO] ----------------------------------------------------------------------------------------------------
[19:51:20    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:51:54    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_28/ANNZ_28_weights/saveTrainOpt_ANNZ_28.txt ...
[19:51:58    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_28 ... 
[19:51:58    INFO]  - Will gen. input-parameter errors ...
[19:52:00    INFO]  - starting ANNZ::loadReaders() ... 
[19:52:08    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[19:53:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:53:41    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:53:41    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[19:53:41    INFO]  -----------------------------------------------------------------------------------------------------------
[19:54:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:54:09    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:54:09    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[19:54:09    INFO]  -----------------------------------------------------------------------------------------------------------
[19:54:09    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[19:55:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:55:42    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:55:42    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[19:55:42    INFO]  -----------------------------------------------------------------------------------------------------------
[19:56:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:56:17    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:56:17    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[19:56:17    INFO]  -----------------------------------------------------------------------------------------------------------
[19:56:17    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_28/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[19:56:19    INFO]  - ending makeTreeRegClsOneMLM() ... 
[19:56:19    INFO]  - will try to derive a bias correction ... 
[19:56:19    INFO]  - will validate that training produced an XML file for later ... 
[19:56:19    INFO]  - starting ANNZ::loadReaders() ... 
[19:56:22    INFO]  - will validate that the training was not a complete failure ... 
[19:56:22    INFO]  - training seems to have been successful! will move on ...
[19:56:22    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[19:56:26    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:56:27    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[19:56:28    INFO] ----------------------------------------------------------------------------------------------------
[19:56:28    INFO]  - will book (ANNZ_28_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[19:56:28    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[19:56:28    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[19:56:28    INFO]    - weights:            1
[19:56:28    INFO] ----------------------------------------------------------------------------------------------------
[19:56:29    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[19:56:39    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_28 ... 
[19:56:39    INFO]  - Will gen. input-parameter errors ...
[19:56:41    INFO]  - starting ANNZ::loadReaders() ... 
[19:56:49    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[19:58:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:58:23    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:58:23    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[19:58:23    INFO]  -----------------------------------------------------------------------------------------------------------
[19:58:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[19:58:51    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[19:58:51    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[19:58:51    INFO]  -----------------------------------------------------------------------------------------------------------
[19:58:51    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[20:00:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:00:26    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[20:00:26    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[20:00:26    INFO]  -----------------------------------------------------------------------------------------------------------
[20:01:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:01:00    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[20:01:00    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[20:01:00    INFO]  -----------------------------------------------------------------------------------------------------------
[20:01:00    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_28/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:01:02    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:01:02    INFO]  - will validate that the bias-correction actually improved the result ...
[20:01:02    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:01:02    INFO]  - Will use (1) MLMs from the input chain: ANNZ_28,
[20:01:07    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_28/plots/
[20:01:18        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_28/plots output/PAUS_advanced7/regres/train/ANNZ_28/plots_biasCor_before
[20:01:18    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:01:18    INFO]  - Will use (1) MLMs from the input chain: ANNZ_28,
[20:01:22    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_28/plots/
[20:01:33        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_28/plots output/PAUS_advanced7/regres/train/ANNZ_28/plots_biasCor_after
[20:01:33    INFO]  - Got original [KS-test,N_poiss]: [0.0674023 , 5.75032] , after the bias-correction: [0.0480259 , 4.55289] --> will KEEP the correction !

(20:01 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:01 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m29[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=330:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:01 INFO) 
[20:01:37    INFO]  -----------------------------------------------------
[20:01:37    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:01:37    INFO]  -----------------------------------------------------------------------------------------------------------
[20:01:39    INFO]  - starting ANNZ::Init()  ... 
[20:01:40    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_29/saveOpt.txt ...
[20:01:54    INFO]  - starting ANNZ::Train_singleReg() ... 
[20:01:54    INFO] ----------------------------------------------------------------------------------------------------
[20:01:54    INFO]  - will book (ANNZ_29) method(BDT) with options: :NTrees=330:BoostType=AdaBoostR2:VarTransform=N,P
[20:01:54    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:01:54    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[20:01:54    INFO]      cuts (train):        ,
[20:01:54    INFO]      cuts (valid):       
[20:01:54    INFO]    - weights:            1
[20:01:54    INFO] ----------------------------------------------------------------------------------------------------
[20:01:55    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:02:22    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_29/ANNZ_29_weights/saveTrainOpt_ANNZ_29.txt ...
[20:02:25    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_29 ... 
[20:02:25    INFO]  - Will gen. input-parameter errors ...
[20:02:27    INFO]  - starting ANNZ::loadReaders() ... 
[20:02:35    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[20:07:28    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:07:28    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[20:07:28    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[20:07:28    INFO]  -----------------------------------------------------------------------------------------------------------
[20:08:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:08:55    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[20:08:55    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[20:08:55    INFO]  -----------------------------------------------------------------------------------------------------------
[20:08:56    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[20:13:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:13:50    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[20:13:50    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[20:13:50    INFO]  -----------------------------------------------------------------------------------------------------------
[20:15:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:15:38    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[20:15:38    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[20:15:38    INFO]  -----------------------------------------------------------------------------------------------------------
[20:15:41    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_29/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:15:43    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:15:43    INFO]  - will try to derive a bias correction ... 
[20:15:43    INFO]  - will validate that training produced an XML file for later ... 
[20:15:43    INFO]  - starting ANNZ::loadReaders() ... 
[20:15:44    INFO]  - will validate that the training was not a complete failure ... 
[20:15:44    INFO]  - training seems to have been successful! will move on ...
[20:15:44    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[20:15:47    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:15:49    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:15:50    INFO] ----------------------------------------------------------------------------------------------------
[20:15:50    INFO]  - will book (ANNZ_29_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[20:15:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:15:50    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[20:15:50    INFO]    - weights:            1
[20:15:50    INFO] ----------------------------------------------------------------------------------------------------
[20:15:50    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:15:58    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_29 ... 
[20:15:58    INFO]  - Will gen. input-parameter errors ...
[20:15:59    INFO]  - starting ANNZ::loadReaders() ... 
[20:16:08    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[20:20:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:20:54    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[20:20:54    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[20:20:54    INFO]  -----------------------------------------------------------------------------------------------------------
[20:22:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:22:19    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[20:22:19    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[20:22:19    INFO]  -----------------------------------------------------------------------------------------------------------
[20:22:19    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[20:27:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:27:05    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[20:27:05    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[20:27:05    INFO]  -----------------------------------------------------------------------------------------------------------
[20:28:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:28:51    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[20:28:51    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[20:28:51    INFO]  -----------------------------------------------------------------------------------------------------------
[20:28:53    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_29/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:28:54    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:28:54    INFO]  - will validate that the bias-correction actually improved the result ...
[20:28:54    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:28:54    INFO]  - Will use (1) MLMs from the input chain: ANNZ_29,
[20:29:00    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_29/plots/
[20:29:10        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_29/plots output/PAUS_advanced7/regres/train/ANNZ_29/plots_biasCor_before
[20:29:10    INFO]  - starting ANNZ::doMetricPlots() ... 
[20:29:10    INFO]  - Will use (1) MLMs from the input chain: ANNZ_29,
[20:29:15    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_29/plots/
[20:29:26        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_29/plots output/PAUS_advanced7/regres/train/ANNZ_29/plots_biasCor_after
[20:29:26    INFO]  - Got original [KS-test,N_poiss]: [0.0698819 , 7.00152] , after the bias-correction: [0.0395402 , 4.98371] --> will KEEP the correction !

(20:29 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(20:29 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m30[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1050:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(20:29 INFO) 
[20:29:30    INFO]  -----------------------------------------------------
[20:29:30    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[20:29:30    INFO]  -----------------------------------------------------------------------------------------------------------
[20:29:31    INFO]  - starting ANNZ::Init()  ... 
[20:29:32    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_30/saveOpt.txt ...
[20:29:46    INFO]  - starting ANNZ::Train_singleReg() ... 
[20:29:47    INFO] ----------------------------------------------------------------------------------------------------
[20:29:47    INFO]  - will book (ANNZ_30) method(BDT) with options: :NTrees=1050:BoostType=Bagging:VarTransform=N
[20:29:47    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:29:47    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[20:29:47    INFO]      cuts (train):        ,
[20:29:47    INFO]      cuts (valid):       
[20:29:47    INFO]    - weights:            1
[20:29:47    INFO] ----------------------------------------------------------------------------------------------------
[20:29:47    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:31:37    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_30/ANNZ_30_weights/saveTrainOpt_ANNZ_30.txt ...
[20:31:47    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_30 ... 
[20:31:47    INFO]  - Will gen. input-parameter errors ...
[20:31:51    INFO]  - starting ANNZ::loadReaders() ... 
[20:32:18    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[20:41:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:41:37    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[20:41:37    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[20:41:37    INFO]  -----------------------------------------------------------------------------------------------------------
[20:44:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:44:34    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[20:44:34    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[20:44:34    INFO]  -----------------------------------------------------------------------------------------------------------
[20:44:34    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[20:53:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:53:56    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[20:53:56    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[20:53:56    INFO]  -----------------------------------------------------------------------------------------------------------
[20:57:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[20:57:23    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[20:57:23    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[20:57:23    INFO]  -----------------------------------------------------------------------------------------------------------
[20:57:25    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_30/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[20:57:29    INFO]  - ending makeTreeRegClsOneMLM() ... 
[20:57:29    INFO]  - will try to derive a bias correction ... 
[20:57:29    INFO]  - will validate that training produced an XML file for later ... 
[20:57:29    INFO]  - starting ANNZ::loadReaders() ... 
[20:57:40    INFO]  - will validate that the training was not a complete failure ... 
[20:57:40    INFO]  - training seems to have been successful! will move on ...
[20:57:40    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[20:57:48    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:57:49    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[20:57:50    INFO] ----------------------------------------------------------------------------------------------------
[20:57:50    INFO]  - will book (ANNZ_30_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[20:57:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[20:57:50    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[20:57:50    INFO]    - weights:            1
[20:57:50    INFO] ----------------------------------------------------------------------------------------------------
[20:57:51    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[20:58:04    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_30 ... 
[20:58:04    INFO]  - Will gen. input-parameter errors ...
[20:58:08    INFO]  - starting ANNZ::loadReaders() ... 
[20:58:35    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[21:08:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:08:49    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[21:08:49    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:08:49    INFO]  -----------------------------------------------------------------------------------------------------------
[21:11:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:11:53    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[21:11:53    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[21:11:53    INFO]  -----------------------------------------------------------------------------------------------------------
[21:11:53    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[21:22:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:22:15    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[21:22:15    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[21:22:15    INFO]  -----------------------------------------------------------------------------------------------------------
[21:26:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:26:04    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[21:26:04    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[21:26:04    INFO]  -----------------------------------------------------------------------------------------------------------
[21:26:06    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_30/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:26:11    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:26:11    INFO]  - will validate that the bias-correction actually improved the result ...
[21:26:11    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:26:11    INFO]  - Will use (1) MLMs from the input chain: ANNZ_30,
Warning in <Fit>: Fit data is empty 
[21:26:17    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_30/plots/
[21:26:28        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_30/plots output/PAUS_advanced7/regres/train/ANNZ_30/plots_biasCor_before
[21:26:28    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:26:28    INFO]  - Will use (1) MLMs from the input chain: ANNZ_30,
[21:26:33    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_30/plots/
[21:26:44        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_30/plots output/PAUS_advanced7/regres/train/ANNZ_30/plots_biasCor_after
[21:26:44    INFO]  - Got original [KS-test,N_poiss]: [0.0678639 , 5.80197] , after the bias-correction: [0.0465642 , 4.69381] --> will KEEP the correction !

(21:26 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:26 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m31[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=360:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:26 INFO) 
[21:26:52    INFO]  -----------------------------------------------------
[21:26:52    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:26:52    INFO]  -----------------------------------------------------------------------------------------------------------
[21:26:53    INFO]  - starting ANNZ::Init()  ... 
[21:26:54    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_31/saveOpt.txt ...
[21:27:08    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:27:09    INFO] ----------------------------------------------------------------------------------------------------
[21:27:09    INFO]  - will book (ANNZ_31) method(BDT) with options: :NTrees=360:BoostType=AdaBoost:VarTransform=N
[21:27:09    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:27:09    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[21:27:09    INFO]      cuts (train):        ,
[21:27:09    INFO]      cuts (valid):       
[21:27:09    INFO]    - weights:            1
[21:27:09    INFO] ----------------------------------------------------------------------------------------------------
[21:27:09    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:27:33    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_31/ANNZ_31_weights/saveTrainOpt_ANNZ_31.txt ...
[21:27:36    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_31 ... 
[21:27:36    INFO]  - Will gen. input-parameter errors ...
[21:27:38    INFO]  - starting ANNZ::loadReaders() ... 
[21:27:42    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[21:29:00    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:29:00    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[21:29:00    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:29:00    INFO]  -----------------------------------------------------------------------------------------------------------
[21:29:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:29:23    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[21:29:23    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[21:29:23    INFO]  -----------------------------------------------------------------------------------------------------------
[21:29:23    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[21:30:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:30:41    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[21:30:41    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[21:30:41    INFO]  -----------------------------------------------------------------------------------------------------------
[21:31:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:31:11    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[21:31:11    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[21:31:11    INFO]  -----------------------------------------------------------------------------------------------------------
[21:31:12    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_31/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:31:13    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:31:13    INFO]  - will try to derive a bias correction ... 
[21:31:13    INFO]  - will validate that training produced an XML file for later ... 
[21:31:13    INFO]  - starting ANNZ::loadReaders() ... 
[21:31:14    INFO]  - will validate that the training was not a complete failure ... 
[21:31:14    INFO]  - training seems to have been successful! will move on ...
[21:31:14    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[21:31:18    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:31:19    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:31:20    INFO] ----------------------------------------------------------------------------------------------------
[21:31:20    INFO]  - will book (ANNZ_31_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[21:31:20    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:31:20    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[21:31:20    INFO]    - weights:            1
[21:31:20    INFO] ----------------------------------------------------------------------------------------------------
[21:31:20    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:31:28    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_31 ... 
[21:31:28    INFO]  - Will gen. input-parameter errors ...
[21:31:30    INFO]  - starting ANNZ::loadReaders() ... 
[21:31:35    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[21:33:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:33:09    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[21:33:09    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:33:09    INFO]  -----------------------------------------------------------------------------------------------------------
[21:33:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:33:37    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[21:33:37    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[21:33:37    INFO]  -----------------------------------------------------------------------------------------------------------
[21:33:37    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[21:35:12    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:35:12    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[21:35:12    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[21:35:12    INFO]  -----------------------------------------------------------------------------------------------------------
[21:35:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:35:48    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[21:35:48    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[21:35:48    INFO]  -----------------------------------------------------------------------------------------------------------
[21:35:49    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_31/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:35:50    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:35:50    INFO]  - will validate that the bias-correction actually improved the result ...
[21:35:50    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:35:50    INFO]  - Will use (1) MLMs from the input chain: ANNZ_31,
Warning in <Fit>: Fit data is empty 
[21:35:55    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_31/plots/
[21:36:06        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_31/plots output/PAUS_advanced7/regres/train/ANNZ_31/plots_biasCor_before
[21:36:06    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:36:06    INFO]  - Will use (1) MLMs from the input chain: ANNZ_31,
Warning in <Fit>: Fit data is empty 
[21:36:10    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_31/plots/
[21:36:21        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_31/plots output/PAUS_advanced7/regres/train/ANNZ_31/plots_biasCor_after
[21:36:21    INFO]  - Got original [KS-test,N_poiss]: [0.0860136 , 5.56367] , after the bias-correction: [0.0486725 , 4.4848] --> will KEEP the correction !

(21:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m32[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=AdaBoost[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:36 INFO) 
[21:36:25    INFO]  -----------------------------------------------------
[21:36:25    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:36:25    INFO]  -----------------------------------------------------------------------------------------------------------
[21:36:26    INFO]  - starting ANNZ::Init()  ... 
[21:36:27    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_32/saveOpt.txt ...
[21:36:42    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:36:42    INFO] ----------------------------------------------------------------------------------------------------
[21:36:42    INFO]  - will book (ANNZ_32) method(BDT) with options: :NTrees=420:BoostType=AdaBoost:VarTransform=N
[21:36:42    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:36:42    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[21:36:42    INFO]      cuts (train):        ,
[21:36:42    INFO]      cuts (valid):       
[21:36:42    INFO]    - weights:            1
[21:36:42    INFO] ----------------------------------------------------------------------------------------------------
[21:36:42    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:37:11    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_32/ANNZ_32_weights/saveTrainOpt_ANNZ_32.txt ...
[21:37:14    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_32 ... 
[21:37:14    INFO]  - Will gen. input-parameter errors ...
[21:37:15    INFO]  - starting ANNZ::loadReaders() ... 
[21:37:21    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[21:38:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:38:49    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[21:38:49    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:38:49    INFO]  -----------------------------------------------------------------------------------------------------------
[21:39:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:39:15    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[21:39:15    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[21:39:15    INFO]  -----------------------------------------------------------------------------------------------------------
[21:39:15    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[21:40:44    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:40:44    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[21:40:44    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[21:40:44    INFO]  -----------------------------------------------------------------------------------------------------------
[21:41:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:41:18    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[21:41:18    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[21:41:18    INFO]  -----------------------------------------------------------------------------------------------------------
[21:41:18    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_32/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:41:19    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:41:19    INFO]  - will try to derive a bias correction ... 
[21:41:19    INFO]  - will validate that training produced an XML file for later ... 
[21:41:19    INFO]  - starting ANNZ::loadReaders() ... 
[21:41:21    INFO]  - will validate that the training was not a complete failure ... 
[21:41:21    INFO]  - training seems to have been successful! will move on ...
[21:41:21    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[21:41:24    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:41:25    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:41:27    INFO] ----------------------------------------------------------------------------------------------------
[21:41:27    INFO]  - will book (ANNZ_32_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[21:41:27    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:41:27    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[21:41:27    INFO]    - weights:            1
[21:41:27    INFO] ----------------------------------------------------------------------------------------------------
[21:41:27    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:41:35    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_32 ... 
[21:41:35    INFO]  - Will gen. input-parameter errors ...
[21:41:36    INFO]  - starting ANNZ::loadReaders() ... 
[21:41:42    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[21:43:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:43:19    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[21:43:19    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:43:19    INFO]  -----------------------------------------------------------------------------------------------------------
[21:43:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:43:48    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[21:43:48    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[21:43:48    INFO]  -----------------------------------------------------------------------------------------------------------
[21:43:48    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[21:45:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:45:25    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[21:45:25    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[21:45:25    INFO]  -----------------------------------------------------------------------------------------------------------
[21:46:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:46:03    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[21:46:03    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[21:46:03    INFO]  -----------------------------------------------------------------------------------------------------------
[21:46:03    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_32/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:46:04    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:46:04    INFO]  - will validate that the bias-correction actually improved the result ...
[21:46:05    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:46:05    INFO]  - Will use (1) MLMs from the input chain: ANNZ_32,
Warning in <Fit>: Fit data is empty 
[21:46:10    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_32/plots/
[21:46:21        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_32/plots output/PAUS_advanced7/regres/train/ANNZ_32/plots_biasCor_before
[21:46:21    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:46:21    INFO]  - Will use (1) MLMs from the input chain: ANNZ_32,
Warning in <Fit>: Fit data is empty 
[21:46:25    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_32/plots/
[21:46:35        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_32/plots output/PAUS_advanced7/regres/train/ANNZ_32/plots_biasCor_after
[21:46:35    INFO]  - Got original [KS-test,N_poiss]: [0.0860136 , 5.55927] , after the bias-correction: [0.0488263 , 4.50508] --> will KEEP the correction !

(21:46 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:46 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m33[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:46 INFO) 
[21:46:39    INFO]  -----------------------------------------------------
[21:46:39    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:46:39    INFO]  -----------------------------------------------------------------------------------------------------------
[21:46:41    INFO]  - starting ANNZ::Init()  ... 
[21:46:42    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_33/saveOpt.txt ...
[21:46:56    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:46:56    INFO] ----------------------------------------------------------------------------------------------------
[21:46:56    INFO]  - will book (ANNZ_33) method(BDT) with options: :NTrees=380:BoostType=Bagging:VarTransform=N
[21:46:56    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:46:56    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[21:46:56    INFO]      cuts (train):        ,
[21:46:56    INFO]      cuts (valid):       
[21:46:56    INFO]    - weights:            1
[21:46:56    INFO] ----------------------------------------------------------------------------------------------------
[21:46:57    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:47:35    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_33/ANNZ_33_weights/saveTrainOpt_ANNZ_33.txt ...
[21:47:40    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_33 ... 
[21:47:40    INFO]  - Will gen. input-parameter errors ...
[21:47:42    INFO]  - starting ANNZ::loadReaders() ... 
[21:47:51    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[21:49:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:49:31    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[21:49:31    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:49:31    INFO]  -----------------------------------------------------------------------------------------------------------
[21:50:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:50:01    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[21:50:01    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[21:50:01    INFO]  -----------------------------------------------------------------------------------------------------------
[21:50:01    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[21:51:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:51:42    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[21:51:42    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[21:51:42    INFO]  -----------------------------------------------------------------------------------------------------------
[21:52:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:52:19    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[21:52:19    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[21:52:19    INFO]  -----------------------------------------------------------------------------------------------------------
[21:52:20    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_33/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:52:22    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:52:22    INFO]  - will try to derive a bias correction ... 
[21:52:22    INFO]  - will validate that training produced an XML file for later ... 
[21:52:22    INFO]  - starting ANNZ::loadReaders() ... 
[21:52:25    INFO]  - will validate that the training was not a complete failure ... 
[21:52:25    INFO]  - training seems to have been successful! will move on ...
[21:52:25    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[21:52:30    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:52:31    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[21:52:32    INFO] ----------------------------------------------------------------------------------------------------
[21:52:32    INFO]  - will book (ANNZ_33_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[21:52:32    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:52:32    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[21:52:32    INFO]    - weights:            1
[21:52:32    INFO] ----------------------------------------------------------------------------------------------------
[21:52:32    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:52:43    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_33 ... 
[21:52:43    INFO]  - Will gen. input-parameter errors ...
[21:52:45    INFO]  - starting ANNZ::loadReaders() ... 
[21:52:54    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[21:54:45    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:54:45    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[21:54:45    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[21:54:45    INFO]  -----------------------------------------------------------------------------------------------------------
[21:55:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:55:19    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[21:55:19    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[21:55:19    INFO]  -----------------------------------------------------------------------------------------------------------
[21:55:19    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[21:57:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:57:10    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[21:57:10    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[21:57:10    INFO]  -----------------------------------------------------------------------------------------------------------
[21:57:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[21:57:51    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[21:57:51    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[21:57:51    INFO]  -----------------------------------------------------------------------------------------------------------
[21:57:52    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_33/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[21:57:54    INFO]  - ending makeTreeRegClsOneMLM() ... 
[21:57:54    INFO]  - will validate that the bias-correction actually improved the result ...
[21:57:54    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:57:54    INFO]  - Will use (1) MLMs from the input chain: ANNZ_33,
[21:57:59    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_33/plots/
[21:58:09        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_33/plots output/PAUS_advanced7/regres/train/ANNZ_33/plots_biasCor_before
[21:58:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[21:58:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_33,
[21:58:14    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_33/plots/
[21:58:24        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_33/plots output/PAUS_advanced7/regres/train/ANNZ_33/plots_biasCor_after
[21:58:24    INFO]  - Got original [KS-test,N_poiss]: [0.0673254 , 5.78454] , after the bias-correction: [0.0470569 , 4.62408] --> will KEEP the correction !

(21:58 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(21:58 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m34[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=410:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(21:58 INFO) 
[21:58:29    INFO]  -----------------------------------------------------
[21:58:29    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[21:58:29    INFO]  -----------------------------------------------------------------------------------------------------------
[21:58:30    INFO]  - starting ANNZ::Init()  ... 
[21:58:31    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_34/saveOpt.txt ...
[21:58:46    INFO]  - starting ANNZ::Train_singleReg() ... 
[21:58:46    INFO] ----------------------------------------------------------------------------------------------------
[21:58:46    INFO]  - will book (ANNZ_34) method(BDT) with options: :NTrees=410:BoostType=AdaBoost:VarTransform=N,P
[21:58:46    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[21:58:46    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[21:58:46    INFO]      cuts (train):        ,
[21:58:46    INFO]      cuts (valid):       
[21:58:46    INFO]    - weights:            1
[21:58:46    INFO] ----------------------------------------------------------------------------------------------------
[21:58:47    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[21:59:15    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_34/ANNZ_34_weights/saveTrainOpt_ANNZ_34.txt ...
[21:59:17    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_34 ... 
[21:59:17    INFO]  - Will gen. input-parameter errors ...
[21:59:19    INFO]  - starting ANNZ::loadReaders() ... 
[21:59:25    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[22:01:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:01:30    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[22:01:30    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:01:30    INFO]  -----------------------------------------------------------------------------------------------------------
[22:02:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:02:07    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[22:02:07    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[22:02:07    INFO]  -----------------------------------------------------------------------------------------------------------
[22:02:07    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[22:04:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:04:11    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[22:04:11    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[22:04:11    INFO]  -----------------------------------------------------------------------------------------------------------
[22:04:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:04:58    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[22:04:58    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[22:04:58    INFO]  -----------------------------------------------------------------------------------------------------------
[22:04:58    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_34/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:04:59    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:04:59    INFO]  - will try to derive a bias correction ... 
[22:04:59    INFO]  - will validate that training produced an XML file for later ... 
[22:04:59    INFO]  - starting ANNZ::loadReaders() ... 
[22:05:01    INFO]  - will validate that the training was not a complete failure ... 
[22:05:01    INFO]  - training seems to have been successful! will move on ...
[22:05:01    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[22:05:04    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:05:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:05:07    INFO] ----------------------------------------------------------------------------------------------------
[22:05:07    INFO]  - will book (ANNZ_34_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[22:05:07    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:05:07    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[22:05:07    INFO]    - weights:            1
[22:05:07    INFO] ----------------------------------------------------------------------------------------------------
[22:05:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:05:16    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_34 ... 
[22:05:16    INFO]  - Will gen. input-parameter errors ...
[22:05:17    INFO]  - starting ANNZ::loadReaders() ... 
[22:05:24    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[22:07:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:07:41    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[22:07:41    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:07:41    INFO]  -----------------------------------------------------------------------------------------------------------
[22:08:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:08:21    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[22:08:21    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[22:08:21    INFO]  -----------------------------------------------------------------------------------------------------------
[22:08:21    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[22:10:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:10:38    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[22:10:38    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[22:10:38    INFO]  -----------------------------------------------------------------------------------------------------------
[22:11:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:11:30    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[22:11:30    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[22:11:30    INFO]  -----------------------------------------------------------------------------------------------------------
[22:11:32    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_34/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:11:34    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:11:34    INFO]  - will validate that the bias-correction actually improved the result ...
[22:11:34    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:11:34    INFO]  - Will use (1) MLMs from the input chain: ANNZ_34,
[22:11:39    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_34/plots/
[22:11:49        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_34/plots output/PAUS_advanced7/regres/train/ANNZ_34/plots_biasCor_before
[22:11:49    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:11:49    INFO]  - Will use (1) MLMs from the input chain: ANNZ_34,
[22:11:54    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_34/plots/
[22:12:04        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_34/plots output/PAUS_advanced7/regres/train/ANNZ_34/plots_biasCor_after
[22:12:05    INFO]  - Got original [KS-test,N_poiss]: [0.110584 , 6.00267] , after the bias-correction: [0.0545942 , 5.04067] --> will KEEP the correction !

(22:12 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:12 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m35[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:12 INFO) 
[22:12:09    INFO]  -----------------------------------------------------
[22:12:09    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:12:09    INFO]  -----------------------------------------------------------------------------------------------------------
[22:12:10    INFO]  - starting ANNZ::Init()  ... 
[22:12:11    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_35/saveOpt.txt ...
[22:12:26    INFO]  - starting ANNZ::Train_singleReg() ... 
[22:12:26    INFO] ----------------------------------------------------------------------------------------------------
[22:12:26    INFO]  - will book (ANNZ_35) method(BDT) with options: :NTrees=460:BoostType=Bagging:VarTransform=N,P
[22:12:26    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:12:26    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[22:12:26    INFO]      cuts (train):        ,
[22:12:26    INFO]      cuts (valid):       
[22:12:26    INFO]    - weights:            1
[22:12:26    INFO] ----------------------------------------------------------------------------------------------------
[22:12:26    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:13:16    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_35/ANNZ_35_weights/saveTrainOpt_ANNZ_35.txt ...
[22:13:21    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_35 ... 
[22:13:21    INFO]  - Will gen. input-parameter errors ...
[22:13:23    INFO]  - starting ANNZ::loadReaders() ... 
[22:13:35    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[22:16:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:16:42    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[22:16:42    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:16:42    INFO]  -----------------------------------------------------------------------------------------------------------
[22:17:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:17:38    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[22:17:38    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[22:17:38    INFO]  -----------------------------------------------------------------------------------------------------------
[22:17:38    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[22:20:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:20:43    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[22:20:43    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[22:20:43    INFO]  -----------------------------------------------------------------------------------------------------------
[22:21:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:21:50    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[22:21:50    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[22:21:50    INFO]  -----------------------------------------------------------------------------------------------------------
[22:21:53    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_35/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:21:56    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:21:56    INFO]  - will try to derive a bias correction ... 
[22:21:56    INFO]  - will validate that training produced an XML file for later ... 
[22:21:56    INFO]  - starting ANNZ::loadReaders() ... 
[22:22:00    INFO]  - will validate that the training was not a complete failure ... 
[22:22:00    INFO]  - training seems to have been successful! will move on ...
[22:22:00    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[22:22:05    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:22:06    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:22:07    INFO] ----------------------------------------------------------------------------------------------------
[22:22:07    INFO]  - will book (ANNZ_35_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[22:22:07    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:22:07    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[22:22:07    INFO]    - weights:            1
[22:22:07    INFO] ----------------------------------------------------------------------------------------------------
[22:22:08    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:22:19    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_35 ... 
[22:22:19    INFO]  - Will gen. input-parameter errors ...
[22:22:21    INFO]  - starting ANNZ::loadReaders() ... 
[22:22:34    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[22:25:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:25:55    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[22:25:55    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:25:55    INFO]  -----------------------------------------------------------------------------------------------------------
[22:26:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:26:55    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[22:26:55    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[22:26:55    INFO]  -----------------------------------------------------------------------------------------------------------
[22:26:55    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[22:30:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:30:14    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[22:30:14    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[22:30:14    INFO]  -----------------------------------------------------------------------------------------------------------
[22:31:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:31:27    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[22:31:27    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[22:31:27    INFO]  -----------------------------------------------------------------------------------------------------------
[22:31:29    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_35/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:31:31    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:31:31    INFO]  - will validate that the bias-correction actually improved the result ...
[22:31:32    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:31:32    INFO]  - Will use (1) MLMs from the input chain: ANNZ_35,
[22:31:37    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_35/plots/
[22:31:47        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_35/plots output/PAUS_advanced7/regres/train/ANNZ_35/plots_biasCor_before
[22:31:47    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:31:47    INFO]  - Will use (1) MLMs from the input chain: ANNZ_35,
[22:31:52    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_35/plots/
[22:32:03        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_35/plots output/PAUS_advanced7/regres/train/ANNZ_35/plots_biasCor_after
[22:32:03    INFO]  - Got original [KS-test,N_poiss]: [0.0564429 , 5.76674] , after the bias-correction: [0.0404094 , 4.48866] --> will KEEP the correction !

(22:32 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:32 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m36[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=300:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:32 INFO) 
[22:32:08    INFO]  -----------------------------------------------------
[22:32:08    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:32:08    INFO]  -----------------------------------------------------------------------------------------------------------
[22:32:09    INFO]  - starting ANNZ::Init()  ... 
[22:32:10    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_36/saveOpt.txt ...
[22:32:25    INFO]  - starting ANNZ::Train_singleReg() ... 
[22:32:25    INFO] ----------------------------------------------------------------------------------------------------
[22:32:25    INFO]  - will book (ANNZ_36) method(BDT) with options: :NTrees=300:BoostType=Bagging:VarTransform=N
[22:32:25    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:32:25    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[22:32:25    INFO]      cuts (train):        ,
[22:32:25    INFO]      cuts (valid):       
[22:32:25    INFO]    - weights:            1
[22:32:25    INFO] ----------------------------------------------------------------------------------------------------
[22:32:25    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:32:56    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_36/ANNZ_36_weights/saveTrainOpt_ANNZ_36.txt ...
[22:32:59    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_36 ... 
[22:32:59    INFO]  - Will gen. input-parameter errors ...
[22:33:01    INFO]  - starting ANNZ::loadReaders() ... 
[22:33:08    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[22:34:30    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:34:30    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[22:34:30    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:34:30    INFO]  -----------------------------------------------------------------------------------------------------------
[22:34:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:34:55    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[22:34:55    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[22:34:55    INFO]  -----------------------------------------------------------------------------------------------------------
[22:34:55    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[22:36:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:36:17    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[22:36:17    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[22:36:17    INFO]  -----------------------------------------------------------------------------------------------------------
[22:36:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:36:47    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[22:36:47    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[22:36:47    INFO]  -----------------------------------------------------------------------------------------------------------
[22:36:47    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_36/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:36:49    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:36:49    INFO]  - will try to derive a bias correction ... 
[22:36:49    INFO]  - will validate that training produced an XML file for later ... 
[22:36:49    INFO]  - starting ANNZ::loadReaders() ... 
[22:36:52    INFO]  - will validate that the training was not a complete failure ... 
[22:36:52    INFO]  - training seems to have been successful! will move on ...
[22:36:52    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[22:36:56    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:36:57    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:36:59    INFO] ----------------------------------------------------------------------------------------------------
[22:36:59    INFO]  - will book (ANNZ_36_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[22:36:59    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:36:59    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[22:36:59    INFO]    - weights:            1
[22:36:59    INFO] ----------------------------------------------------------------------------------------------------
[22:36:59    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:37:08    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_36 ... 
[22:37:08    INFO]  - Will gen. input-parameter errors ...
[22:37:10    INFO]  - starting ANNZ::loadReaders() ... 
[22:37:17    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[22:38:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:38:42    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[22:38:42    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:38:42    INFO]  -----------------------------------------------------------------------------------------------------------
[22:39:08    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:39:08    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[22:39:08    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[22:39:08    INFO]  -----------------------------------------------------------------------------------------------------------
[22:39:08    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[22:40:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:40:33    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[22:40:33    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[22:40:33    INFO]  -----------------------------------------------------------------------------------------------------------
[22:41:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:41:05    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[22:41:05    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[22:41:05    INFO]  -----------------------------------------------------------------------------------------------------------
[22:41:05    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_36/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:41:06    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:41:06    INFO]  - will validate that the bias-correction actually improved the result ...
[22:41:06    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:41:06    INFO]  - Will use (1) MLMs from the input chain: ANNZ_36,
[22:41:12    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_36/plots/
[22:41:22        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_36/plots output/PAUS_advanced7/regres/train/ANNZ_36/plots_biasCor_before
[22:41:22    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:41:22    INFO]  - Will use (1) MLMs from the input chain: ANNZ_36,
[22:41:26    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_36/plots/
[22:41:37        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_36/plots output/PAUS_advanced7/regres/train/ANNZ_36/plots_biasCor_after
[22:41:37    INFO]  - Got original [KS-test,N_poiss]: [0.0671715 , 5.72817] , after the bias-correction: [0.0481798 , 4.5706] --> will KEEP the correction !

(22:41 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:41 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m37[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=790:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:41 INFO) 
[22:41:42    INFO]  -----------------------------------------------------
[22:41:42    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:41:42    INFO]  -----------------------------------------------------------------------------------------------------------
[22:41:43    INFO]  - starting ANNZ::Init()  ... 
[22:41:44    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_37/saveOpt.txt ...
[22:41:59    INFO]  - starting ANNZ::Train_singleReg() ... 
[22:41:59    INFO] ----------------------------------------------------------------------------------------------------
[22:41:59    INFO]  - will book (ANNZ_37) method(BDT) with options: :NTrees=790:BoostType=AdaBoost:VarTransform=N
[22:41:59    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:41:59    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[22:41:59    INFO]      cuts (train):        ,
[22:41:59    INFO]      cuts (valid):       
[22:41:59    INFO]    - weights:            1
[22:41:59    INFO] ----------------------------------------------------------------------------------------------------
[22:42:00    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:42:51    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_37/ANNZ_37_weights/saveTrainOpt_ANNZ_37.txt ...
[22:42:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_37 ... 
[22:42:56    INFO]  - Will gen. input-parameter errors ...
[22:42:58    INFO]  - starting ANNZ::loadReaders() ... 
[22:43:08    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[22:46:03    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:46:03    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[22:46:03    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:46:03    INFO]  -----------------------------------------------------------------------------------------------------------
[22:46:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:46:55    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[22:46:55    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[22:46:55    INFO]  -----------------------------------------------------------------------------------------------------------
[22:46:55    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[22:49:49    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:49:49    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[22:49:49    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[22:49:49    INFO]  -----------------------------------------------------------------------------------------------------------
[22:50:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:50:54    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[22:50:54    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[22:50:54    INFO]  -----------------------------------------------------------------------------------------------------------
[22:50:56    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_37/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:50:58    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:50:58    INFO]  - will try to derive a bias correction ... 
[22:50:58    INFO]  - will validate that training produced an XML file for later ... 
[22:50:58    INFO]  - starting ANNZ::loadReaders() ... 
[22:51:01    INFO]  - will validate that the training was not a complete failure ... 
[22:51:01    INFO]  - training seems to have been successful! will move on ...
[22:51:01    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[22:51:05    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:51:07    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[22:51:08    INFO] ----------------------------------------------------------------------------------------------------
[22:51:08    INFO]  - will book (ANNZ_37_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[22:51:08    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:51:08    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[22:51:08    INFO]    - weights:            1
[22:51:08    INFO] ----------------------------------------------------------------------------------------------------
[22:51:08    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:51:17    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_37 ... 
[22:51:17    INFO]  - Will gen. input-parameter errors ...
[22:51:19    INFO]  - starting ANNZ::loadReaders() ... 
[22:51:27    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[22:53:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:53:22    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[22:53:22    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[22:53:22    INFO]  -----------------------------------------------------------------------------------------------------------
[22:53:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:53:56    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[22:53:56    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[22:53:56    INFO]  -----------------------------------------------------------------------------------------------------------
[22:53:56    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[22:55:50    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:55:50    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[22:55:50    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[22:55:50    INFO]  -----------------------------------------------------------------------------------------------------------
[22:56:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[22:56:32    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[22:56:32    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[22:56:32    INFO]  -----------------------------------------------------------------------------------------------------------
[22:56:32    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_37/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[22:56:34    INFO]  - ending makeTreeRegClsOneMLM() ... 
[22:56:34    INFO]  - will validate that the bias-correction actually improved the result ...
[22:56:34    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:56:34    INFO]  - Will use (1) MLMs from the input chain: ANNZ_37,
Warning in <Fit>: Fit data is empty 
[22:56:39    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_37/plots/
[22:56:50        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_37/plots output/PAUS_advanced7/regres/train/ANNZ_37/plots_biasCor_before
[22:56:50    INFO]  - starting ANNZ::doMetricPlots() ... 
[22:56:50    INFO]  - Will use (1) MLMs from the input chain: ANNZ_37,
Warning in <Fit>: Fit data is empty 
[22:56:54    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_37/plots/
[22:57:05        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_37/plots output/PAUS_advanced7/regres/train/ANNZ_37/plots_biasCor_after
[22:57:05    INFO]  - Got original [KS-test,N_poiss]: [0.0860136 , 5.56846] , after the bias-correction: [0.0488263 , 4.49557] --> will KEEP the correction !

(22:57 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(22:57 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m38[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=260:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(22:57 INFO) 
[22:57:10    INFO]  -----------------------------------------------------
[22:57:10    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[22:57:10    INFO]  -----------------------------------------------------------------------------------------------------------
[22:57:11    INFO]  - starting ANNZ::Init()  ... 
[22:57:12    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_38/saveOpt.txt ...
[22:57:27    INFO]  - starting ANNZ::Train_singleReg() ... 
[22:57:27    INFO] ----------------------------------------------------------------------------------------------------
[22:57:27    INFO]  - will book (ANNZ_38) method(BDT) with options: :NTrees=260:BoostType=Bagging:VarTransform=N,P
[22:57:27    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[22:57:27    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[22:57:27    INFO]      cuts (train):        ,
[22:57:27    INFO]      cuts (valid):       
[22:57:27    INFO]    - weights:            1
[22:57:27    INFO] ----------------------------------------------------------------------------------------------------
[22:57:27    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[22:57:55    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_38/ANNZ_38_weights/saveTrainOpt_ANNZ_38.txt ...
[22:57:58    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_38 ... 
[22:57:58    INFO]  - Will gen. input-parameter errors ...
[22:58:00    INFO]  - starting ANNZ::loadReaders() ... 
[22:58:07    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[23:00:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:00:07    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[23:00:07    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:00:07    INFO]  -----------------------------------------------------------------------------------------------------------
[23:00:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:00:43    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[23:00:43    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[23:00:43    INFO]  -----------------------------------------------------------------------------------------------------------
[23:00:43    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[23:02:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:02:42    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[23:02:42    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[23:02:42    INFO]  -----------------------------------------------------------------------------------------------------------
[23:03:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:03:27    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[23:03:27    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[23:03:27    INFO]  -----------------------------------------------------------------------------------------------------------
[23:03:27    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_38/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:03:29    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:03:29    INFO]  - will try to derive a bias correction ... 
[23:03:29    INFO]  - will validate that training produced an XML file for later ... 
[23:03:29    INFO]  - starting ANNZ::loadReaders() ... 
[23:03:31    INFO]  - will validate that the training was not a complete failure ... 
[23:03:31    INFO]  - training seems to have been successful! will move on ...
[23:03:31    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:03:35    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:03:36    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:03:38    INFO] ----------------------------------------------------------------------------------------------------
[23:03:38    INFO]  - will book (ANNZ_38_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:03:38    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:03:38    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[23:03:38    INFO]    - weights:            1
[23:03:38    INFO] ----------------------------------------------------------------------------------------------------
[23:03:38    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:03:48    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_38 ... 
[23:03:48    INFO]  - Will gen. input-parameter errors ...
[23:03:50    INFO]  - starting ANNZ::loadReaders() ... 
[23:03:57    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[23:05:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:05:59    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[23:05:59    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:05:59    INFO]  -----------------------------------------------------------------------------------------------------------
[23:06:36    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:06:36    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[23:06:36    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[23:06:36    INFO]  -----------------------------------------------------------------------------------------------------------
[23:06:36    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[23:08:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:08:37    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[23:08:37    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[23:08:37    INFO]  -----------------------------------------------------------------------------------------------------------
[23:09:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:09:22    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[23:09:22    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[23:09:22    INFO]  -----------------------------------------------------------------------------------------------------------
[23:09:22    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_38/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:09:23    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:09:23    INFO]  - will validate that the bias-correction actually improved the result ...
[23:09:23    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:09:23    INFO]  - Will use (1) MLMs from the input chain: ANNZ_38,
[23:09:28    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_38/plots/
[23:09:39        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_38/plots output/PAUS_advanced7/regres/train/ANNZ_38/plots_biasCor_before
[23:09:39    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:09:39    INFO]  - Will use (1) MLMs from the input chain: ANNZ_38,
[23:09:43    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_38/plots/
[23:09:54        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_38/plots output/PAUS_advanced7/regres/train/ANNZ_38/plots_biasCor_after
[23:09:54    INFO]  - Got original [KS-test,N_poiss]: [0.0563349 , 5.81034] , after the bias-correction: [0.040794 , 4.37042] --> will KEEP the correction !

(23:09 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:09 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m39[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:09 INFO) 
[23:09:58    INFO]  -----------------------------------------------------
[23:09:58    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:09:58    INFO]  -----------------------------------------------------------------------------------------------------------
[23:09:59    INFO]  - starting ANNZ::Init()  ... 
[23:10:00    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_39/saveOpt.txt ...
[23:10:15    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:10:16    INFO] ----------------------------------------------------------------------------------------------------
[23:10:16    INFO]  - will book (ANNZ_39) method(BDT) with options: :NTrees=500:BoostType=Bagging:VarTransform=N,P
[23:10:16    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:10:16    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[23:10:16    INFO]      cuts (train):        ,
[23:10:16    INFO]      cuts (valid):       
[23:10:16    INFO]    - weights:            1
[23:10:16    INFO] ----------------------------------------------------------------------------------------------------
[23:10:16    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:11:09    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_39/ANNZ_39_weights/saveTrainOpt_ANNZ_39.txt ...
[23:11:15    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_39 ... 
[23:11:15    INFO]  - Will gen. input-parameter errors ...
[23:11:17    INFO]  - starting ANNZ::loadReaders() ... 
[23:11:30    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[23:14:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:14:54    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[23:14:54    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:14:54    INFO]  -----------------------------------------------------------------------------------------------------------
[23:15:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:15:55    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[23:15:55    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[23:15:55    INFO]  -----------------------------------------------------------------------------------------------------------
[23:15:55    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[23:19:18    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:19:18    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[23:19:18    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[23:19:18    INFO]  -----------------------------------------------------------------------------------------------------------
[23:20:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:20:32    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[23:20:32    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[23:20:32    INFO]  -----------------------------------------------------------------------------------------------------------
[23:20:32    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_39/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:20:35    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:20:35    INFO]  - will try to derive a bias correction ... 
[23:20:35    INFO]  - will validate that training produced an XML file for later ... 
[23:20:35    INFO]  - starting ANNZ::loadReaders() ... 
[23:20:40    INFO]  - will validate that the training was not a complete failure ... 
[23:20:40    INFO]  - training seems to have been successful! will move on ...
[23:20:40    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:20:45    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:20:46    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:20:47    INFO] ----------------------------------------------------------------------------------------------------
[23:20:47    INFO]  - will book (ANNZ_39_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:20:47    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:20:47    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[23:20:47    INFO]    - weights:            1
[23:20:47    INFO] ----------------------------------------------------------------------------------------------------
[23:20:48    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:21:00    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_39 ... 
[23:21:00    INFO]  - Will gen. input-parameter errors ...
[23:21:02    INFO]  - starting ANNZ::loadReaders() ... 
[23:21:16    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[23:24:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:24:54    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[23:24:54    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:24:54    INFO]  -----------------------------------------------------------------------------------------------------------
[23:25:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:25:59    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[23:25:59    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[23:25:59    INFO]  -----------------------------------------------------------------------------------------------------------
[23:25:59    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[23:29:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:29:34    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[23:29:34    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[23:29:34    INFO]  -----------------------------------------------------------------------------------------------------------
[23:30:53    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:30:53    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[23:30:53    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[23:30:53    INFO]  -----------------------------------------------------------------------------------------------------------
[23:30:53    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_39/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:30:55    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:30:55    INFO]  - will validate that the bias-correction actually improved the result ...
[23:30:55    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:30:55    INFO]  - Will use (1) MLMs from the input chain: ANNZ_39,
[23:31:01    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_39/plots/
[23:31:11        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_39/plots output/PAUS_advanced7/regres/train/ANNZ_39/plots_biasCor_before
[23:31:11    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:31:11    INFO]  - Will use (1) MLMs from the input chain: ANNZ_39,
[23:31:16    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_39/plots/
[23:31:26        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_39/plots output/PAUS_advanced7/regres/train/ANNZ_39/plots_biasCor_after
[23:31:26    INFO]  - Got original [KS-test,N_poiss]: [0.056258 , 5.75681] , after the bias-correction: [0.0403324 , 4.48132] --> will KEEP the correction !

(23:31 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:31 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m40[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=300:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:31 INFO) 
[23:31:31    INFO]  -----------------------------------------------------
[23:31:31    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:31:31    INFO]  -----------------------------------------------------------------------------------------------------------
[23:31:32    INFO]  - starting ANNZ::Init()  ... 
[23:31:34    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_40/saveOpt.txt ...
[23:31:48    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:31:48    INFO] ----------------------------------------------------------------------------------------------------
[23:31:48    INFO]  - will book (ANNZ_40) method(BDT) with options: :NTrees=300:BoostType=Bagging:VarTransform=N
[23:31:48    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:31:48    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[23:31:48    INFO]      cuts (train):        ,
[23:31:48    INFO]      cuts (valid):       
[23:31:48    INFO]    - weights:            1
[23:31:48    INFO] ----------------------------------------------------------------------------------------------------
[23:31:49    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:32:18    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_40/ANNZ_40_weights/saveTrainOpt_ANNZ_40.txt ...
[23:32:22    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_40 ... 
[23:32:22    INFO]  - Will gen. input-parameter errors ...
[23:32:24    INFO]  - starting ANNZ::loadReaders() ... 
[23:32:31    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[23:33:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:33:52    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[23:33:52    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:33:52    INFO]  -----------------------------------------------------------------------------------------------------------
[23:34:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:34:16    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[23:34:16    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[23:34:16    INFO]  -----------------------------------------------------------------------------------------------------------
[23:34:16    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[23:35:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:35:37    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[23:35:37    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[23:35:37    INFO]  -----------------------------------------------------------------------------------------------------------
[23:36:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:36:07    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[23:36:07    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[23:36:07    INFO]  -----------------------------------------------------------------------------------------------------------
[23:36:08    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_40/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:36:09    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:36:09    INFO]  - will try to derive a bias correction ... 
[23:36:09    INFO]  - will validate that training produced an XML file for later ... 
[23:36:09    INFO]  - starting ANNZ::loadReaders() ... 
[23:36:12    INFO]  - will validate that the training was not a complete failure ... 
[23:36:12    INFO]  - training seems to have been successful! will move on ...
[23:36:12    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[23:36:16    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:36:18    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[23:36:19    INFO] ----------------------------------------------------------------------------------------------------
[23:36:19    INFO]  - will book (ANNZ_40_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[23:36:19    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:36:19    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[23:36:19    INFO]    - weights:            1
[23:36:19    INFO] ----------------------------------------------------------------------------------------------------
[23:36:19    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:36:28    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_40 ... 
[23:36:28    INFO]  - Will gen. input-parameter errors ...
[23:36:30    INFO]  - starting ANNZ::loadReaders() ... 
[23:36:37    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[23:38:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:38:02    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[23:38:02    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:38:02    INFO]  -----------------------------------------------------------------------------------------------------------
[23:38:27    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:38:27    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[23:38:27    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[23:38:27    INFO]  -----------------------------------------------------------------------------------------------------------
[23:38:27    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[23:39:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:39:52    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[23:39:52    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[23:39:52    INFO]  -----------------------------------------------------------------------------------------------------------
[23:40:23    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:40:23    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[23:40:23    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[23:40:23    INFO]  -----------------------------------------------------------------------------------------------------------
[23:40:23    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_40/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[23:40:25    INFO]  - ending makeTreeRegClsOneMLM() ... 
[23:40:25    INFO]  - will validate that the bias-correction actually improved the result ...
[23:40:25    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:40:25    INFO]  - Will use (1) MLMs from the input chain: ANNZ_40,
[23:40:30    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_40/plots/
[23:40:40        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_40/plots output/PAUS_advanced7/regres/train/ANNZ_40/plots_biasCor_before
[23:40:40    INFO]  - starting ANNZ::doMetricPlots() ... 
[23:40:40    INFO]  - Will use (1) MLMs from the input chain: ANNZ_40,
[23:40:45    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_40/plots/
[23:40:55        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_40/plots output/PAUS_advanced7/regres/train/ANNZ_40/plots_biasCor_after
[23:40:55    INFO]  - Got original [KS-test,N_poiss]: [0.0671715 , 5.72817] , after the bias-correction: [0.0481798 , 4.5706] --> will KEEP the correction !

(23:40 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(23:40 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m41[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(23:40 INFO) 
[23:40:59    INFO]  -----------------------------------------------------
[23:40:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[23:40:59    INFO]  -----------------------------------------------------------------------------------------------------------
[23:41:00    INFO]  - starting ANNZ::Init()  ... 
[23:41:02    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_41/saveOpt.txt ...
[23:41:16    INFO]  - starting ANNZ::Train_singleReg() ... 
[23:41:16    INFO] ----------------------------------------------------------------------------------------------------
[23:41:16    INFO]  - will book (ANNZ_41) method(BDT) with options: :NTrees=430:BoostType=AdaBoostR2:VarTransform=N,P
[23:41:16    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[23:41:16    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[23:41:16    INFO]      cuts (train):        ,
[23:41:16    INFO]      cuts (valid):       
[23:41:16    INFO]    - weights:            1
[23:41:16    INFO] ----------------------------------------------------------------------------------------------------
[23:41:16    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[23:41:53    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_41/ANNZ_41_weights/saveTrainOpt_ANNZ_41.txt ...
[23:41:56    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_41 ... 
[23:41:56    INFO]  - Will gen. input-parameter errors ...
[23:41:58    INFO]  - starting ANNZ::loadReaders() ... 
[23:42:10    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[23:49:41    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:49:41    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[23:49:41    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[23:49:41    INFO]  -----------------------------------------------------------------------------------------------------------
[23:51:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:51:55    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[23:51:55    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[23:51:55    INFO]  -----------------------------------------------------------------------------------------------------------
[23:51:56    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[23:59:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[23:59:26    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[23:59:26    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[23:59:26    INFO]  -----------------------------------------------------------------------------------------------------------
[00:02:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:02:13    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[00:02:13    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[00:02:13    INFO]  -----------------------------------------------------------------------------------------------------------
[00:02:16    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_41/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:02:17    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:02:17    INFO]  - will try to derive a bias correction ... 
[00:02:17    INFO]  - will validate that training produced an XML file for later ... 
[00:02:17    INFO]  - starting ANNZ::loadReaders() ... 
[00:02:19    INFO]  - will validate that the training was not a complete failure ... 
[00:02:19    INFO]  - training seems to have been successful! will move on ...
[00:02:19    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[00:02:23    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:02:24    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:02:25    INFO] ----------------------------------------------------------------------------------------------------
[00:02:25    INFO]  - will book (ANNZ_41_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[00:02:25    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:02:25    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[00:02:25    INFO]    - weights:            1
[00:02:25    INFO] ----------------------------------------------------------------------------------------------------
[00:02:26    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:02:35    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_41 ... 
[00:02:35    INFO]  - Will gen. input-parameter errors ...
[00:02:36    INFO]  - starting ANNZ::loadReaders() ... 
[00:02:47    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[00:09:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:09:22    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[00:09:22    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[00:09:22    INFO]  -----------------------------------------------------------------------------------------------------------
[00:11:21    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:11:21    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[00:11:21    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[00:11:21    INFO]  -----------------------------------------------------------------------------------------------------------
[00:11:21    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[00:17:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:17:55    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[00:17:55    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[00:17:55    INFO]  -----------------------------------------------------------------------------------------------------------
[00:20:22    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:20:22    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[00:20:22    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[00:20:22    INFO]  -----------------------------------------------------------------------------------------------------------
[00:20:25    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_41/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:20:27    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:20:27    INFO]  - will validate that the bias-correction actually improved the result ...
[00:20:27    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:20:27    INFO]  - Will use (1) MLMs from the input chain: ANNZ_41,
[00:20:32    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_41/plots/
[00:20:43        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_41/plots output/PAUS_advanced7/regres/train/ANNZ_41/plots_biasCor_before
[00:20:43    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:20:43    INFO]  - Will use (1) MLMs from the input chain: ANNZ_41,
[00:20:47    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_41/plots/
[00:20:57        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_41/plots output/PAUS_advanced7/regres/train/ANNZ_41/plots_biasCor_after
[00:20:58    INFO]  - Got original [KS-test,N_poiss]: [0.0687279 , 7.0424] , after the bias-correction: [0.0391555 , 5.12506] --> will KEEP the correction !

(00:21 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:21 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m42[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=AdaBoostR2[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:21 INFO) 
[00:21:02    INFO]  -----------------------------------------------------
[00:21:02    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:21:02    INFO]  -----------------------------------------------------------------------------------------------------------
[00:21:03    INFO]  - starting ANNZ::Init()  ... 
[00:21:04    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_42/saveOpt.txt ...
[00:21:19    INFO]  - starting ANNZ::Train_singleReg() ... 
[00:21:19    INFO] ----------------------------------------------------------------------------------------------------
[00:21:19    INFO]  - will book (ANNZ_42) method(BDT) with options: :NTrees=380:BoostType=AdaBoostR2:VarTransform=N,P,D
[00:21:19    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:21:19    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[00:21:19    INFO]      cuts (train):        ,
[00:21:19    INFO]      cuts (valid):       
[00:21:19    INFO]    - weights:            1
[00:21:19    INFO] ----------------------------------------------------------------------------------------------------
[00:21:20    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:21:52    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_42/ANNZ_42_weights/saveTrainOpt_ANNZ_42.txt ...
[00:21:55    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_42 ... 
[00:21:55    INFO]  - Will gen. input-parameter errors ...
[00:21:56    INFO]  - starting ANNZ::loadReaders() ... 
[00:22:06    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[00:28:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:28:09    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[00:28:09    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[00:28:09    INFO]  -----------------------------------------------------------------------------------------------------------
[00:29:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:29:57    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[00:29:57    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[00:29:57    INFO]  -----------------------------------------------------------------------------------------------------------
[00:29:57    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[00:36:01    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:36:01    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[00:36:01    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[00:36:01    INFO]  -----------------------------------------------------------------------------------------------------------
[00:38:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:38:16    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[00:38:16    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[00:38:16    INFO]  -----------------------------------------------------------------------------------------------------------
[00:38:19    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_42/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:38:20    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:38:20    INFO]  - will try to derive a bias correction ... 
[00:38:20    INFO]  - will validate that training produced an XML file for later ... 
[00:38:20    INFO]  - starting ANNZ::loadReaders() ... 
[00:38:22    INFO]  - will validate that the training was not a complete failure ... 
[00:38:22    INFO]  - training seems to have been successful! will move on ...
[00:38:22    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[00:38:25    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:38:26    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[00:38:28    INFO] ----------------------------------------------------------------------------------------------------
[00:38:28    INFO]  - will book (ANNZ_42_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[00:38:28    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:38:28    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[00:38:28    INFO]    - weights:            1
[00:38:28    INFO] ----------------------------------------------------------------------------------------------------
[00:38:28    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:38:36    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_42 ... 
[00:38:36    INFO]  - Will gen. input-parameter errors ...
[00:38:38    INFO]  - starting ANNZ::loadReaders() ... 
[00:38:47    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[00:44:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:44:31    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[00:44:31    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[00:44:31    INFO]  -----------------------------------------------------------------------------------------------------------
[00:46:14    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:46:14    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[00:46:14    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[00:46:14    INFO]  -----------------------------------------------------------------------------------------------------------
[00:46:14    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[00:51:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:51:57    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[00:51:57    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[00:51:57    INFO]  -----------------------------------------------------------------------------------------------------------
[00:54:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:54:05    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[00:54:05    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[00:54:05    INFO]  -----------------------------------------------------------------------------------------------------------
[00:54:07    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_42/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[00:54:09    INFO]  - ending makeTreeRegClsOneMLM() ... 
[00:54:09    INFO]  - will validate that the bias-correction actually improved the result ...
[00:54:09    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:54:09    INFO]  - Will use (1) MLMs from the input chain: ANNZ_42,
[00:54:14    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_42/plots/
[00:54:24        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_42/plots output/PAUS_advanced7/regres/train/ANNZ_42/plots_biasCor_before
[00:54:24    INFO]  - starting ANNZ::doMetricPlots() ... 
[00:54:24    INFO]  - Will use (1) MLMs from the input chain: ANNZ_42,
[00:54:29    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_42/plots/
[00:54:39        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_42/plots output/PAUS_advanced7/regres/train/ANNZ_42/plots_biasCor_after
[00:54:39    INFO]  - Got original [KS-test,N_poiss]: [0.0704204 , 7.07135] , after the bias-correction: [0.0412328 , 4.96438] --> will KEEP the correction !

(00:54 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(00:54 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m43[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(00:54 INFO) 
[00:54:43    INFO]  -----------------------------------------------------
[00:54:43    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[00:54:43    INFO]  -----------------------------------------------------------------------------------------------------------
[00:54:44    INFO]  - starting ANNZ::Init()  ... 
[00:54:46    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_43/saveOpt.txt ...
[00:55:00    INFO]  - starting ANNZ::Train_singleReg() ... 
[00:55:00    INFO] ----------------------------------------------------------------------------------------------------
[00:55:00    INFO]  - will book (ANNZ_43) method(BDT) with options: :NTrees=370:BoostType=AdaBoost:VarTransform=N,P
[00:55:00    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[00:55:00    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[00:55:00    INFO]      cuts (train):        ,
[00:55:00    INFO]      cuts (valid):       
[00:55:00    INFO]    - weights:            1
[00:55:00    INFO] ----------------------------------------------------------------------------------------------------
[00:55:01    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[00:55:26    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_43/ANNZ_43_weights/saveTrainOpt_ANNZ_43.txt ...
[00:55:28    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_43 ... 
[00:55:28    INFO]  - Will gen. input-parameter errors ...
[00:55:30    INFO]  - starting ANNZ::loadReaders() ... 
[00:55:35    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[00:57:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:57:34    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[00:57:34    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[00:57:34    INFO]  -----------------------------------------------------------------------------------------------------------
[00:58:09    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[00:58:09    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[00:58:09    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[00:58:09    INFO]  -----------------------------------------------------------------------------------------------------------
[00:58:09    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[01:00:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:00:07    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:00:07    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[01:00:07    INFO]  -----------------------------------------------------------------------------------------------------------
[01:00:51    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:00:51    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:00:51    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[01:00:51    INFO]  -----------------------------------------------------------------------------------------------------------
[01:00:51    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_43/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:00:53    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:00:53    INFO]  - will try to derive a bias correction ... 
[01:00:53    INFO]  - will validate that training produced an XML file for later ... 
[01:00:53    INFO]  - starting ANNZ::loadReaders() ... 
[01:00:54    INFO]  - will validate that the training was not a complete failure ... 
[01:00:54    INFO]  - training seems to have been successful! will move on ...
[01:00:54    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[01:00:57    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:00:59    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:01:00    INFO] ----------------------------------------------------------------------------------------------------
[01:01:00    INFO]  - will book (ANNZ_43_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[01:01:00    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:01:00    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[01:01:00    INFO]    - weights:            1
[01:01:00    INFO] ----------------------------------------------------------------------------------------------------
[01:01:00    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:01:08    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_43 ... 
[01:01:08    INFO]  - Will gen. input-parameter errors ...
[01:01:10    INFO]  - starting ANNZ::loadReaders() ... 
[01:01:16    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[01:03:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:03:31    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:03:31    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[01:03:31    INFO]  -----------------------------------------------------------------------------------------------------------
[01:04:11    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:04:11    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:04:11    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[01:04:11    INFO]  -----------------------------------------------------------------------------------------------------------
[01:04:11    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[01:06:25    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:06:25    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:06:25    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[01:06:25    INFO]  -----------------------------------------------------------------------------------------------------------
[01:07:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:07:16    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:07:16    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[01:07:16    INFO]  -----------------------------------------------------------------------------------------------------------
[01:07:18    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_43/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:07:19    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:07:19    INFO]  - will validate that the bias-correction actually improved the result ...
[01:07:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:07:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_43,
[01:07:24    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_43/plots/
[01:07:35        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_43/plots output/PAUS_advanced7/regres/train/ANNZ_43/plots_biasCor_before
[01:07:35    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:07:35    INFO]  - Will use (1) MLMs from the input chain: ANNZ_43,
[01:07:39    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_43/plots/
[01:07:50        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_43/plots output/PAUS_advanced7/regres/train/ANNZ_43/plots_biasCor_after
[01:07:50    INFO]  - Got original [KS-test,N_poiss]: [0.11043 , 5.99376] , after the bias-correction: [0.0542559 , 5.00704] --> will KEEP the correction !

(01:07 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(01:07 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m44[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=320:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(01:07 INFO) 
[01:07:54    INFO]  -----------------------------------------------------
[01:07:54    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[01:07:54    INFO]  -----------------------------------------------------------------------------------------------------------
[01:07:55    INFO]  - starting ANNZ::Init()  ... 
[01:07:56    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_44/saveOpt.txt ...
[01:08:11    INFO]  - starting ANNZ::Train_singleReg() ... 
[01:08:11    INFO] ----------------------------------------------------------------------------------------------------
[01:08:11    INFO]  - will book (ANNZ_44) method(BDT) with options: :NTrees=320:BoostType=AdaBoostR2:VarTransform=N,P
[01:08:11    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:08:11    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[01:08:11    INFO]      cuts (train):        ,
[01:08:11    INFO]      cuts (valid):       
[01:08:11    INFO]    - weights:            1
[01:08:11    INFO] ----------------------------------------------------------------------------------------------------
[01:08:12    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:08:38    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_44/ANNZ_44_weights/saveTrainOpt_ANNZ_44.txt ...
[01:08:41    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_44 ... 
[01:08:41    INFO]  - Will gen. input-parameter errors ...
[01:08:43    INFO]  - starting ANNZ::loadReaders() ... 
[01:08:50    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[01:13:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:13:32    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:13:32    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[01:13:32    INFO]  -----------------------------------------------------------------------------------------------------------
[01:14:56    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:14:56    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:14:56    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[01:14:56    INFO]  -----------------------------------------------------------------------------------------------------------
[01:14:56    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[01:19:40    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:19:40    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:19:40    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[01:19:40    INFO]  -----------------------------------------------------------------------------------------------------------
[01:21:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:21:24    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:21:24    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[01:21:24    INFO]  -----------------------------------------------------------------------------------------------------------
[01:21:27    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_44/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:21:28    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:21:28    INFO]  - will try to derive a bias correction ... 
[01:21:28    INFO]  - will validate that training produced an XML file for later ... 
[01:21:28    INFO]  - starting ANNZ::loadReaders() ... 
[01:21:30    INFO]  - will validate that the training was not a complete failure ... 
[01:21:30    INFO]  - training seems to have been successful! will move on ...
[01:21:30    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[01:21:33    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:21:34    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:21:35    INFO] ----------------------------------------------------------------------------------------------------
[01:21:35    INFO]  - will book (ANNZ_44_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[01:21:35    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:21:35    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[01:21:35    INFO]    - weights:            1
[01:21:35    INFO] ----------------------------------------------------------------------------------------------------
[01:21:36    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:21:44    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_44 ... 
[01:21:44    INFO]  - Will gen. input-parameter errors ...
[01:21:45    INFO]  - starting ANNZ::loadReaders() ... 
[01:21:53    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[01:26:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:26:31    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:26:31    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[01:26:31    INFO]  -----------------------------------------------------------------------------------------------------------
[01:27:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:27:54    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:27:54    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[01:27:54    INFO]  -----------------------------------------------------------------------------------------------------------
[01:27:54    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[01:32:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:32:33    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:32:33    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[01:32:33    INFO]  -----------------------------------------------------------------------------------------------------------
[01:34:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:34:17    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:34:17    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[01:34:17    INFO]  -----------------------------------------------------------------------------------------------------------
[01:34:20    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_44/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:34:22    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:34:22    INFO]  - will validate that the bias-correction actually improved the result ...
[01:34:22    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:34:22    INFO]  - Will use (1) MLMs from the input chain: ANNZ_44,
[01:34:27    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_44/plots/
[01:34:37        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_44/plots output/PAUS_advanced7/regres/train/ANNZ_44/plots_biasCor_before
[01:34:37    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:34:37    INFO]  - Will use (1) MLMs from the input chain: ANNZ_44,
[01:34:42    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_44/plots/
[01:34:52        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_44/plots output/PAUS_advanced7/regres/train/ANNZ_44/plots_biasCor_after
[01:34:52    INFO]  - Got original [KS-test,N_poiss]: [0.0699588 , 7.05615] , after the bias-correction: [0.0396171 , 4.93283] --> will KEEP the correction !

(01:34 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(01:34 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m45[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=320:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(01:34 INFO) 
[01:34:56    INFO]  -----------------------------------------------------
[01:34:56    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[01:34:56    INFO]  -----------------------------------------------------------------------------------------------------------
[01:34:57    INFO]  - starting ANNZ::Init()  ... 
[01:34:58    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_45/saveOpt.txt ...
[01:35:13    INFO]  - starting ANNZ::Train_singleReg() ... 
[01:35:13    INFO] ----------------------------------------------------------------------------------------------------
[01:35:13    INFO]  - will book (ANNZ_45) method(BDT) with options: :NTrees=320:BoostType=Bagging:VarTransform=N,P
[01:35:13    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:35:13    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[01:35:13    INFO]      cuts (train):        ,
[01:35:13    INFO]      cuts (valid):       
[01:35:13    INFO]    - weights:            1
[01:35:13    INFO] ----------------------------------------------------------------------------------------------------
[01:35:14    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:35:47    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_45/ANNZ_45_weights/saveTrainOpt_ANNZ_45.txt ...
[01:35:51    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_45 ... 
[01:35:51    INFO]  - Will gen. input-parameter errors ...
[01:35:53    INFO]  - starting ANNZ::loadReaders() ... 
[01:36:02    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[01:38:17    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:38:17    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:38:17    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[01:38:17    INFO]  -----------------------------------------------------------------------------------------------------------
[01:38:58    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:38:58    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:38:58    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[01:38:58    INFO]  -----------------------------------------------------------------------------------------------------------
[01:38:58    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[01:41:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:41:13    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:41:13    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[01:41:13    INFO]  -----------------------------------------------------------------------------------------------------------
[01:42:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:42:02    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:42:02    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[01:42:02    INFO]  -----------------------------------------------------------------------------------------------------------
[01:42:04    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_45/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:42:06    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:42:06    INFO]  - will try to derive a bias correction ... 
[01:42:06    INFO]  - will validate that training produced an XML file for later ... 
[01:42:06    INFO]  - starting ANNZ::loadReaders() ... 
[01:42:09    INFO]  - will validate that the training was not a complete failure ... 
[01:42:09    INFO]  - training seems to have been successful! will move on ...
[01:42:09    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[01:42:13    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:42:14    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:42:16    INFO] ----------------------------------------------------------------------------------------------------
[01:42:16    INFO]  - will book (ANNZ_45_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[01:42:16    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:42:16    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[01:42:16    INFO]    - weights:            1
[01:42:16    INFO] ----------------------------------------------------------------------------------------------------
[01:42:16    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:42:26    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_45 ... 
[01:42:26    INFO]  - Will gen. input-parameter errors ...
[01:42:28    INFO]  - starting ANNZ::loadReaders() ... 
[01:42:36    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[01:44:47    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:44:47    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:44:47    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[01:44:47    INFO]  -----------------------------------------------------------------------------------------------------------
[01:45:26    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:45:26    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:45:26    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[01:45:26    INFO]  -----------------------------------------------------------------------------------------------------------
[01:45:26    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[01:47:37    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:47:37    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:47:37    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[01:47:37    INFO]  -----------------------------------------------------------------------------------------------------------
[01:48:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:48:24    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:48:24    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[01:48:24    INFO]  -----------------------------------------------------------------------------------------------------------
[01:48:25    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_45/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:48:26    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:48:26    INFO]  - will validate that the bias-correction actually improved the result ...
[01:48:26    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:48:26    INFO]  - Will use (1) MLMs from the input chain: ANNZ_45,
[01:48:32    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_45/plots/
[01:48:42        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_45/plots output/PAUS_advanced7/regres/train/ANNZ_45/plots_biasCor_before
[01:48:42    INFO]  - starting ANNZ::doMetricPlots() ... 
[01:48:42    INFO]  - Will use (1) MLMs from the input chain: ANNZ_45,
[01:48:46    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_45/plots/
[01:48:57        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_45/plots output/PAUS_advanced7/regres/train/ANNZ_45/plots_biasCor_after
[01:48:57    INFO]  - Got original [KS-test,N_poiss]: [0.0563349 , 5.80948] , after the bias-correction: [0.0406402 , 4.42486] --> will KEEP the correction !

(01:49 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(01:49 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m46[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=Bagging[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(01:49 INFO) 
[01:49:01    INFO]  -----------------------------------------------------
[01:49:01    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[01:49:01    INFO]  -----------------------------------------------------------------------------------------------------------
[01:49:02    INFO]  - starting ANNZ::Init()  ... 
[01:49:04    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_46/saveOpt.txt ...
[01:49:18    INFO]  - starting ANNZ::Train_singleReg() ... 
[01:49:18    INFO] ----------------------------------------------------------------------------------------------------
[01:49:18    INFO]  - will book (ANNZ_46) method(BDT) with options: :NTrees=500:BoostType=Bagging:VarTransform=N,P
[01:49:18    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:49:18    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[01:49:18    INFO]      cuts (train):        ,
[01:49:18    INFO]      cuts (valid):       
[01:49:18    INFO]    - weights:            1
[01:49:18    INFO] ----------------------------------------------------------------------------------------------------
[01:49:19    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[01:50:12    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_46/ANNZ_46_weights/saveTrainOpt_ANNZ_46.txt ...
[01:50:17    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_46 ... 
[01:50:17    INFO]  - Will gen. input-parameter errors ...
[01:50:20    INFO]  - starting ANNZ::loadReaders() ... 
[01:50:33    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[01:53:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:53:55    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:53:55    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[01:53:55    INFO]  -----------------------------------------------------------------------------------------------------------
[01:54:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:54:57    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:54:57    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[01:54:57    INFO]  -----------------------------------------------------------------------------------------------------------
[01:54:57    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[01:58:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:58:19    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:58:19    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[01:58:19    INFO]  -----------------------------------------------------------------------------------------------------------
[01:59:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[01:59:33    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[01:59:33    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[01:59:33    INFO]  -----------------------------------------------------------------------------------------------------------
[01:59:35    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_46/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[01:59:37    INFO]  - ending makeTreeRegClsOneMLM() ... 
[01:59:37    INFO]  - will try to derive a bias correction ... 
[01:59:37    INFO]  - will validate that training produced an XML file for later ... 
[01:59:37    INFO]  - starting ANNZ::loadReaders() ... 
[01:59:42    INFO]  - will validate that the training was not a complete failure ... 
[01:59:42    INFO]  - training seems to have been successful! will move on ...
[01:59:42    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[01:59:47    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:59:48    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[01:59:49    INFO] ----------------------------------------------------------------------------------------------------
[01:59:49    INFO]  - will book (ANNZ_46_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[01:59:49    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[01:59:49    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[01:59:49    INFO]    - weights:            1
[01:59:49    INFO] ----------------------------------------------------------------------------------------------------
[01:59:50    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:00:02    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_46 ... 
[02:00:02    INFO]  - Will gen. input-parameter errors ...
[02:00:04    INFO]  - starting ANNZ::loadReaders() ... 
[02:00:18    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[02:03:59    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:03:59    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[02:03:59    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[02:03:59    INFO]  -----------------------------------------------------------------------------------------------------------
[02:05:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:05:05    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[02:05:05    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[02:05:05    INFO]  -----------------------------------------------------------------------------------------------------------
[02:05:05    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[02:08:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:08:42    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[02:08:42    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[02:08:42    INFO]  -----------------------------------------------------------------------------------------------------------
[02:10:02    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:10:02    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[02:10:02    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[02:10:02    INFO]  -----------------------------------------------------------------------------------------------------------
[02:10:05    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_46/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:10:07    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:10:07    INFO]  - will validate that the bias-correction actually improved the result ...
[02:10:07    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:10:07    INFO]  - Will use (1) MLMs from the input chain: ANNZ_46,
[02:10:13    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_46/plots/
[02:10:23        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_46/plots output/PAUS_advanced7/regres/train/ANNZ_46/plots_biasCor_before
[02:10:23    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:10:23    INFO]  - Will use (1) MLMs from the input chain: ANNZ_46,
[02:10:28    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_46/plots/
[02:10:38        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_46/plots output/PAUS_advanced7/regres/train/ANNZ_46/plots_biasCor_after
[02:10:38    INFO]  - Got original [KS-test,N_poiss]: [0.056258 , 5.75681] , after the bias-correction: [0.0403324 , 4.48132] --> will KEEP the correction !

(02:10 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(02:10 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m47[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=530:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(02:10 INFO) 
[02:10:43    INFO]  -----------------------------------------------------
[02:10:43    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[02:10:43    INFO]  -----------------------------------------------------------------------------------------------------------
[02:10:44    INFO]  - starting ANNZ::Init()  ... 
[02:10:45    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_47/saveOpt.txt ...
[02:11:00    INFO]  - starting ANNZ::Train_singleReg() ... 
[02:11:00    INFO] ----------------------------------------------------------------------------------------------------
[02:11:00    INFO]  - will book (ANNZ_47) method(BDT) with options: :NTrees=530:BoostType=AdaBoost:VarTransform=N,P
[02:11:00    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:11:00    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[02:11:00    INFO]      cuts (train):        ,
[02:11:00    INFO]      cuts (valid):       
[02:11:00    INFO]    - weights:            1
[02:11:00    INFO] ----------------------------------------------------------------------------------------------------
[02:11:01    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:11:36    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_47/ANNZ_47_weights/saveTrainOpt_ANNZ_47.txt ...
[02:11:39    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_47 ... 
[02:11:39    INFO]  - Will gen. input-parameter errors ...
[02:11:41    INFO]  - starting ANNZ::loadReaders() ... 
[02:11:48    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[02:14:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:14:24    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[02:14:24    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[02:14:24    INFO]  -----------------------------------------------------------------------------------------------------------
[02:15:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:15:10    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[02:15:10    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[02:15:10    INFO]  -----------------------------------------------------------------------------------------------------------
[02:15:11    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[02:17:42    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:17:42    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[02:17:42    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[02:17:42    INFO]  -----------------------------------------------------------------------------------------------------------
[02:18:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:18:38    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[02:18:38    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[02:18:38    INFO]  -----------------------------------------------------------------------------------------------------------
[02:18:41    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_47/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:18:42    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:18:42    INFO]  - will try to derive a bias correction ... 
[02:18:42    INFO]  - will validate that training produced an XML file for later ... 
[02:18:42    INFO]  - starting ANNZ::loadReaders() ... 
[02:18:44    INFO]  - will validate that the training was not a complete failure ... 
[02:18:44    INFO]  - training seems to have been successful! will move on ...
[02:18:44    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[02:18:48    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:18:49    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:18:50    INFO] ----------------------------------------------------------------------------------------------------
[02:18:50    INFO]  - will book (ANNZ_47_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[02:18:50    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:18:50    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[02:18:50    INFO]    - weights:            1
[02:18:50    INFO] ----------------------------------------------------------------------------------------------------
[02:18:50    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:19:00    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_47 ... 
[02:19:00    INFO]  - Will gen. input-parameter errors ...
[02:19:01    INFO]  - starting ANNZ::loadReaders() ... 
[02:19:08    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[02:21:32    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:21:32    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[02:21:32    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[02:21:32    INFO]  -----------------------------------------------------------------------------------------------------------
[02:22:15    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:22:15    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[02:22:15    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[02:22:15    INFO]  -----------------------------------------------------------------------------------------------------------
[02:22:15    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[02:24:38    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:24:38    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[02:24:38    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[02:24:38    INFO]  -----------------------------------------------------------------------------------------------------------
[02:25:33    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:25:33    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[02:25:33    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[02:25:33    INFO]  -----------------------------------------------------------------------------------------------------------
[02:25:34    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_47/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:25:36    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:25:36    INFO]  - will validate that the bias-correction actually improved the result ...
[02:25:36    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:25:36    INFO]  - Will use (1) MLMs from the input chain: ANNZ_47,
[02:25:41    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_47/plots/
[02:25:52        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_47/plots output/PAUS_advanced7/regres/train/ANNZ_47/plots_biasCor_before
[02:25:52    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:25:52    INFO]  - Will use (1) MLMs from the input chain: ANNZ_47,
[02:25:56    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_47/plots/
[02:26:07        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_47/plots output/PAUS_advanced7/regres/train/ANNZ_47/plots_biasCor_after
[02:26:07    INFO]  - Got original [KS-test,N_poiss]: [0.11108 , 6.00901] , after the bias-correction: [0.0543633 , 5.04143] --> will KEEP the correction !

(02:26 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(02:26 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m48[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(02:26 INFO) 
[02:26:11    INFO]  -----------------------------------------------------
[02:26:11    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[02:26:11    INFO]  -----------------------------------------------------------------------------------------------------------
[02:26:12    INFO]  - starting ANNZ::Init()  ... 
[02:26:13    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_48/saveOpt.txt ...
[02:26:27    INFO]  - starting ANNZ::Train_singleReg() ... 
[02:26:28    INFO] ----------------------------------------------------------------------------------------------------
[02:26:28    INFO]  - will book (ANNZ_48) method(BDT) with options: :NTrees=380:BoostType=Bagging:VarTransform=N
[02:26:28    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:26:28    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[02:26:28    INFO]      cuts (train):        ,
[02:26:28    INFO]      cuts (valid):       
[02:26:28    INFO]    - weights:            1
[02:26:28    INFO] ----------------------------------------------------------------------------------------------------
[02:26:28    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:27:06    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_48/ANNZ_48_weights/saveTrainOpt_ANNZ_48.txt ...
[02:27:10    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_48 ... 
[02:27:10    INFO]  - Will gen. input-parameter errors ...
[02:27:13    INFO]  - starting ANNZ::loadReaders() ... 
[02:27:21    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[02:29:04    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:29:04    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[02:29:04    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[02:29:04    INFO]  -----------------------------------------------------------------------------------------------------------
[02:29:34    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:29:34    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[02:29:34    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[02:29:34    INFO]  -----------------------------------------------------------------------------------------------------------
[02:29:34    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[02:31:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:31:16    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[02:31:16    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[02:31:16    INFO]  -----------------------------------------------------------------------------------------------------------
[02:31:54    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:31:54    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[02:31:54    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[02:31:54    INFO]  -----------------------------------------------------------------------------------------------------------
[02:31:54    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_48/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:31:56    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:31:56    INFO]  - will try to derive a bias correction ... 
[02:31:56    INFO]  - will validate that training produced an XML file for later ... 
[02:31:56    INFO]  - starting ANNZ::loadReaders() ... 
[02:32:00    INFO]  - will validate that the training was not a complete failure ... 
[02:32:00    INFO]  - training seems to have been successful! will move on ...
[02:32:00    INFO]  - starting ANNZ::Train_singleRegBiasCor() ... 
[02:32:04    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:32:05    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[02:32:07    INFO] ----------------------------------------------------------------------------------------------------
[02:32:07    INFO]  - will book (ANNZ_48_bias) method(BDT) with options: :VarTransform=N:NTrees=50:BoostType=AdaBoost
[02:32:07    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:32:07    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000)
[02:32:07    INFO]    - weights:            1
[02:32:07    INFO] ----------------------------------------------------------------------------------------------------
[02:32:07    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:32:17    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_48 ... 
[02:32:17    INFO]  - Will gen. input-parameter errors ...
[02:32:19    INFO]  - starting ANNZ::loadReaders() ... 
[02:32:28    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[02:34:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:34:19    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[02:34:19    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[02:34:19    INFO]  -----------------------------------------------------------------------------------------------------------
[02:34:52    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:34:52    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[02:34:52    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[02:34:52    INFO]  -----------------------------------------------------------------------------------------------------------
[02:34:52    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[02:36:43    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:36:43    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[02:36:43    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[02:36:43    INFO]  -----------------------------------------------------------------------------------------------------------
[02:37:24    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:37:24    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[02:37:24    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[02:37:24    INFO]  -----------------------------------------------------------------------------------------------------------
[02:37:24    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_48/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[02:37:26    INFO]  - ending makeTreeRegClsOneMLM() ... 
[02:37:26    INFO]  - will validate that the bias-correction actually improved the result ...
[02:37:26    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:37:26    INFO]  - Will use (1) MLMs from the input chain: ANNZ_48,
[02:37:31    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_48/plots/
[02:37:41        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_48/plots output/PAUS_advanced7/regres/train/ANNZ_48/plots_biasCor_before
[02:37:41    INFO]  - starting ANNZ::doMetricPlots() ... 
[02:37:41    INFO]  - Will use (1) MLMs from the input chain: ANNZ_48,
[02:37:46    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/train/ANNZ_48/plots/
[02:37:56        ]  - Sys-comnd (exit=0) : mv output/PAUS_advanced7/regres/train/ANNZ_48/plots output/PAUS_advanced7/regres/train/ANNZ_48/plots_biasCor_after
[02:37:56    INFO]  - Got original [KS-test,N_poiss]: [0.0673254 , 5.78454] , after the bias-correction: [0.0470569 , 4.62408] --> will KEEP the correction !

(02:38 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(02:38 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m49[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=850:BoostType=Bagging[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(02:38 INFO) 
[02:38:01    INFO]  -----------------------------------------------------
[02:38:01    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[02:38:01    INFO]  -----------------------------------------------------------------------------------------------------------
[02:38:02    INFO]  - starting ANNZ::Init()  ... 
[02:38:03    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/train/ANNZ_49/saveOpt.txt ...
[02:38:18    INFO]  - starting ANNZ::Train_singleReg() ... 
[02:38:18    INFO] ----------------------------------------------------------------------------------------------------
[02:38:18    INFO]  - will book (ANNZ_49) method(BDT) with options: :NTrees=850:BoostType=Bagging:VarTransform=N
[02:38:18    INFO]    - factory settings:   nTrain_Regression=0:nTest_Regression=0:SplitMode=Random:NormMode=EqualNumEvents
[02:38:18    INFO]    - cuts (all):         (Z >= 0.000000)&&(Z <= 1.200000) ,
[02:38:18    INFO]      cuts (train):        ,
[02:38:18    INFO]      cuts (valid):       
[02:38:18    INFO]    - weights:            1
[02:38:18    INFO] ----------------------------------------------------------------------------------------------------
[02:38:18    INFO]  - starting ANNZ::doFactoryTrain() - This may take a while ...
[02:39:46    INFO]  - Saving MLM information in ./output/PAUS_advanced7/regres/train/ANNZ_49/ANNZ_49_weights/saveTrainOpt_ANNZ_49.txt ...
[02:39:54    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_49 ... 
[02:39:54    INFO]  - Will gen. input-parameter errors ...
[02:39:57    INFO]  - starting ANNZ::loadReaders() ... 
[02:40:18    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[02:45:31    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:45:31    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[02:45:31    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[02:45:31    INFO]  -----------------------------------------------------------------------------------------------------------
[02:47:05    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[02:47:05    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[02:47:05    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[02:47:05    INFO]  -----------------------------------------------------------------------------------------------------------
[02:47:05    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
(08:35 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(08:35 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(08:35 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(08:35 INFO) [40;37;1m - 29/01/19 08:35:50 - starting ANNZ[0m
(08:35 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:35 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m0[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=440:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:35 INFO) 
[08:35:51    INFO]  -----------------------------------------------------
[08:35:51    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:35:51    INFO]  -----------------------------------------------------------------------------------------------------------
[08:35:54    INFO]  - starting ANNZ::Init()  ... 
[08:35:54    INFO]  - found trained "ANNZ_0" (./output/PAUS_advanced7/regres/train/ANNZ_0/ANNZ_0_weights/randomReg_ANNZ_0.weights.xml)
[08:35:54    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:35 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:35 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m1[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=510:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:35 INFO) 
[08:35:55    INFO]  -----------------------------------------------------
[08:35:55    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:35:55    INFO]  -----------------------------------------------------------------------------------------------------------
[08:35:56    INFO]  - starting ANNZ::Init()  ... 
[08:35:56    INFO]  - found trained "ANNZ_1" (./output/PAUS_advanced7/regres/train/ANNZ_1/ANNZ_1_weights/randomReg_ANNZ_1.weights.xml)
[08:35:56    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:35 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:35 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m2[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=700:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:35 INFO) 
[08:35:56    INFO]  -----------------------------------------------------
[08:35:56    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:35:56    INFO]  -----------------------------------------------------------------------------------------------------------
[08:35:57    INFO]  - starting ANNZ::Init()  ... 
[08:35:58    INFO]  - found trained "ANNZ_2" (./output/PAUS_advanced7/regres/train/ANNZ_2/ANNZ_2_weights/randomReg_ANNZ_2.weights.xml)
[08:35:58    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:35 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:35 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m3[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:35 INFO) 
[08:35:58    INFO]  -----------------------------------------------------
[08:35:58    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:35:58    INFO]  -----------------------------------------------------------------------------------------------------------
[08:35:59    INFO]  - starting ANNZ::Init()  ... 
[08:35:59    INFO]  - found trained "ANNZ_3" (./output/PAUS_advanced7/regres/train/ANNZ_3/ANNZ_3_weights/randomReg_ANNZ_3.weights.xml)
[08:35:59    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:35 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:35 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m4[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=480:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:35 INFO) 
[08:35:59    INFO]  -----------------------------------------------------
[08:35:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:35:59    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:00    INFO]  - starting ANNZ::Init()  ... 
[08:36:01    INFO]  - found trained "ANNZ_4" (./output/PAUS_advanced7/regres/train/ANNZ_4/ANNZ_4_weights/randomReg_ANNZ_4.weights.xml)
[08:36:01    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m5[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=530:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:01    INFO]  -----------------------------------------------------
[08:36:01    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:01    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:02    INFO]  - starting ANNZ::Init()  ... 
[08:36:03    INFO]  - found trained "ANNZ_5" (./output/PAUS_advanced7/regres/train/ANNZ_5/ANNZ_5_weights/randomReg_ANNZ_5.weights.xml)
[08:36:03    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m6[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:03    INFO]  -----------------------------------------------------
[08:36:03    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:03    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:04    INFO]  - starting ANNZ::Init()  ... 
[08:36:05    INFO]  - found trained "ANNZ_6" (./output/PAUS_advanced7/regres/train/ANNZ_6/ANNZ_6_weights/randomReg_ANNZ_6.weights.xml)
[08:36:05    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m7[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:05    INFO]  -----------------------------------------------------
[08:36:05    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:05    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:06    INFO]  - starting ANNZ::Init()  ... 
[08:36:07    INFO]  - found trained "ANNZ_7" (./output/PAUS_advanced7/regres/train/ANNZ_7/ANNZ_7_weights/randomReg_ANNZ_7.weights.xml)
[08:36:07    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m8[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=410:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:08    INFO]  -----------------------------------------------------
[08:36:08    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:08    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:09    INFO]  - starting ANNZ::Init()  ... 
[08:36:09    INFO]  - found trained "ANNZ_8" (./output/PAUS_advanced7/regres/train/ANNZ_8/ANNZ_8_weights/randomReg_ANNZ_8.weights.xml)
[08:36:09    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m9[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:09    INFO]  -----------------------------------------------------
[08:36:09    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:09    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:10    INFO]  - starting ANNZ::Init()  ... 
[08:36:11    INFO]  - found trained "ANNZ_9" (./output/PAUS_advanced7/regres/train/ANNZ_9/ANNZ_9_weights/randomReg_ANNZ_9.weights.xml)
[08:36:11    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m10[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=520:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:11    INFO]  -----------------------------------------------------
[08:36:11    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:11    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:12    INFO]  - starting ANNZ::Init()  ... 
[08:36:13    INFO]  - found trained "ANNZ_10" (./output/PAUS_advanced7/regres/train/ANNZ_10/ANNZ_10_weights/randomReg_ANNZ_10.weights.xml)
[08:36:13    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m11[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=790:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:13    INFO]  -----------------------------------------------------
[08:36:13    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:13    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:14    INFO]  - starting ANNZ::Init()  ... 
[08:36:16    INFO]  - found trained "ANNZ_11" (./output/PAUS_advanced7/regres/train/ANNZ_11/ANNZ_11_weights/randomReg_ANNZ_11.weights.xml)
[08:36:16    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m12[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=490:BoostType=AdaBoost:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:16    INFO]  -----------------------------------------------------
[08:36:16    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:16    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:17    INFO]  - starting ANNZ::Init()  ... 
[08:36:17    INFO]  - found trained "ANNZ_12" (./output/PAUS_advanced7/regres/train/ANNZ_12/ANNZ_12_weights/randomReg_ANNZ_12.weights.xml)
[08:36:17    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m13[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:17    INFO]  -----------------------------------------------------
[08:36:17    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:17    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:18    INFO]  - starting ANNZ::Init()  ... 
[08:36:19    INFO]  - found trained "ANNZ_13" (./output/PAUS_advanced7/regres/train/ANNZ_13/ANNZ_13_weights/randomReg_ANNZ_13.weights.xml)
[08:36:19    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m14[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:19    INFO]  -----------------------------------------------------
[08:36:19    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:19    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:20    INFO]  - starting ANNZ::Init()  ... 
[08:36:21    INFO]  - found trained "ANNZ_14" (./output/PAUS_advanced7/regres/train/ANNZ_14/ANNZ_14_weights/randomReg_ANNZ_14.weights.xml)
[08:36:21    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m15[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=270:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:21    INFO]  -----------------------------------------------------
[08:36:21    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:21    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:22    INFO]  - starting ANNZ::Init()  ... 
[08:36:22    INFO]  - found trained "ANNZ_15" (./output/PAUS_advanced7/regres/train/ANNZ_15/ANNZ_15_weights/randomReg_ANNZ_15.weights.xml)
[08:36:22    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m16[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:22    INFO]  -----------------------------------------------------
[08:36:22    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:22    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:23    INFO]  - starting ANNZ::Init()  ... 
[08:36:24    INFO]  - found trained "ANNZ_16" (./output/PAUS_advanced7/regres/train/ANNZ_16/ANNZ_16_weights/randomReg_ANNZ_16.weights.xml)
[08:36:24    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m17[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=270:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:24    INFO]  -----------------------------------------------------
[08:36:24    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:24    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:25    INFO]  - starting ANNZ::Init()  ... 
[08:36:25    INFO]  - found trained "ANNZ_17" (./output/PAUS_advanced7/regres/train/ANNZ_17/ANNZ_17_weights/randomReg_ANNZ_17.weights.xml)
[08:36:25    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m18[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=390:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:25    INFO]  -----------------------------------------------------
[08:36:25    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:25    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:26    INFO]  - starting ANNZ::Init()  ... 
[08:36:27    INFO]  - found trained "ANNZ_18" (./output/PAUS_advanced7/regres/train/ANNZ_18/ANNZ_18_weights/randomReg_ANNZ_18.weights.xml)
[08:36:27    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m19[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=450:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:27    INFO]  -----------------------------------------------------
[08:36:27    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:27    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:28    INFO]  - starting ANNZ::Init()  ... 
[08:36:28    INFO]  - found trained "ANNZ_19" (./output/PAUS_advanced7/regres/train/ANNZ_19/ANNZ_19_weights/randomReg_ANNZ_19.weights.xml)
[08:36:28    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m20[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=440:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:28    INFO]  -----------------------------------------------------
[08:36:28    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:28    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:30    INFO]  - starting ANNZ::Init()  ... 
[08:36:30    INFO]  - found trained "ANNZ_20" (./output/PAUS_advanced7/regres/train/ANNZ_20/ANNZ_20_weights/randomReg_ANNZ_20.weights.xml)
[08:36:30    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m21[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=350:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:31    INFO]  -----------------------------------------------------
[08:36:31    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:31    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:32    INFO]  - starting ANNZ::Init()  ... 
[08:36:32    INFO]  - found trained "ANNZ_21" (./output/PAUS_advanced7/regres/train/ANNZ_21/ANNZ_21_weights/randomReg_ANNZ_21.weights.xml)
[08:36:32    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m22[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:33    INFO]  -----------------------------------------------------
[08:36:33    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:33    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:34    INFO]  - starting ANNZ::Init()  ... 
[08:36:35    INFO]  - found trained "ANNZ_22" (./output/PAUS_advanced7/regres/train/ANNZ_22/ANNZ_22_weights/randomReg_ANNZ_22.weights.xml)
[08:36:35    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m23[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=290:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:35    INFO]  -----------------------------------------------------
[08:36:35    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:35    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:36    INFO]  - starting ANNZ::Init()  ... 
[08:36:36    INFO]  - found trained "ANNZ_23" (./output/PAUS_advanced7/regres/train/ANNZ_23/ANNZ_23_weights/randomReg_ANNZ_23.weights.xml)
[08:36:36    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m24[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:36    INFO]  -----------------------------------------------------
[08:36:36    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:36    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:38    INFO]  - starting ANNZ::Init()  ... 
[08:36:38    INFO]  - found trained "ANNZ_24" (./output/PAUS_advanced7/regres/train/ANNZ_24/ANNZ_24_weights/randomReg_ANNZ_24.weights.xml)
[08:36:38    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m25[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=410:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:38    INFO]  -----------------------------------------------------
[08:36:38    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:38    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:39    INFO]  - starting ANNZ::Init()  ... 
[08:36:39    INFO]  - found trained "ANNZ_25" (./output/PAUS_advanced7/regres/train/ANNZ_25/ANNZ_25_weights/randomReg_ANNZ_25.weights.xml)
[08:36:39    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m26[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:39    INFO]  -----------------------------------------------------
[08:36:39    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:39    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:41    INFO]  - starting ANNZ::Init()  ... 
[08:36:41    INFO]  - found trained "ANNZ_26" (./output/PAUS_advanced7/regres/train/ANNZ_26/ANNZ_26_weights/randomReg_ANNZ_26.weights.xml)
[08:36:41    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m27[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=470:BoostType=AdaBoost:VarTransform=P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:41    INFO]  -----------------------------------------------------
[08:36:41    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:41    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:42    INFO]  - starting ANNZ::Init()  ... 
[08:36:42    INFO]  - found trained "ANNZ_27" (./output/PAUS_advanced7/regres/train/ANNZ_27/ANNZ_27_weights/randomReg_ANNZ_27.weights.xml)
[08:36:42    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m28[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=340:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:43    INFO]  -----------------------------------------------------
[08:36:43    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:43    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:44    INFO]  - starting ANNZ::Init()  ... 
[08:36:44    INFO]  - found trained "ANNZ_28" (./output/PAUS_advanced7/regres/train/ANNZ_28/ANNZ_28_weights/randomReg_ANNZ_28.weights.xml)
[08:36:44    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m29[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=330:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:44    INFO]  -----------------------------------------------------
[08:36:44    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:44    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:46    INFO]  - starting ANNZ::Init()  ... 
[08:36:46    INFO]  - found trained "ANNZ_29" (./output/PAUS_advanced7/regres/train/ANNZ_29/ANNZ_29_weights/randomReg_ANNZ_29.weights.xml)
[08:36:46    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m30[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=1050:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:46    INFO]  -----------------------------------------------------
[08:36:46    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:46    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:47    INFO]  - starting ANNZ::Init()  ... 
[08:36:49    INFO]  - found trained "ANNZ_30" (./output/PAUS_advanced7/regres/train/ANNZ_30/ANNZ_30_weights/randomReg_ANNZ_30.weights.xml)
[08:36:49    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m31[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=360:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:49    INFO]  -----------------------------------------------------
[08:36:49    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:49    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:50    INFO]  - starting ANNZ::Init()  ... 
[08:36:50    INFO]  - found trained "ANNZ_31" (./output/PAUS_advanced7/regres/train/ANNZ_31/ANNZ_31_weights/randomReg_ANNZ_31.weights.xml)
[08:36:50    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m32[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=420:BoostType=AdaBoost[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:50    INFO]  -----------------------------------------------------
[08:36:50    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:50    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:51    INFO]  - starting ANNZ::Init()  ... 
[08:36:52    INFO]  - found trained "ANNZ_32" (./output/PAUS_advanced7/regres/train/ANNZ_32/ANNZ_32_weights/randomReg_ANNZ_32.weights.xml)
[08:36:52    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m33[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:52    INFO]  -----------------------------------------------------
[08:36:52    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:52    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:53    INFO]  - starting ANNZ::Init()  ... 
[08:36:54    INFO]  - found trained "ANNZ_33" (./output/PAUS_advanced7/regres/train/ANNZ_33/ANNZ_33_weights/randomReg_ANNZ_33.weights.xml)
[08:36:54    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m34[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=410:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:54    INFO]  -----------------------------------------------------
[08:36:54    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:54    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:55    INFO]  - starting ANNZ::Init()  ... 
[08:36:55    INFO]  - found trained "ANNZ_34" (./output/PAUS_advanced7/regres/train/ANNZ_34/ANNZ_34_weights/randomReg_ANNZ_34.weights.xml)
[08:36:55    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m35[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=460:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:55    INFO]  -----------------------------------------------------
[08:36:55    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:55    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:56    INFO]  - starting ANNZ::Init()  ... 
[08:36:57    INFO]  - found trained "ANNZ_35" (./output/PAUS_advanced7/regres/train/ANNZ_35/ANNZ_35_weights/randomReg_ANNZ_35.weights.xml)
[08:36:57    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m36[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=300:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:58    INFO]  -----------------------------------------------------
[08:36:58    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:58    INFO]  -----------------------------------------------------------------------------------------------------------
[08:36:59    INFO]  - starting ANNZ::Init()  ... 
[08:36:59    INFO]  - found trained "ANNZ_36" (./output/PAUS_advanced7/regres/train/ANNZ_36/ANNZ_36_weights/randomReg_ANNZ_36.weights.xml)
[08:36:59    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:36 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:36 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m37[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=790:BoostType=AdaBoost:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:36 INFO) 
[08:36:59    INFO]  -----------------------------------------------------
[08:36:59    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:36:59    INFO]  -----------------------------------------------------------------------------------------------------------
[08:37:00    INFO]  - starting ANNZ::Init()  ... 
[08:37:01    INFO]  - found trained "ANNZ_37" (./output/PAUS_advanced7/regres/train/ANNZ_37/ANNZ_37_weights/randomReg_ANNZ_37.weights.xml)
[08:37:01    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:37 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:37 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m38[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=260:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:37 INFO) 
[08:37:01    INFO]  -----------------------------------------------------
[08:37:01    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:37:01    INFO]  -----------------------------------------------------------------------------------------------------------
[08:37:02    INFO]  - starting ANNZ::Init()  ... 
[08:37:03    INFO]  - found trained "ANNZ_38" (./output/PAUS_advanced7/regres/train/ANNZ_38/ANNZ_38_weights/randomReg_ANNZ_38.weights.xml)
[08:37:03    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:37 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:37 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m39[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:37 INFO) 
[08:37:03    INFO]  -----------------------------------------------------
[08:37:03    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:37:03    INFO]  -----------------------------------------------------------------------------------------------------------
[08:37:04    INFO]  - starting ANNZ::Init()  ... 
[08:37:05    INFO]  - found trained "ANNZ_39" (./output/PAUS_advanced7/regres/train/ANNZ_39/ANNZ_39_weights/randomReg_ANNZ_39.weights.xml)
[08:37:05    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:37 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:37 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m40[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=300:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:37 INFO) 
[08:37:05    INFO]  -----------------------------------------------------
[08:37:05    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:37:05    INFO]  -----------------------------------------------------------------------------------------------------------
[08:37:06    INFO]  - starting ANNZ::Init()  ... 
[08:37:06    INFO]  - found trained "ANNZ_40" (./output/PAUS_advanced7/regres/train/ANNZ_40/ANNZ_40_weights/randomReg_ANNZ_40.weights.xml)
[08:37:06    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:37 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:37 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m41[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=430:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:37 INFO) 
[08:37:07    INFO]  -----------------------------------------------------
[08:37:07    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:37:07    INFO]  -----------------------------------------------------------------------------------------------------------
[08:37:08    INFO]  - starting ANNZ::Init()  ... 
[08:37:08    INFO]  - found trained "ANNZ_41" (./output/PAUS_advanced7/regres/train/ANNZ_41/ANNZ_41_weights/randomReg_ANNZ_41.weights.xml)
[08:37:08    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:37 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:37 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m42[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=AdaBoostR2[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:37 INFO) 
[08:37:08    INFO]  -----------------------------------------------------
[08:37:08    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:37:08    INFO]  -----------------------------------------------------------------------------------------------------------
[08:37:09    INFO]  - starting ANNZ::Init()  ... 
[08:37:09    INFO]  - found trained "ANNZ_42" (./output/PAUS_advanced7/regres/train/ANNZ_42/ANNZ_42_weights/randomReg_ANNZ_42.weights.xml)
[08:37:09    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:37 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:37 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m43[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=370:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:37 INFO) 
[08:37:10    INFO]  -----------------------------------------------------
[08:37:10    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:37:10    INFO]  -----------------------------------------------------------------------------------------------------------
[08:37:11    INFO]  - starting ANNZ::Init()  ... 
[08:37:11    INFO]  - found trained "ANNZ_43" (./output/PAUS_advanced7/regres/train/ANNZ_43/ANNZ_43_weights/randomReg_ANNZ_43.weights.xml)
[08:37:11    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:37 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:37 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m44[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=320:BoostType=AdaBoostR2:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:37 INFO) 
[08:37:11    INFO]  -----------------------------------------------------
[08:37:11    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:37:11    INFO]  -----------------------------------------------------------------------------------------------------------
[08:37:12    INFO]  - starting ANNZ::Init()  ... 
[08:37:12    INFO]  - found trained "ANNZ_44" (./output/PAUS_advanced7/regres/train/ANNZ_44/ANNZ_44_weights/randomReg_ANNZ_44.weights.xml)
[08:37:12    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:37 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:37 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m45[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=320:BoostType=Bagging:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:37 INFO) 
[08:37:13    INFO]  -----------------------------------------------------
[08:37:13    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:37:13    INFO]  -----------------------------------------------------------------------------------------------------------
[08:37:14    INFO]  - starting ANNZ::Init()  ... 
[08:37:14    INFO]  - found trained "ANNZ_45" (./output/PAUS_advanced7/regres/train/ANNZ_45/ANNZ_45_weights/randomReg_ANNZ_45.weights.xml)
[08:37:14    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:37 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:37 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m46[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=500:BoostType=Bagging[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:37 INFO) 
[08:37:14    INFO]  -----------------------------------------------------
[08:37:14    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:37:14    INFO]  -----------------------------------------------------------------------------------------------------------
[08:37:15    INFO]  - starting ANNZ::Init()  ... 
[08:37:16    INFO]  - found trained "ANNZ_46" (./output/PAUS_advanced7/regres/train/ANNZ_46/ANNZ_46_weights/randomReg_ANNZ_46.weights.xml)
[08:37:16    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:37 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:37 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m47[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=530:BoostType=AdaBoost:VarTransform=N,P[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:37 INFO) 
[08:37:17    INFO]  -----------------------------------------------------
[08:37:17    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:37:17    INFO]  -----------------------------------------------------------------------------------------------------------
[08:37:18    INFO]  - starting ANNZ::Init()  ... 
[08:37:18    INFO]  - found trained "ANNZ_47" (./output/PAUS_advanced7/regres/train/ANNZ_47/ANNZ_47_weights/randomReg_ANNZ_47.weights.xml)
[08:37:18    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:37 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:37 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m48[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=380:BoostType=Bagging:VarTransform=N[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:37 INFO) 
[08:37:18    INFO]  -----------------------------------------------------
[08:37:18    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:37:18    INFO]  -----------------------------------------------------------------------------------------------------------
[08:37:19    INFO]  - starting ANNZ::Init()  ... 
[08:37:20    INFO]  - found trained "ANNZ_48" (./output/PAUS_advanced7/regres/train/ANNZ_48/ANNZ_48_weights/randomReg_ANNZ_48.weights.xml)
[08:37:20    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:37 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:37 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34muserWeights_valid[0m[31m=[0m'[32m[0m' , [34mbiasCorMLMwithInp[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34minputVarErrors[0m[31m=[0m'[32mband0fluxerror;band1fluxerror;band2fluxerror;band3fluxerror;band4fluxerror;band5fluxerror;band6fluxerror;band7fluxerror;band8fluxerror;band9fluxerror;band10fluxerror;band11fluxerror;band12fluxerror;band13fluxerror;band14fluxerror;band15fluxerror;band16fluxerror;band17fluxerror;band18fluxerror;band19fluxerror;band20fluxerror;band21fluxerror;band22fluxerror;band23fluxerror;band24fluxerror;band25fluxerror;band26fluxerror;band27fluxerror;band28fluxerror;band29fluxerror;band30fluxerror;band31fluxerror;band32fluxerror;band33fluxerror;band34fluxerror;band35fluxerror;band36fluxerror;band37fluxerror;band38fluxerror;band39fluxerror;i_auto_err;umag_err;bmag_err;vmag_err;gmag_err;rmag_err;jmag_err;kmag_err[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mTrue[0m' , [34mnMLMnow[0m[31m=[0m'[32m49[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34mrndOptTypes[0m[31m=[0m'[32mBDT[0m' , [34muserCuts_train[0m[31m=[0m'[32m[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34muserWeights_train[0m[31m=[0m'[32m[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoBiasCorMLM[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minputVariables[0m[31m=[0m'[32mband0flux;band1flux;band2flux;band3flux;band4flux;band5flux;band6flux;band7flux;band8flux;band9flux;band10flux;band11flux;band12flux;band13flux;band14flux;band15flux;band16flux;band17flux;band18flux;band19flux;band20flux;band21flux;band22flux;band23flux;band24flux;band25flux;band26flux;band27flux;band28flux;band29flux;band30flux;band31flux;band32flux;band33flux;band34flux;band35flux;band36flux;band37flux;band38flux;band39flux;i_auto;umag;bmag;vmag;gmag;rmag;jmag;kmag[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34muserMLMopts[0m[31m=[0m'[32mANNZ_MLM=BDT:NTrees=850:BoostType=Bagging[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34malwaysKeepBiasCor[0m[31m=[0m'[32mFalse[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34muserCuts_valid[0m[31m=[0m'[32m[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , 
(08:37 INFO) 
[08:37:20    INFO]  -----------------------------------------------------
[08:37:20    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:37:20    INFO]  -----------------------------------------------------------------------------------------------------------
[08:37:21    INFO]  - starting ANNZ::Init()  ... 
[08:37:23    INFO]  - found trained "ANNZ_49" (./output/PAUS_advanced7/regres/train/ANNZ_49/ANNZ_49_weights/randomReg_ANNZ_49.weights.xml)
[08:37:23    INFO]  -- Nothing to be done... (can force re-training with "overwriteExistingTrain")

(08:37 INFO) [40;37;1m - 29/01/19 08:37:23 - finished running ANNZ ![0m
(08:37 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(08:37 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(08:37 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(08:37 INFO) [40;37;1m - 29/01/19 08:37:40 - starting ANNZ[0m
(08:37 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:37 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mFalse[0m' , [34mdoOptim[0m[31m=[0m'[32mTrue[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34maddOutputVars[0m[31m=[0m'[32m[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(08:37 INFO) 
[08:37:40    INFO]  -----------------------------------------------------
[08:37:40    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:37:40    INFO]  -----------------------------------------------------------------------------------------------------------
[08:37:41    INFO]  - starting ANNZ::Init()  ... 
[08:37:41    INFO]  - Will generate 1 PDFs ... 
[08:38:07    INFO] --------------------------------------------------------
[08:38:07    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,ANNZ_25,ANNZ_26,ANNZ_27,ANNZ_28,ANNZ_29,ANNZ_30,ANNZ_31,ANNZ_32,ANNZ_33,ANNZ_34,ANNZ_35,ANNZ_36,ANNZ_37,ANNZ_38,ANNZ_39,ANNZ_40,ANNZ_41,ANNZ_42,ANNZ_43,ANNZ_44,ANNZ_45,ANNZ_46,ANNZ_47,ANNZ_48,ANNZ_49,
[08:38:07    INFO]  - All REJECTED MLMs: 
[08:38:07    INFO] ----------------------------------------------------------------------------------------------------------------
[08:38:10    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/optim/saveOpt.txt ...
[08:39:42    INFO]  - starting ANNZ::Optim() ... 
[08:39:42    INFO]  - starting ANNZ::makeTreeRegClsAllMLM() ... 
[08:39:43    INFO]  - ANNZ_49 Now in nTrainValidNow = 1 , treeNamePostfix = _valid , number of entries is bad ... 
[08:39:43    INFO]  - starting ANNZ::makeTreeRegClsOneMLM() - will create postTrain trees for ANNZ_49 ... 
[08:39:43    INFO]  - Will gen. input-parameter errors ...
[08:39:45    INFO]  - starting ANNZ::loadReaders() ... 
[08:39:57    INFO]  - added chain ANNZ_tree_train(12998) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_train*.root
[08:42:13    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:42:13    INFO]  -- ANNZ_tree_train ................................... 40  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[08:42:13    INFO]  -- ANNZ_tree_train ................................ 10000  nObj
[08:42:13    INFO]  -----------------------------------------------------------------------------------------------------------
[08:42:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:42:55    INFO]  -- ANNZ_tree_train ................................... 55  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[08:42:55    INFO]  -- ANNZ_tree_train ................................ 12998  nObj
[08:42:55    INFO]  -----------------------------------------------------------------------------------------------------------
[08:42:55    INFO]  - added chain ANNZ_tree_valid(13685) from ./output/PAUS_advanced7/rootIn/ANNZ_tree_valid*.root
[08:45:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:45:16    INFO]  -- ANNZ_tree_valid ................................... 47  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[08:45:16    INFO]  -- ANNZ_tree_valid ................................ 10000  nObj
[08:45:16    INFO]  -----------------------------------------------------------------------------------------------------------
[08:46:07    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:46:07    INFO]  -- ANNZ_tree_valid ................................... 63  failedCut: _comn [ (Z >= 0.000000)&&(Z <= 1.200000) ]
[08:46:07    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[08:46:07    INFO]  -----------------------------------------------------------------------------------------------------------
[08:46:10    INFO]  - Saving file ./output/PAUS_advanced7/regres/train/ANNZ_49/postTrain/savePostTrainOpt.txt to log the creation time of the trees, and the user-defined cuts and weights for _train, _valid ...
[08:46:13    INFO]  - ending makeTreeRegClsOneMLM() ... 
[08:46:13    INFO] ANNZ_49 - There was need to regenerate the result-trees. Will validate that all is good now ...
[08:46:13    INFO]  - Did not find requred merged result-trees with the correct number of entries -> Will do merging ...
[08:46:49    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[08:46:51    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/PAUS_advanced7/regres/train/postTrain/ANNZ_tree_train_00000.root) ... 
[08:47:25    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[08:47:28    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_valid , ./output/PAUS_advanced7/regres/train/postTrain/ANNZ_tree_valid_00001.root) ... 
[08:48:02    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[08:48:04    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_errKNN , ./output/PAUS_advanced7/regres/train/postTrain/ANNZ_tree_errKNN_00002.root) ... 
[08:48:04    INFO]  - Saving file ./output/PAUS_advanced7/regres/train//postTrain/savePostTrainOpt.txt to log the creation time of the trees ...
[08:48:05    INFO]  - There was need to regenerate the merged result-trees. Will validate that all is good now ...
[08:48:05    INFO]  - Found all requred post-train root files -> Getting from file ./output/PAUS_advanced7/regres/train//postTrain/savePostTrainOpt.txt the creation time of the merged trees and comparing to the creationg time of source result-trees ...
[08:48:05    INFO]  - No new MLMs found ... no need to regenerate the merged trees.
[08:48:06    INFO]  - ending makeTreeRegClsAllMLM() ... 
[08:48:06    INFO]  - starting ANNZ::optimReg() ... 
[08:48:09    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[08:48:11    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_train , ./output/PAUS_advanced7/regres/optim/train/ANNZ_tree_train_00000.root) ... 
[08:48:12    INFO]  - starting ANNZ::fillColosureV() ... 
[08:48:13    INFO]  ---------------------------------------------------------------------------------- 
[08:48:13    INFO]  - Got the following average properties: 
[08:48:13    INFO]  --------------------------------------- 
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_0 	 0.00925916 	 0.0473163 	 0.0672095
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_1 	 0.0098863 	 0.0484295 	 0.0334459
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_2 	 0.00506654 	 0.0620406 	 0.0673528
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_3 	 0.00549815 	 0.0621273 	 0.0672276
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_4 	 0.00695884 	 0.0416248 	 0.0763434
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_5 	 0.00709578 	 0.0416814 	 0.0753147
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_6 	 0.00895743 	 0.0475298 	 0.0657677
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_7 	 0.00723964 	 0.0418344 	 0.074391
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_8 	 0.00551803 	 0.0618406 	 0.0676654
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_9 	 0.00895743 	 0.0475298 	 0.0657677
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_10 	 0.00693162 	 0.0418513 	 0.0744939
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_11 	 0.00696649 	 0.0419939 	 0.0743176
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_12 	 0.00641974 	 0.0669104 	 0.0793051
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_13 	 0.0072351 	 0.0540083 	 0.0776394
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_14 	 0.00907799 	 0.0471265 	 0.0678929
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_15 	 0.00721046 	 0.0542166 	 0.0777463
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_16 	 0.00875181 	 0.046948 	 0.0674771
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_17 	 0.00566697 	 0.0618241 	 0.0681677
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_18 	 0.00969275 	 0.0484137 	 0.0349635
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_19 	 0.0072144 	 0.0541932 	 0.0777187
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_20 	 0.00686529 	 0.0417854 	 0.074469
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_21 	 0.00874905 	 0.0476497 	 0.0658714
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_22 	 0.00916974 	 0.047025 	 0.0675102
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_23 	 0.00928603 	 0.0475457 	 0.0653107
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_24 	 0.00723988 	 0.0543563 	 0.0769522
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_25 	 0.00735839 	 0.0541803 	 0.0775643
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_26 	 0.00718598 	 0.0542558 	 0.0773465
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_27 	 0.0064342 	 0.0669439 	 0.0791595
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_28 	 0.00907457 	 0.0474959 	 0.0662784
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_29 	 0.0101263 	 0.0484302 	 0.0350593
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_30 	 0.00849782 	 0.0471818 	 0.0689486
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_31 	 0.00544433 	 0.0620022 	 0.0670938
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_32 	 0.00552412 	 0.061876 	 0.0675116
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_33 	 0.00867147 	 0.0473141 	 0.0679675
[08:48:13    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_34 	 0.00735839 	 0.0541803 	 0.0775643
[08:48:14    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_35 	 0.00698458 	 0.0418588 	 0.074579
[08:48:14    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_36 	 0.00892441 	 0.0474383 	 0.0664111
[08:48:14    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_37 	 0.0049338 	 0.0617159 	 0.0676181
[08:48:14    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_38 	 0.00683377 	 0.0420436 	 0.0740353
[08:48:14    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_39 	 0.00707548 	 0.0421141 	 0.0740654
[08:48:14    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_40 	 0.00892441 	 0.0474383 	 0.0664111
[08:48:14    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_41 	 0.0102016 	 0.0484996 	 0.0338423
[08:48:14    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_42 	 0.0102835 	 0.0483983 	 0.0350069
[08:48:14    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_43 	 0.00707445 	 0.0538325 	 0.0786876
[08:48:14    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_44 	 0.00998433 	 0.0489808 	 0.0328597
[08:48:14    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_45 	 0.00712534 	 0.0417044 	 0.074805
[08:48:14    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_46 	 0.00707548 	 0.0421141 	 0.0740654
[08:48:14    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_47 	 0.00710941 	 0.0541982 	 0.0772348
[08:48:14    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_48 	 0.00867147 	 0.0473141 	 0.0679675
[08:48:14    INFO]  - type/name,<bias>,<sig68>,<fracSig68_2,3>:  BDT/ANNZ_49 	 0.0166267 	 0.05684 	 0.0614558
[08:48:14    INFO]  ------------------------------------------------------------------------------------------------- 
[08:48:14    INFO]  - starting ANNZ::getBestANNZ(optimCondReg="sig68") ... 
[08:48:14    INFO]  - Will optimize based on bias and sig68 only (priority on sig68)
[08:48:14    INFO]  - Now trying to find best methods with a limit of 10% of the [sig68] dist, and 20% of the other(s) - iteration 0 ...
[08:48:14    INFO]  - Now trying to find best methods with a limit of 12.5% of the [sig68] dist, and 22.5% of the other(s) - iteration 1 ...
[08:48:14    INFO]  - Found 2 "best" methods (min-threshold was 1) from the bottom 12.5% of the [sig68] dist.
[08:48:14    INFO]  - The "best" MLM is: ANNZ_20
[08:48:14    INFO]  - starting ANNZ::getRndMethodBestPDF() ... 
[08:48:14    INFO]  - initial PDF weights: ANNZ_20:0.061 ANNZ_38:0.059 ANNZ_4:0.057 ANNZ_10:0.055 ANNZ_35:0.053 ANNZ_11:0.051 ANNZ_5:0.049 ANNZ_45:0.047 ANNZ_46:0.045 ANNZ_39:0.044 ANNZ_7:0.042 ANNZ_43:0.040 ANNZ_47:0.038 ANNZ_13:0.036 ANNZ_26:0.034 ANNZ_19:0.032 ANNZ_15:0.030 ANNZ_24:0.028 ANNZ_30:0.027 ANNZ_25:0.025 ANNZ_34:0.023 ANNZ_33:0.021 ANNZ_48:0.019 ANNZ_16:0.017 ANNZ_21:0.015 ANNZ_40:0.013 ANNZ_36:0.011 ANNZ_9:0.009 ANNZ_6:0.008 ANNZ_14:0.006 ANNZ_28:0.004 ANNZ_22:0.002 
[08:48:14    INFO]  - will loop on the input trees ...
[08:48:15    INFO]  - NEW:  0 - min-param best/prev/now: 1.79769e+308 / 1.79769e+308 / 2.55213e-01
[08:48:15    INFO]  - nTry: 1 - min-param best/prev/now: 2.55213e-01 / 2.55213e-01 / 2.55623e-01
[08:48:15    INFO]  - nTry: 2 - min-param best/prev/now: 2.55213e-01 / 2.55623e-01 / 2.56012e-01
[08:48:15    INFO]  - nTry: 3 - min-param best/prev/now: 2.55213e-01 / 2.55623e-01 / 2.56429e-01
[08:48:16    INFO]  - nTry: 4 - min-param best/prev/now: 2.55213e-01 / 2.55623e-01 / 2.56413e-01
[08:48:16    INFO]  - nTry: 5 - min-param best/prev/now: 2.55213e-01 / 2.55623e-01 / 2.56519e-01
[08:48:16    INFO]  - nTry: 6 - min-param best/prev/now: 2.55213e-01 / 2.56519e-01 / 2.55996e-01
[08:48:16    INFO]  - nTry: 7 - min-param best/prev/now: 2.55213e-01 / 2.55996e-01 / 2.56161e-01
[08:48:16    INFO]  - nTry: 8 - min-param best/prev/now: 2.55213e-01 / 2.55996e-01 / 2.55777e-01
[08:48:16    INFO]  - nTry: 9 - min-param best/prev/now: 2.55213e-01 / 2.55777e-01 / 2.55441e-01
[08:48:17    INFO]  - nTry: 10 - min-param best/prev/now: 2.55213e-01 / 2.55441e-01 / 2.55630e-01
[08:48:18    INFO]  - nTry: 20 - min-param best/prev/now: 2.55213e-01 / 2.56074e-01 / 2.56209e-01
[08:48:20    INFO]  - nTry: 30 - min-param best/prev/now: 2.55213e-01 / 2.56461e-01 / 2.56493e-01
[08:48:22    INFO]  - nTry: 40 - min-param best/prev/now: 2.55213e-01 / 2.56461e-01 / 2.56579e-01
[08:48:23    INFO]  - nTry: 50 - min-param best/prev/now: 2.55213e-01 / 2.56552e-01 / 2.56662e-01
[08:48:25    INFO]  - nTry: 60 - min-param best/prev/now: 2.55213e-01 / 2.56552e-01 / 2.56815e-01
[08:48:27    INFO]  - nTry: 70 - min-param best/prev/now: 2.55213e-01 / 2.56913e-01 / 2.56923e-01
[08:48:28    INFO]  - nTry: 80 - min-param best/prev/now: 2.55213e-01 / 2.56998e-01 / 2.56988e-01
[08:48:30    INFO]  - nTry: 90 - min-param best/prev/now: 2.55213e-01 / 2.56899e-01 / 2.56979e-01
[08:48:32    INFO]  - nTry: 100 - min-param best/prev/now: 2.55213e-01 / 2.56862e-01 / 2.56868e-01
[08:48:35    INFO]  - nTry: 120 - min-param best/prev/now: 2.55213e-01 / 2.56736e-01 / 2.56728e-01
[08:48:38    INFO]  - nTry: 140 - min-param best/prev/now: 2.55213e-01 / 2.56591e-01 / 2.56570e-01
[08:48:40    INFO]  - nTry: 150 - min-param best/prev/now: 2.55213e-01 / 2.56557e-01 / 2.56545e-01
[08:48:41    INFO]  - nTry: 160 - min-param best/prev/now: 2.55213e-01 / 2.56526e-01 / 2.56533e-01
[08:48:45    INFO]  - nTry: 180 - min-param best/prev/now: 2.55213e-01 / 2.56517e-01 / 2.56529e-01
[08:48:48    INFO]  - nTry: 200 - min-param best/prev/now: 2.55213e-01 / 2.56467e-01 / 2.56484e-01
[08:48:51    INFO]  - nTry: 220 - min-param best/prev/now: 2.55213e-01 / 2.56462e-01 / 2.56474e-01
[08:48:55    INFO]  - nTry: 240 - min-param best/prev/now: 2.55213e-01 / 2.56488e-01 / 2.56494e-01
[08:48:56    INFO]  - nTry: 250 - min-param best/prev/now: 2.55213e-01 / 2.56455e-01 / 2.56460e-01
[08:48:56    INFO]  - finished PDF optimization! - final minimization parameter: 2.55213e-01 , PDF weights: ANNZ_20:0.061 ANNZ_38:0.059 ANNZ_4:0.057 ANNZ_10:0.055 ANNZ_35:0.053 ANNZ_11:0.051 ANNZ_5:0.049 ANNZ_45:0.047 ANNZ_46:0.045 ANNZ_39:0.044 ANNZ_7:0.042 ANNZ_43:0.040 ANNZ_47:0.038 ANNZ_13:0.036 ANNZ_26:0.034 ANNZ_19:0.032 ANNZ_15:0.030 ANNZ_24:0.028 ANNZ_30:0.027 ANNZ_25:0.025 ANNZ_34:0.023 ANNZ_33:0.021 ANNZ_48:0.019 ANNZ_16:0.017 ANNZ_21:0.015 ANNZ_40:0.013 ANNZ_36:0.011 ANNZ_9:0.009 ANNZ_6:0.008 ANNZ_14:0.006 ANNZ_28:0.004 ANNZ_22:0.002 
[08:48:56    INFO]  - will derive the bias correction for the pdf ... 
[08:48:58    INFO]  - Derived the following PDF(0) weights: ANNZ_0:0.000000, ANNZ_1:0.000000, ANNZ_2:0.000000, ANNZ_3:0.000000, ANNZ_4:0.056818, ANNZ_5:0.049242, ANNZ_6:0.007576, ANNZ_7:0.041667, ANNZ_8:0.000000, ANNZ_9:0.009470, ANNZ_10:0.054924, ANNZ_11:0.051136, ANNZ_12:0.000000, ANNZ_13:0.035985, ANNZ_14:0.005682, ANNZ_15:0.030303, ANNZ_16:0.017045, ANNZ_17:0.000000, ANNZ_18:0.000000, ANNZ_19:0.032197, ANNZ_20:0.060606, ANNZ_21:0.015152, ANNZ_22:0.001894, ANNZ_23:0.000000, ANNZ_24:0.028409, ANNZ_25:0.024621, ANNZ_26:0.034091, ANNZ_27:0.000000, ANNZ_28:0.003788, ANNZ_29:0.000000, ANNZ_30:0.026515, ANNZ_31:0.000000, ANNZ_32:0.000000, ANNZ_33:0.020833, ANNZ_34:0.022727, ANNZ_35:0.053030, ANNZ_36:0.011364, ANNZ_37:0.000000, ANNZ_38:0.058712, ANNZ_39:0.043561, ANNZ_40:0.013258, ANNZ_41:0.000000, ANNZ_42:0.000000, ANNZ_43:0.039773, ANNZ_44:0.000000, ANNZ_45:0.047348, ANNZ_46:0.045455, ANNZ_47:0.037879, ANNZ_48:0.018939, ANNZ_49:0.000000, 
[08:48:58    INFO]  - Saving optimization results in ./output/PAUS_advanced7/regres/optim/saveOptimOpt.txt ...
[08:49:01    INFO]  - Saving bias-correction results in ./output/PAUS_advanced7/regres/optim/saveOptimObj.root ...
[08:49:04    INFO]  - starting ANNZ::mergeTreeFriends() ... 
[08:49:07    INFO]  - starting ANNZ::verifyIndicesMLM(ANNZ_tree_valid , ./output/PAUS_advanced7/regres/optim/valid/ANNZ_tree_valid_00000.root) ... 
[08:49:10    INFO]  - starting ANNZ::doEvalReg() ... 
[08:49:10    INFO]  - Will gen. input-parameter errors for: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,ANNZ_25,ANNZ_26,ANNZ_27,ANNZ_28,ANNZ_29,ANNZ_30,ANNZ_31,ANNZ_32,ANNZ_33,ANNZ_34,ANNZ_35,ANNZ_36,ANNZ_37,ANNZ_38,ANNZ_39,ANNZ_40,ANNZ_41,ANNZ_42,ANNZ_43,ANNZ_44,ANNZ_45,ANNZ_46,ANNZ_47,ANNZ_48,ANNZ_49,
[08:49:10    INFO]  - Reading bias-correction results from ./output/PAUS_advanced7/regres/optim/saveOptimObj.root ...
[08:49:10    INFO]  - Getting optimization results from ./output/PAUS_advanced7/regres/optim/saveOptimOpt.txt ...
[08:49:10    INFO]  - creating final MLM and PDFs trees from input MLM trees ...
[08:49:16    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:49:16    INFO]  -- ANNZ_tree_valid ................................ 13685  nObj
[08:49:16    INFO]  -----------------------------------------------------------------------------------------------------------
[08:49:17    INFO]  - starting storeTreeToAscii() ... 
[08:49:17    INFO]  - will write to file the following branches: Z,ANNZ_best,ANNZ_best_wgt,ANNZ_best_err,ANNZ_MLM_avg_0,ANNZ_MLM_avg_0_err,ANNZ_MLM_avg_0_wgt,ANNZ_PDF_avg_0,ANNZ_PDF_avg_0_err,ANNZ_PDF_avg_0_wgt,ANNZ_PDF_0_0,ANNZ_PDF_0_1,ANNZ_PDF_0_2,ANNZ_PDF_0_3,ANNZ_PDF_0_4,ANNZ_PDF_0_5,ANNZ_PDF_0_6,ANNZ_PDF_0_7,ANNZ_PDF_0_8,ANNZ_PDF_0_9,ANNZ_PDF_0_10,ANNZ_PDF_0_11,ANNZ_PDF_0_12,ANNZ_PDF_0_13,ANNZ_PDF_0_14,ANNZ_PDF_0_15,ANNZ_PDF_0_16,ANNZ_PDF_0_17,ANNZ_PDF_0_18,ANNZ_PDF_0_19,ANNZ_PDF_0_20,ANNZ_PDF_0_21,ANNZ_PDF_0_22,ANNZ_PDF_0_23,ANNZ_PDF_0_24,ANNZ_PDF_0_25,ANNZ_PDF_0_26,ANNZ_PDF_0_27,ANNZ_PDF_0_28,ANNZ_PDF_0_29,ANNZ_PDF_0_30,ANNZ_PDF_0_31,ANNZ_PDF_0_32,ANNZ_PDF_0_33,ANNZ_PDF_0_34,ANNZ_PDF_0_35,ANNZ_PDF_0_36,ANNZ_PDF_0_37,ANNZ_PDF_0_38,ANNZ_PDF_0_39,ANNZ_PDF_0_40,ANNZ_PDF_0_41,ANNZ_PDF_0_42,ANNZ_PDF_0_43,ANNZ_PDF_0_44,ANNZ_PDF_0_45,ANNZ_PDF_0_46,ANNZ_PDF_0_47,ANNZ_PDF_0_48,ANNZ_PDF_0_49,ANNZ_PDF_0_50,ANNZ_PDF_0_51,ANNZ_PDF_0_52,ANNZ_PDF_0_53,ANNZ_PDF_0_54,ANNZ_PDF_0_55,ANNZ_PDF_0_56,ANNZ_PDF_0_57,ANNZ_PDF_0_58,ANNZ_PDF_0_59,ANNZ_PDF_0_60,ANNZ_PDF_0_61,ANNZ_PDF_0_62,ANNZ_PDF_0_63,ANNZ_PDF_0_64,ANNZ_PDF_0_65,ANNZ_PDF_0_66,ANNZ_PDF_0_67,ANNZ_PDF_0_68,ANNZ_PDF_0_69,ANNZ_PDF_0_70,ANNZ_PDF_0_71,ANNZ_PDF_0_72,ANNZ_PDF_0_73,ANNZ_PDF_0_74,ANNZ_PDF_0_75,ANNZ_PDF_0_76,ANNZ_PDF_0_77,ANNZ_PDF_0_78,ANNZ_PDF_0_79,ANNZ_PDF_0_80,ANNZ_PDF_0_81,ANNZ_PDF_0_82,ANNZ_PDF_0_83,ANNZ_PDF_0_84,ANNZ_PDF_0_85,ANNZ_PDF_0_86,ANNZ_PDF_0_87,ANNZ_PDF_0_88,ANNZ_PDF_0_89,ANNZ_PDF_0_90,ANNZ_PDF_0_91,ANNZ_PDF_0_92,ANNZ_PDF_0_93,ANNZ_PDF_0_94,ANNZ_PDF_0_95,ANNZ_PDF_0_96,ANNZ_PDF_0_97,ANNZ_PDF_0_98,ANNZ_PDF_0_99,ANNZ_PDF_0_100,ANNZ_PDF_0_101,ANNZ_PDF_0_102,ANNZ_PDF_0_103,ANNZ_PDF_0_104,ANNZ_PDF_0_105,ANNZ_PDF_0_106,ANNZ_PDF_0_107,ANNZ_PDF_0_108,ANNZ_PDF_0_109,ANNZ_PDF_0_110,ANNZ_PDF_0_111,ANNZ_PDF_0_112,ANNZ_PDF_0_113,ANNZ_PDF_0_114,ANNZ_PDF_0_115,ANNZ_PDF_0_116,ANNZ_PDF_0_117,ANNZ_PDF_0_118,ANNZ_PDF_0_119,
[08:49:17    INFO]  - Will parse  ANNZ_tree_randomReg(13685)... Now in ./output/PAUS_advanced7/regres/optim/eval/ANNZ_randomReg_0000.csv
[08:49:19    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:49:19    INFO]  -- ANNZ_randomReg ................................. 13685  nObj
[08:49:19    INFO]  -----------------------------------------------------------------------------------------------------------
[08:49:19    INFO]  - starting ANNZ::doMetricPlots() ... 
[08:49:19    INFO]  - Will use (1) MLMs from the input chain: ANNZ_best,
[08:49:19    INFO]  - Will use (1) PDFs from the input chain: PDF_0,
[08:49:21    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/optim/eval/plots/

(08:49 INFO) [40;37;1m - 29/01/19 08:49:22 - finished running ANNZ ![0m
(08:49 INFO) [34m - Found defined [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m". Setting glob.rootHome to match[0m
(08:49 INFO) [34m - Will use [0m[32mROOTSYS[0m[34m = "[0m[33m/home/andrew/ProjectInstalls/root[0m[34m"[0m
(08:49 INFO) [34m - Adding to [0m[32mLD_LIBRARY_PATH[0m[34m "[0m[33m/home/andrew/ProjectInstalls/root/lib/[0m[34m"[0m
(08:49 INFO) [40;37;1m - 29/01/19 08:49:23 - starting ANNZ[0m
(08:49 INFO) [33m - Will run /home/andrew/ProjectInstalls/ANNZ/lib/myANNZ with the following user-options: [0m
(08:49 INFO)    [34mgeneralOptI[0m[31m=[0m'[32m-1[0m' , [34mtrainIndex[0m[31m=[0m'[32m-1[0m' , [34mdoSingleCls[0m[31m=[0m'[32mFalse[0m' , [34mmaxNobj[0m[31m=[0m'[32m0[0m' , [34mdoVerif[0m[31m=[0m'[32mFalse[0m' , [34mgeneralOptS[0m[31m=[0m'[32mNULL[0m' , [34mdoPlots[0m[31m=[0m'[32mTrue[0m' , [34mnErrKNN[0m[31m=[0m'[32m90[0m' , [34mdoTrain[0m[31m=[0m'[32mFalse[0m' , [34mdoInTrainFlag[0m[31m=[0m'[32mFalse[0m' , [34mnMLMs[0m[31m=[0m'[32m50[0m' , [34minDirName[0m[31m=[0m'[32mPAUS/[0m' , [34minitSeedRnd[0m[31m=[0m'[32m0[0m' , [34msampleFrac_errKNN[0m[31m=[0m'[32m1[0m' , [34mdoEval[0m[31m=[0m'[32mTrue[0m' , [34mdoOptim[0m[31m=[0m'[32mFalse[0m' , [34moutDirName[0m[31m=[0m'[32mPAUS_advanced7[0m' , [34maddOutputVars[0m[31m=[0m'[32m[0m' , [34mevalDirPostfix[0m[31m=[0m'[32mnFile0[0m' , [34mdoRandomCls[0m[31m=[0m'[32mFalse[0m' , [34minAsciiFiles[0m[31m=[0m'[32mANNz_data5b.csv[0m' , [34mmaxValZ[0m[31m=[0m'[32m1.2[0m' , [34misBatch[0m[31m=[0m'[32mTrue[0m' , [34mdoClassification[0m[31m=[0m'[32mFalse[0m' , [34mdoAsciiToFits[0m[31m=[0m'[32mFalse[0m' , [34minAsciiVars[0m[31m=[0m'[32mF:band0flux;F:band1flux;F:band2flux;F:band3flux;F:band4flux;F:band5flux;F:band6flux;F:band7flux;F:band8flux;F:band9flux;F:band10flux;F:band11flux;F:band12flux;F:band13flux;F:band14flux;F:band15flux;F:band16flux;F:band17flux;F:band18flux;F:band19flux;F:band20flux;F:band21flux;F:band22flux;F:band23flux;F:band24flux;F:band25flux;F:band26flux;F:band27flux;F:band28flux;F:band29flux;F:band30flux;F:band31flux;F:band32flux;F:band33flux;F:band34flux;F:band35flux;F:band36flux;F:band37flux;F:band38flux;F:band39flux;F:band0fluxerror;F:band1fluxerror;F:band2fluxerror;F:band3fluxerror;F:band4fluxerror;F:band5fluxerror;F:band6fluxerror;F:band7fluxerror;F:band8fluxerror;F:band9fluxerror;F:band10fluxerror;F:band11fluxerror;F:band12fluxerror;F:band13fluxerror;F:band14fluxerror;F:band15fluxerror;F:band16fluxerror;F:band17fluxerror;F:band18fluxerror;F:band19fluxerror;F:band20fluxerror;F:band21fluxerror;F:band22fluxerror;F:band23fluxerror;F:band24fluxerror;F:band25fluxerror;F:band26fluxerror;F:band27fluxerror;F:band28fluxerror;F:band29fluxerror;F:band30fluxerror;F:band31fluxerror;F:band32fluxerror;F:band33fluxerror;F:band34fluxerror;F:band35fluxerror;F:band36fluxerror;F:band37fluxerror;F:band38fluxerror;F:band39fluxerror;F:i_auto;F:umag;F:bmag;F:vmag;F:gmag;F:rmag;F:jmag;F:kmag;F:i_auto_err;F:umag_err;F:bmag_err;F:vmag_err;F:gmag_err;F:rmag_err;F:jmag_err;F:kmag_err;F:Z;F:Zerror[0m' , [34mdoFitsToAscii[0m[31m=[0m'[32mFalse[0m' , [34mdoRandomReg[0m[31m=[0m'[32mTrue[0m' , [34mnPDFbins[0m[31m=[0m'[32m120[0m' , [34mminValZ[0m[31m=[0m'[32m0.0[0m' , [34mdoGenInputTrees[0m[31m=[0m'[32mFalse[0m' , [34mdoSingleReg[0m[31m=[0m'[32mFalse[0m' , [34mdoRegression[0m[31m=[0m'[32mTrue[0m' , [34mMLMsToStore[0m[31m=[0m'[32m[0m' , [34mdoBinnedCls[0m[31m=[0m'[32mFalse[0m' , [34mprintPlotExtension[0m[31m=[0m'[32m.png[0m' , [34mzTrg[0m[31m=[0m'[32mZ[0m' , [34mdoOnlyKnnErr[0m[31m=[0m'[32mFalse[0m' , [34mnPDFs[0m[31m=[0m'[32m1[0m' , 
(08:49 INFO) 
[08:49:23    INFO]  -----------------------------------------------------
[08:49:23    INFO]  - Welcome to ANNZ v2.3.0 (using ROOT v6.14/06) -
[08:49:23    INFO]  -----------------------------------------------------------------------------------------------------------
[08:49:24    INFO]  - starting ANNZ::Init()  ... 
[08:49:24    INFO]  - Will generate 1 PDFs ... 
[08:49:49    INFO] --------------------------------------------------------
[08:49:49    INFO]  - All ACCEPTED MLMs: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,ANNZ_25,ANNZ_26,ANNZ_27,ANNZ_28,ANNZ_29,ANNZ_30,ANNZ_31,ANNZ_32,ANNZ_33,ANNZ_34,ANNZ_35,ANNZ_36,ANNZ_37,ANNZ_38,ANNZ_39,ANNZ_40,ANNZ_41,ANNZ_42,ANNZ_43,ANNZ_44,ANNZ_45,ANNZ_46,ANNZ_47,ANNZ_48,ANNZ_49,
[08:49:49    INFO]  - All REJECTED MLMs: 
[08:49:49    INFO] ----------------------------------------------------------------------------------------------------------------
[08:49:52    INFO]  - Saving run information in ./output/PAUS_advanced7/regres/eval_nFile0/saveOpt.txt ...
[08:51:08    INFO]  - starting inputToFullTree(ANNz_data5b.csv) ... 
[08:51:09    INFO]  - Found 13343 lines in file PAUS/ANNz_data5b.csv -> total so far = 13343 ... 
[08:51:09    INFO]  - Now reading-in PAUS/ANNz_data5b.csv ... 
[08:51:10    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[08:51:10    INFO]  -- ANNZ_tree_eval ................................. 13343  nLine
[08:51:10    INFO]  -- ANNZ_tree_eval ................................. 13343  nObj
[08:51:10    INFO]  -----------------------------------------------------------------------------------------------------------
[08:51:10    INFO]  - starting ANNZ::Eval() ... 
[08:51:10    INFO]  - starting ANNZ::doEvalReg() ... 
[08:51:10    INFO]  - Will gen. input-parameter errors for: ANNZ_0,ANNZ_1,ANNZ_2,ANNZ_3,ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_8,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_12,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_17,ANNZ_18,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_23,ANNZ_24,ANNZ_25,ANNZ_26,ANNZ_27,ANNZ_28,ANNZ_29,ANNZ_30,ANNZ_31,ANNZ_32,ANNZ_33,ANNZ_34,ANNZ_35,ANNZ_36,ANNZ_37,ANNZ_38,ANNZ_39,ANNZ_40,ANNZ_41,ANNZ_42,ANNZ_43,ANNZ_44,ANNZ_45,ANNZ_46,ANNZ_47,ANNZ_48,ANNZ_49,
[08:51:10    INFO]  - Reading bias-correction results from ./output/PAUS_advanced7/regres/optim/saveOptimObj.root ...
[08:51:10    INFO]  - Getting optimization results from ./output/PAUS_advanced7/regres/optim/saveOptimOpt.txt ...
[08:51:10    INFO]  - creating MLM trees from input ...
[08:51:10    INFO]  - nDivLoopNow(1/1) -> will use the following MLMs: ANNZ_4,ANNZ_5,ANNZ_6,ANNZ_7,ANNZ_9,ANNZ_10,ANNZ_11,ANNZ_13,ANNZ_14,ANNZ_15,ANNZ_16,ANNZ_19,ANNZ_20,ANNZ_21,ANNZ_22,ANNZ_24,ANNZ_25,ANNZ_26,ANNZ_28,ANNZ_30,ANNZ_33,ANNZ_34,ANNZ_35,ANNZ_36,ANNZ_38,ANNZ_39,ANNZ_40,ANNZ_43,ANNZ_45,ANNZ_46,ANNZ_47,ANNZ_48,
[08:51:10    INFO]  - starting ANNZ::loadReaders() ... 
[10:18:48    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:18:48    INFO]  -- ANNZ_tree_eval ................................. 13343  nObj
[10:18:48    INFO]  -----------------------------------------------------------------------------------------------------------
[10:18:49    INFO]  - creating final MLM and PDFs trees from input MLM trees ...
[10:18:55    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:18:55    INFO]  -- ANNZ_tree_MLM_nDiv0 ............................ 13343  nObj
[10:18:55    INFO]  -----------------------------------------------------------------------------------------------------------
[10:18:56    INFO]  - starting storeTreeToAscii() ... 
[10:18:56    INFO]  - will write to file the following branches: Z,ANNZ_best,ANNZ_best_wgt,ANNZ_best_err,ANNZ_MLM_avg_0,ANNZ_MLM_avg_0_err,ANNZ_MLM_avg_0_wgt,ANNZ_PDF_avg_0,ANNZ_PDF_avg_0_err,ANNZ_PDF_avg_0_wgt,ANNZ_PDF_0_0,ANNZ_PDF_0_1,ANNZ_PDF_0_2,ANNZ_PDF_0_3,ANNZ_PDF_0_4,ANNZ_PDF_0_5,ANNZ_PDF_0_6,ANNZ_PDF_0_7,ANNZ_PDF_0_8,ANNZ_PDF_0_9,ANNZ_PDF_0_10,ANNZ_PDF_0_11,ANNZ_PDF_0_12,ANNZ_PDF_0_13,ANNZ_PDF_0_14,ANNZ_PDF_0_15,ANNZ_PDF_0_16,ANNZ_PDF_0_17,ANNZ_PDF_0_18,ANNZ_PDF_0_19,ANNZ_PDF_0_20,ANNZ_PDF_0_21,ANNZ_PDF_0_22,ANNZ_PDF_0_23,ANNZ_PDF_0_24,ANNZ_PDF_0_25,ANNZ_PDF_0_26,ANNZ_PDF_0_27,ANNZ_PDF_0_28,ANNZ_PDF_0_29,ANNZ_PDF_0_30,ANNZ_PDF_0_31,ANNZ_PDF_0_32,ANNZ_PDF_0_33,ANNZ_PDF_0_34,ANNZ_PDF_0_35,ANNZ_PDF_0_36,ANNZ_PDF_0_37,ANNZ_PDF_0_38,ANNZ_PDF_0_39,ANNZ_PDF_0_40,ANNZ_PDF_0_41,ANNZ_PDF_0_42,ANNZ_PDF_0_43,ANNZ_PDF_0_44,ANNZ_PDF_0_45,ANNZ_PDF_0_46,ANNZ_PDF_0_47,ANNZ_PDF_0_48,ANNZ_PDF_0_49,ANNZ_PDF_0_50,ANNZ_PDF_0_51,ANNZ_PDF_0_52,ANNZ_PDF_0_53,ANNZ_PDF_0_54,ANNZ_PDF_0_55,ANNZ_PDF_0_56,ANNZ_PDF_0_57,ANNZ_PDF_0_58,ANNZ_PDF_0_59,ANNZ_PDF_0_60,ANNZ_PDF_0_61,ANNZ_PDF_0_62,ANNZ_PDF_0_63,ANNZ_PDF_0_64,ANNZ_PDF_0_65,ANNZ_PDF_0_66,ANNZ_PDF_0_67,ANNZ_PDF_0_68,ANNZ_PDF_0_69,ANNZ_PDF_0_70,ANNZ_PDF_0_71,ANNZ_PDF_0_72,ANNZ_PDF_0_73,ANNZ_PDF_0_74,ANNZ_PDF_0_75,ANNZ_PDF_0_76,ANNZ_PDF_0_77,ANNZ_PDF_0_78,ANNZ_PDF_0_79,ANNZ_PDF_0_80,ANNZ_PDF_0_81,ANNZ_PDF_0_82,ANNZ_PDF_0_83,ANNZ_PDF_0_84,ANNZ_PDF_0_85,ANNZ_PDF_0_86,ANNZ_PDF_0_87,ANNZ_PDF_0_88,ANNZ_PDF_0_89,ANNZ_PDF_0_90,ANNZ_PDF_0_91,ANNZ_PDF_0_92,ANNZ_PDF_0_93,ANNZ_PDF_0_94,ANNZ_PDF_0_95,ANNZ_PDF_0_96,ANNZ_PDF_0_97,ANNZ_PDF_0_98,ANNZ_PDF_0_99,ANNZ_PDF_0_100,ANNZ_PDF_0_101,ANNZ_PDF_0_102,ANNZ_PDF_0_103,ANNZ_PDF_0_104,ANNZ_PDF_0_105,ANNZ_PDF_0_106,ANNZ_PDF_0_107,ANNZ_PDF_0_108,ANNZ_PDF_0_109,ANNZ_PDF_0_110,ANNZ_PDF_0_111,ANNZ_PDF_0_112,ANNZ_PDF_0_113,ANNZ_PDF_0_114,ANNZ_PDF_0_115,ANNZ_PDF_0_116,ANNZ_PDF_0_117,ANNZ_PDF_0_118,ANNZ_PDF_0_119,
[10:18:56    INFO]  - Will parse  ANNZ_tree_randomReg(13343)... Now in ./output/PAUS_advanced7/regres/eval_nFile0/ANNZ_randomReg_0000.csv
[10:18:57    INFO]  -- COUNTERS ------------------------------------------------------------------------------
[10:18:57    INFO]  -- ANNZ_randomReg ................................. 13343  nObj
[10:18:57    INFO]  -----------------------------------------------------------------------------------------------------------
[10:19:01    INFO]  - detected the target,Z in the evaluated sample - Will create performance plots ...
[10:19:01    INFO]  - starting ANNZ::doMetricPlots() ... 
[10:19:01    INFO]  - Will use (1) MLMs from the input chain: ANNZ_best,
[10:19:01    INFO]  - Will use (1) PDFs from the input chain: PDF_0,
[10:19:04    INFO]  - Writing to plotting directory output/PAUS_advanced7/regres/eval_nFile0/plots/

(10:19 INFO) [40;37;1m - 29/01/19 10:19:05 - finished running ANNZ ![0m
